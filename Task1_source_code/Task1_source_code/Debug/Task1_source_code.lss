
Task1_source_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ffa  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000134  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  00001160  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000049a0  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f01  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002186  00000000  00000000  00006d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e0  00000000  00000000  00008ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000406  00000000  00000000  000095d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020f3  00000000  00000000  000099d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000268  00000000  00000000  0000bac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000f16  00000f16  00000fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000bd34  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Initialize_E2PROM_State 00000016  00000e28  00000e28  00000efc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Read_E2PROM_State 0000000c  00000eae  00000eae  00000f82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.check_State 000000ae  00000750  00000750  00000824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.handle_State 00000114  000001ea  000001ea  000002be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.handle_event 00000046  00000bd0  00000bd0  00000ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.UART_Transmit_State 0000004a  00000b3e  00000b3e  00000c12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.EEPROM_State_Add 00000001  00800066  00000f24  00000ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.Initialize_TEMP_SENSOR 0000000c  00000eba  00000eba  00000f8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Read_TEMP_SENSOR 00000030  00000ce0  00000ce0  00000db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.DC_Initialize 00000052  00000a9e  00000a9e  00000b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DC_Start 00000090  000007fe  000007fe  000008d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DC_Stop 0000004e  00000af0  00000af0  00000bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.DC_Change_Speed 00000026  00000d3e  00000d3e  00000e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    000000c2  0000068e  0000068e  00000762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_1 00000042  00000c9e  00000c9e  00000d72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_11 0000006c  0000097c  0000097c  00000a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .data.Speed_Scale 00000001  00800067  00000f25  00000ff9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .bss.temperature 00000002  00800064  00800064  00000ffa  2**0
                  ALLOC
 32 .bss.temp_counter 00000001  00800068  00800068  00000ffa  2**0
                  ALLOC
 33 .bss.bot1_intur 00000001  00800069  00800069  00000ffa  2**0
                  ALLOC
 34 .bss.reset    00000001  0080006a  0080006a  00000ffa  2**0
                  ALLOC
 35 .bss.overflow_count 00000001  0080006b  0080006b  00000ffa  2**0
                  ALLOC
 36 .bss.buttonPressed 00000001  0080006c  0080006c  00000ffa  2**0
                  ALLOC
 37 .bss.currentState 00000001  0080006d  0080006d  00000ffa  2**0
                  ALLOC
 38 .text.ADC_Initialize 0000000e  00000e76  00000e76  00000f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.ADC_Read 00000074  00000908  00000908  000009dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.DIO_SetPinDirection 000000e2  000003f6  000003f6  000004ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.DIO_SetPinValue 000000e2  000004d8  000004d8  000005ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.External_Interrupt0_Initalize 00000058  00000a46  00000a46  00000b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.Timer0_OVF_WithInterrupt_Initialize 00000026  00000d64  00000d64  00000e38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.Timer0_OVF_WithInterrupt_Start 000000f8  000002fe  000002fe  000003d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.Timer0_OVF_WithInterrupt_Stop 00000024  00000d8a  00000d8a  00000e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .bss.Overflow_Cycle 00000004  00800060  00800060  00000ffa  2**0
                  ALLOC
 47 .text.UART_Initialize_WithoutInterrupt 00000120  000000ca  000000ca  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.UART_Transmit_Character 0000000a  00000eea  00000eea  00000fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.UART_Transmit_Word 0000001c  00000df2  00000df2  00000ec6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.WDT_ON  0000000c  00000ec6  00000ec6  00000f9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text         0000000a  00000ef4  00000ef4  00000fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text         0000005e  000009e8  000009e8  00000abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text         0000007a  0000088e  0000088e  00000962  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text         00000048  00000b88  00000b88  00000c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text         00000044  00000c16  00000c16  00000cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text         0000000e  00000e84  00000e84  00000f58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text         0000000a  00000efe  00000efe  00000fd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text         00000008  00000f08  00000f08  00000fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text         000000d4  000005ba  000005ba  0000068e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text         0000000c  00000ed2  00000ed2  00000fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text         00000006  00000f10  00000f10  00000fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text         0000000e  00000e92  00000e92  00000f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text         0000000e  00000ea0  00000ea0  00000f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text         00000022  00000dae  00000dae  00000e82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc.div 00000044  00000c5a  00000c5a  00000d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.libgcc.div 0000002e  00000d10  00000d10  00000de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.libgcc.div 00000010  00000e66  00000e66  00000f3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.libgcc  0000000c  00000ede  00000ede  00000fb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__dummy_fini 00000002  00000f1e  00000f1e  00000ff2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__dummy_funcs_on_exit 00000002  00000f20  00000f20  00000ff4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__dummy_simulator_exit 00000002  00000f22  00000f22  00000ff6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.exit    00000016  00000e3e  00000e3e  00000f12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text._Exit   00000004  00000f1a  00000f1a  00000fee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.avrlibc 00000012  00000e54  00000e54  00000f28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.avrlibc 00000022  00000dd0  00000dd0  00000ea4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.avrlibc 0000001a  00000e0e  00000e0e  00000ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_1>
   8:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
   c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  10:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  14:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  18:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  1c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  20:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  24:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  28:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  2c:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_11>
  30:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  34:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  38:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  3c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  40:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  44:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  48:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  4c:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  50:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <__bad_interrupt>
  54:	91 04       	cpc	r9, r1
  56:	95 04       	cpc	r9, r5
  58:	9a 04       	cpc	r9, r10
  5a:	9f 04       	cpc	r9, r15
  5c:	a4 04       	cpc	r10, r4
  5e:	a9 04       	cpc	r10, r9
  60:	ae 04       	cpc	r10, r14
  62:	b3 04       	cpc	r11, r3

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	00 66       	ori	r16, 0x60	; 96
  68:	80 00       	.word	0x0080	; ????
  6a:	66 00       	.word	0x0066	; ????
  6c:	68 00       	.word	0x0068	; ????
  6e:	0f 24       	eor	r0, r15
  70:	00 68       	ori	r16, 0x80	; 128
  72:	00 6e       	ori	r16, 0xE0	; 224
  74:	80 00       	.word	0x0080	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	17 c0       	rjmp	.+46     	; 0xb8 <__do_clear_bss+0x8>
  8a:	b5 91       	lpm	r27, Z+
  8c:	a5 91       	lpm	r26, Z+
  8e:	35 91       	lpm	r19, Z+
  90:	25 91       	lpm	r18, Z+
  92:	05 91       	lpm	r16, Z+
  94:	07 fd       	sbrc	r16, 7
  96:	0c c0       	rjmp	.+24     	; 0xb0 <__do_clear_bss>
  98:	95 91       	lpm	r25, Z+
  9a:	85 91       	lpm	r24, Z+
  9c:	ef 01       	movw	r28, r30
  9e:	f9 2f       	mov	r31, r25
  a0:	e8 2f       	mov	r30, r24
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a2 17       	cp	r26, r18
  a8:	b3 07       	cpc	r27, r19
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0x20>
  ac:	fe 01       	movw	r30, r28
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <__do_clear_bss+0x8>

000000b0 <__do_clear_bss>:
  b0:	1d 92       	st	X+, r1
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	e1 f7       	brne	.-8      	; 0xb0 <__do_clear_bss>
  b8:	e5 37       	cpi	r30, 0x75	; 117
  ba:	f4 07       	cpc	r31, r20
  bc:	31 f7       	brne	.-52     	; 0x8a <__do_copy_data+0x8>
  be:	0e 94 47 03 	call	0x68e	; 0x68e <main>
  c2:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <exit>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>

Disassembly of section .text:

00000f16 <__bad_interrupt>:
 f16:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Initialize_E2PROM_State:

00000e28 <Initialize_E2PROM_State>:
uint8_t EEPROM_State_Add=0b01000000;	//any place

void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
 e28:	60 e0       	ldi	r22, 0x00	; 0
 e2a:	86 e6       	ldi	r24, 0x66	; 102
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <eeprom_update_byte>
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
 e32:	60 e0       	ldi	r22, 0x00	; 0
 e34:	86 e6       	ldi	r24, 0x66	; 102
 e36:	90 e0       	ldi	r25, 0x00	; 0
 e38:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <eeprom_update_byte>
 e3c:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

00000eae <Read_E2PROM_State>:
}

uint8_t Read_E2PROM_State (void){
	
	/*	read the state	*/
	uint8_t x= eeprom_read_byte (&EEPROM_State_Add); 		
 eae:	66 e6       	ldi	r22, 0x66	; 102
 eb0:	70 e0       	ldi	r23, 0x00	; 0
 eb2:	80 e8       	ldi	r24, 0x80	; 128
 eb4:	0e 94 2a 07 	call	0xe54	; 0xe54 <eeprom_read_byte>
	return x;
}
 eb8:	08 95       	ret

Disassembly of section .text.check_State:

00000750 <check_State>:
	/*	check the state	*/
	check_State(T,counter,S);
	handle_State(T,DC_fan,Speed,S,reset);
}

void check_State(temp T,uint8_t *counter,E2PROM_State* S){
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	8b 01       	movw	r16, r22
 762:	ea 01       	movw	r28, r20
	
	/*	check if the state is changed	*/
	if(T<50.0 && *S!=Normal_state){
 764:	bc 01       	movw	r22, r24
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 47 04 	call	0x88e	; 0x88e <__floatunsisf>
 76e:	6b 01       	movw	r12, r22
 770:	7c 01       	movw	r14, r24
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	48 e4       	ldi	r20, 0x48	; 72
 778:	52 e4       	ldi	r21, 0x42	; 66
 77a:	0e 94 7a 07 	call	0xef4	; 0xef4 <__cmpsf2>
 77e:	88 23       	and	r24, r24
 780:	74 f4       	brge	.+28     	; 0x79e <check_State+0x4e>
 782:	88 81       	ld	r24, Y
 784:	88 23       	and	r24, r24
 786:	59 f0       	breq	.+22     	; 0x79e <check_State+0x4e>
		*counter=0;
 788:	f8 01       	movw	r30, r16
 78a:	10 82       	st	Z, r1
		*S=Normal_state;
 78c:	18 82       	st	Y, r1
		eeprom_write_byte (&EEPROM_State_Add, *S);
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	86 e6       	ldi	r24, 0x66	; 102
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 07 07 	call	0xe0e	; 0xe0e <eeprom_write_byte>
		Timer0_OVF_WithInterrupt_Stop();
 798:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Timer0_OVF_WithInterrupt_Stop>
 79c:	17 c0       	rjmp	.+46     	; 0x7cc <check_State+0x7c>
	}
	else if(T>=50.0 && *S==Normal_state){
 79e:	20 e0       	ldi	r18, 0x00	; 0
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	48 e4       	ldi	r20, 0x48	; 72
 7a4:	52 e4       	ldi	r21, 0x42	; 66
 7a6:	c7 01       	movw	r24, r14
 7a8:	b6 01       	movw	r22, r12
 7aa:	0e 94 7f 07 	call	0xefe	; 0xefe <__gesf2>
 7ae:	88 23       	and	r24, r24
 7b0:	6c f0       	brlt	.+26     	; 0x7cc <check_State+0x7c>
 7b2:	88 81       	ld	r24, Y
 7b4:	81 11       	cpse	r24, r1
 7b6:	0a c0       	rjmp	.+20     	; 0x7cc <check_State+0x7c>
		*S=Emergency_state;
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	88 83       	st	Y, r24
		eeprom_write_byte (&EEPROM_State_Add, *S);
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	86 e6       	ldi	r24, 0x66	; 102
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 07 07 	call	0xe0e	; 0xe0e <eeprom_write_byte>
		Timer0_OVF_WithInterrupt_Start(Timer0_PRE_1024);
 7c6:	85 e0       	ldi	r24, 0x05	; 5
 7c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Timer0_OVF_WithInterrupt_Start>
	}
	
	 // 7 seconds elapsed on emergency
	if(*counter>=Emergency_counter_max && *S!=Abnormal_state){
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 81       	ld	r24, Z
 7d0:	8e 30       	cpi	r24, 0x0E	; 14
 7d2:	60 f0       	brcs	.+24     	; 0x7ec <check_State+0x9c>
 7d4:	88 81       	ld	r24, Y
 7d6:	82 30       	cpi	r24, 0x02	; 2
 7d8:	49 f0       	breq	.+18     	; 0x7ec <check_State+0x9c>
		*S=Abnormal_state;
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	88 83       	st	Y, r24
		eeprom_write_byte (&EEPROM_State_Add, *S);
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	86 e6       	ldi	r24, 0x66	; 102
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 07 07 	call	0xe0e	; 0xe0e <eeprom_write_byte>
		Timer0_OVF_WithInterrupt_Stop();
 7e8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Timer0_OVF_WithInterrupt_Stop>
	}
	
}
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	df 90       	pop	r13
 7fa:	cf 90       	pop	r12
 7fc:	08 95       	ret

Disassembly of section .text.handle_State:

000001ea <handle_State>:
}

void Write_E2PROM_State( E2PROM_State state){
	
	/*	write the state	*/
	eeprom_write_byte (&EEPROM_State_Add, (uint8_t)state); 
 1ea:	8f 92       	push	r8
 1ec:	9f 92       	push	r9
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	7c 01       	movw	r14, r24
 200:	c6 2f       	mov	r28, r22
 202:	d4 2f       	mov	r29, r20
 204:	f9 01       	movw	r30, r18
 206:	80 81       	ld	r24, Z
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	09 f4       	brne	.+2      	; 0x20e <handle_State+0x24>
 20c:	57 c0       	rjmp	.+174    	; 0x2bc <handle_State+0xd2>
 20e:	20 f0       	brcs	.+8      	; 0x218 <handle_State+0x2e>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	09 f4       	brne	.+2      	; 0x216 <handle_State+0x2c>
 214:	5d c0       	rjmp	.+186    	; 0x2d0 <handle_State+0xe6>
 216:	68 c0       	rjmp	.+208    	; 0x2e8 <handle_State+0xfe>
 218:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Timer0_OVF_WithInterrupt_Stop>
 21c:	b7 01       	movw	r22, r14
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 47 04 	call	0x88e	; 0x88e <__floatunsisf>
 226:	4b 01       	movw	r8, r22
 228:	5c 01       	movw	r10, r24
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 ea       	ldi	r20, 0xA0	; 160
 230:	51 e4       	ldi	r21, 0x41	; 65
 232:	0e 94 7a 07 	call	0xef4	; 0xef4 <__cmpsf2>
 236:	18 16       	cp	r1, r24
 238:	24 f0       	brlt	.+8      	; 0x242 <handle_State+0x58>
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DC_Stop>
 240:	53 c0       	rjmp	.+166    	; 0x2e8 <handle_State+0xfe>
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	40 ea       	ldi	r20, 0xA0	; 160
 248:	51 e4       	ldi	r21, 0x41	; 65
 24a:	c5 01       	movw	r24, r10
 24c:	b4 01       	movw	r22, r8
 24e:	0e 94 7f 07 	call	0xefe	; 0xefe <__gesf2>
 252:	18 16       	cp	r1, r24
 254:	14 f5       	brge	.+68     	; 0x29a <handle_State+0xb0>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e2       	ldi	r20, 0x20	; 32
 25c:	52 e4       	ldi	r21, 0x42	; 66
 25e:	c5 01       	movw	r24, r10
 260:	b4 01       	movw	r22, r8
 262:	0e 94 7a 07 	call	0xef4	; 0xef4 <__cmpsf2>
 266:	18 16       	cp	r1, r24
 268:	c4 f0       	brlt	.+48     	; 0x29a <handle_State+0xb0>
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DC_Start>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	da 3f       	cpi	r29, 0xFA	; 250
 276:	08 f4       	brcc	.+2      	; 0x27a <handle_State+0x90>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	8e 9d       	mul	r24, r14
 27e:	b0 01       	movw	r22, r0
 280:	8f 9d       	mul	r24, r15
 282:	70 0d       	add	r23, r0
 284:	9e 9d       	mul	r25, r14
 286:	70 0d       	add	r23, r0
 288:	11 24       	eor	r1, r1
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8c 2f       	mov	r24, r28
 294:	0e 94 9f 06 	call	0xd3e	; 0xd3e <DC_Change_Speed>
 298:	27 c0       	rjmp	.+78     	; 0x2e8 <handle_State+0xfe>
 29a:	f9 e2       	ldi	r31, 0x29	; 41
 29c:	ef 1a       	sub	r14, r31
 29e:	f1 08       	sbc	r15, r1
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	e8 16       	cp	r14, r24
 2a4:	f1 04       	cpc	r15, r1
 2a6:	00 f5       	brcc	.+64     	; 0x2e8 <handle_State+0xfe>
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	8c 2f       	mov	r24, r28
 2ac:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DC_Start>
 2b0:	60 ea       	ldi	r22, 0xA0	; 160
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	8c 2f       	mov	r24, r28
 2b6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <DC_Change_Speed>
 2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <handle_State+0xfe>
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	8c 2f       	mov	r24, r28
 2c0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DC_Start>
 2c4:	60 ea       	ldi	r22, 0xA0	; 160
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	8c 2f       	mov	r24, r28
 2ca:	0e 94 9f 06 	call	0xd3e	; 0xd3e <DC_Change_Speed>
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <handle_State+0xfe>
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	8c 2f       	mov	r24, r28
 2d4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DC_Start>
 2d8:	60 ea       	ldi	r22, 0xA0	; 160
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	8c 2f       	mov	r24, r28
 2de:	0e 94 9f 06 	call	0xd3e	; 0xd3e <DC_Change_Speed>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	f8 01       	movw	r30, r16
 2e6:	80 83       	st	Z, r24
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	bf 90       	pop	r11
 2f6:	af 90       	pop	r10
 2f8:	9f 90       	pop	r9
 2fa:	8f 90       	pop	r8
 2fc:	08 95       	ret

Disassembly of section .text.handle_event:

00000bd0 <handle_event>:
}


void handle_event(temp T,uint8_t *counter,dc_motor DC_fan,uint8_t Speed, E2PROM_State* S,uint8_t* reset){
 bd0:	af 92       	push	r10
 bd2:	bf 92       	push	r11
 bd4:	cf 92       	push	r12
 bd6:	df 92       	push	r13
 bd8:	ef 92       	push	r14
 bda:	ff 92       	push	r15
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	ec 01       	movw	r28, r24
 be6:	b4 2e       	mov	r11, r20
 be8:	a2 2e       	mov	r10, r18
 bea:	68 01       	movw	r12, r16
 bec:	87 01       	movw	r16, r14
	
	/*	check the state	*/
	check_State(T,counter,S);
 bee:	a6 01       	movw	r20, r12
 bf0:	0e 94 a8 03 	call	0x750	; 0x750 <check_State>
	handle_State(T,DC_fan,Speed,S,reset);
 bf4:	96 01       	movw	r18, r12
 bf6:	4a 2d       	mov	r20, r10
 bf8:	6b 2d       	mov	r22, r11
 bfa:	ce 01       	movw	r24, r28
 bfc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <handle_State>
}
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	ff 90       	pop	r15
 c0a:	ef 90       	pop	r14
 c0c:	df 90       	pop	r13
 c0e:	cf 90       	pop	r12
 c10:	bf 90       	pop	r11
 c12:	af 90       	pop	r10
 c14:	08 95       	ret

Disassembly of section .text.UART_Transmit_State:

00000b3e <UART_Transmit_State>:
	}

}

void UART_Transmit_State(const temp T,uint8_t counter,uint8_t *bot1f){
	if (T>=50)
 b3e:	82 33       	cpi	r24, 0x32	; 50
 b40:	91 05       	cpc	r25, r1
 b42:	70 f0       	brcs	.+28     	; 0xb60 <UART_Transmit_State+0x22>
	{	
		if (counter<Emergency_counter_max)
 b44:	6e 30       	cpi	r22, 0x0E	; 14
 b46:	38 f4       	brcc	.+14     	; 0xb56 <UART_Transmit_State+0x18>
		{	//Emergency
			/* Reset the flag	*/
			*bot1f=0;
 b48:	fa 01       	movw	r30, r20
 b4a:	10 82       	st	Z, r1
			//send the emergency signal
			uart_status x=UART_Transmit_Word(Emergency_Mes);
 b4c:	8c e2       	ldi	r24, 0x2C	; 44
 b4e:	91 e0       	ldi	r25, 0x01	; 1
 b50:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Transmit_Word>
 b54:	08 95       	ret
		} 
		else
		{
			//Abnormal
			uart_status x=UART_Transmit_Word(Abnormal_Mes);
 b56:	8e e5       	ldi	r24, 0x5E	; 94
 b58:	91 e0       	ldi	r25, 0x01	; 1
 b5a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Transmit_Word>
 b5e:	08 95       	ret
		}

	}
	else if (T>40 && T<=50 && *bot1f==1)
 b60:	9c 01       	movw	r18, r24
 b62:	29 52       	subi	r18, 0x29	; 41
 b64:	31 09       	sbc	r19, r1
 b66:	2a 30       	cpi	r18, 0x0A	; 10
 b68:	31 05       	cpc	r19, r1
 b6a:	48 f4       	brcc	.+18     	; 0xb7e <UART_Transmit_State+0x40>
 b6c:	fa 01       	movw	r30, r20
 b6e:	20 81       	ld	r18, Z
 b70:	21 30       	cpi	r18, 0x01	; 1
 b72:	29 f4       	brne	.+10     	; 0xb7e <UART_Transmit_State+0x40>
	{	
		//send the off signal
		uart_status x=UART_Transmit_Word(Off_Mes);
 b74:	8f ef       	ldi	r24, 0xFF	; 255
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Transmit_Word>
			uart_status x=UART_Transmit_Word(Abnormal_Mes);
		}

	}
	else if (T>40 && T<=50 && *bot1f==1)
	{	
 b7c:	08 95       	ret
		//send the off signal
		uart_status x=UART_Transmit_Word(Off_Mes);
	}
	else{
		/* Reset the flag	*/
		*bot1f=0;
 b7e:	fa 01       	movw	r30, r20
 b80:	10 82       	st	Z, r1
		uart_status x=UART_Transmit_Word(T);
 b82:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Transmit_Word>
 b86:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

00000eba <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
 eba:	41 e0       	ldi	r20, 0x01	; 1
 ebc:	60 e0       	ldi	r22, 0x00	; 0
 ebe:	80 e0       	ldi	r24, 0x00	; 0
 ec0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
 ec4:	08 95       	ret

Disassembly of section .text.Read_TEMP_SENSOR:

00000ce0 <Read_TEMP_SENSOR>:
}

temp Read_TEMP_SENSOR(void){
	uint16_t temp_volt=ADC_Read(TEMP_SEN_PIN);
 ce0:	80 e0       	ldi	r24, 0x00	; 0
 ce2:	0e 94 84 04 	call	0x908	; 0x908 <ADC_Read>
	temp temp_read = temp_volt*500.0/1024.0 ;
 ce6:	bc 01       	movw	r22, r24
 ce8:	80 e0       	ldi	r24, 0x00	; 0
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 94 47 04 	call	0x88e	; 0x88e <__floatunsisf>
 cf0:	20 e0       	ldi	r18, 0x00	; 0
 cf2:	30 e0       	ldi	r19, 0x00	; 0
 cf4:	4a ef       	ldi	r20, 0xFA	; 250
 cf6:	53 e4       	ldi	r21, 0x43	; 67
 cf8:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulsf3>
 cfc:	20 e0       	ldi	r18, 0x00	; 0
 cfe:	30 e0       	ldi	r19, 0x00	; 0
 d00:	40 e8       	ldi	r20, 0x80	; 128
 d02:	5a e3       	ldi	r21, 0x3A	; 58
 d04:	0e 94 84 07 	call	0xf08	; 0xf08 <__mulsf3>
 d08:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__fixunssfsi>
	return temp_read;
 d0c:	cb 01       	movw	r24, r22
 d0e:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00000a9e <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{	
	switch(motor)
 a9e:	88 23       	and	r24, r24
 aa0:	19 f0       	breq	.+6      	; 0xaa8 <DC_Initialize+0xa>
 aa2:	81 30       	cpi	r24, 0x01	; 1
 aa4:	a9 f0       	breq	.+42     	; 0xad0 <DC_Initialize+0x32>
 aa6:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
 aa8:	41 e0       	ldi	r20, 0x01	; 1
 aaa:	65 e0       	ldi	r22, 0x05	; 5
 aac:	83 e0       	ldi	r24, 0x03	; 3
 aae:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
 ab2:	41 e0       	ldi	r20, 0x01	; 1
 ab4:	61 e0       	ldi	r22, 0x01	; 1
 ab6:	82 e0       	ldi	r24, 0x02	; 2
 ab8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
 abc:	41 e0       	ldi	r20, 0x01	; 1
 abe:	62 e0       	ldi	r22, 0x02	; 2
 ac0:	82 e0       	ldi	r24, 0x02	; 2
 ac2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
		// Set Timer1 to Fast PWM mode with 8-bit resolution
		TCCR1A = (1 << WGM10) | (1 << WGM12) | (1 << COM1A1); // Fast PWM, Clear OC1A on Compare Match
 ac6:	89 e8       	ldi	r24, 0x89	; 137
 ac8:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);    // Prescaler = 64, start the timer
 aca:	8b e0       	ldi	r24, 0x0B	; 11
 acc:	8e bd       	out	0x2e, r24	; 46
		break;
 ace:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
 ad0:	41 e0       	ldi	r20, 0x01	; 1
 ad2:	62 e0       	ldi	r22, 0x02	; 2
 ad4:	83 e0       	ldi	r24, 0x03	; 3
 ad6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
 ada:	41 e0       	ldi	r20, 0x01	; 1
 adc:	62 e0       	ldi	r22, 0x02	; 2
 ade:	82 e0       	ldi	r24, 0x02	; 2
 ae0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
 ae4:	41 e0       	ldi	r20, 0x01	; 1
 ae6:	62 e0       	ldi	r22, 0x02	; 2
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
 aee:	08 95       	ret

Disassembly of section .text.DC_Start:

000007fe <DC_Start>:
	}
	
}

void DC_Start(dc_motor motor, dc_motor_direction direction)
{	
 7fe:	cf 93       	push	r28
 800:	c6 2f       	mov	r28, r22
	switch(motor)
 802:	88 23       	and	r24, r24
 804:	19 f0       	breq	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 806:	81 30       	cpi	r24, 0x01	; 1
 808:	09 f1       	breq	.+66     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 80a:	3f c0       	rjmp	.+126    	; 0x88a <__stack+0x2b>
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_HIGH);
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	65 e0       	ldi	r22, 0x05	; 5
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		switch(direction)
 816:	cc 23       	and	r28, r28
 818:	19 f0       	breq	.+6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81a:	c1 30       	cpi	r28, 0x01	; 1
 81c:	61 f0       	breq	.+24     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 81e:	35 c0       	rjmp	.+106    	; 0x88a <__stack+0x2b>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_HIGH);
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	62 e0       	ldi	r22, 0x02	; 2
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			break;
 834:	2a c0       	rjmp	.+84     	; 0x88a <__stack+0x2b>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	61 e0       	ldi	r22, 0x01	; 1
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_HIGH);
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	62 e0       	ldi	r22, 0x02	; 2
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			break;
 84a:	1f c0       	rjmp	.+62     	; 0x88a <__stack+0x2b>
		}
		break;
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_HIGH);
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	62 e0       	ldi	r22, 0x02	; 2
 850:	83 e0       	ldi	r24, 0x03	; 3
 852:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		switch(direction)
 856:	cc 23       	and	r28, r28
 858:	19 f0       	breq	.+6      	; 0x860 <__stack+0x1>
 85a:	c1 30       	cpi	r28, 0x01	; 1
 85c:	61 f0       	breq	.+24     	; 0x876 <__stack+0x17>
 85e:	15 c0       	rjmp	.+42     	; 0x88a <__stack+0x2b>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_HIGH);
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	62 e0       	ldi	r22, 0x02	; 2
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
 86a:	40 e0       	ldi	r20, 0x00	; 0
 86c:	62 e0       	ldi	r22, 0x02	; 2
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			break;
 874:	0a c0       	rjmp	.+20     	; 0x88a <__stack+0x2b>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
 876:	40 e0       	ldi	r20, 0x00	; 0
 878:	62 e0       	ldi	r22, 0x02	; 2
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_HIGH);
 880:	41 e0       	ldi	r20, 0x01	; 1
 882:	62 e0       	ldi	r22, 0x02	; 2
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
			break;
		}
		break;
	}
}
 88a:	cf 91       	pop	r28
 88c:	08 95       	ret

Disassembly of section .text.DC_Stop:

00000af0 <DC_Stop>:

void DC_Stop(dc_motor motor)
{
	switch(motor)
 af0:	88 23       	and	r24, r24
 af2:	19 f0       	breq	.+6      	; 0xafa <DC_Stop+0xa>
 af4:	81 30       	cpi	r24, 0x01	; 1
 af6:	99 f0       	breq	.+38     	; 0xb1e <DC_Stop+0x2e>
 af8:	08 95       	ret
	{
		case DC_Motor1:
		// Stop the pulse
		OCR1A=0;
 afa:	1b bc       	out	0x2b, r1	; 43
 afc:	1a bc       	out	0x2a, r1	; 42
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_LOW);
 afe:	40 e0       	ldi	r20, 0x00	; 0
 b00:	65 e0       	ldi	r22, 0x05	; 5
 b02:	83 e0       	ldi	r24, 0x03	; 3
 b04:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
 b08:	40 e0       	ldi	r20, 0x00	; 0
 b0a:	61 e0       	ldi	r22, 0x01	; 1
 b0c:	82 e0       	ldi	r24, 0x02	; 2
 b0e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
 b12:	40 e0       	ldi	r20, 0x00	; 0
 b14:	62 e0       	ldi	r22, 0x02	; 2
 b16:	82 e0       	ldi	r24, 0x02	; 2
 b18:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		break;
 b1c:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_LOW);
 b1e:	40 e0       	ldi	r20, 0x00	; 0
 b20:	62 e0       	ldi	r22, 0x02	; 2
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
 b28:	40 e0       	ldi	r20, 0x00	; 0
 b2a:	62 e0       	ldi	r22, 0x02	; 2
 b2c:	82 e0       	ldi	r24, 0x02	; 2
 b2e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
 b32:	40 e0       	ldi	r20, 0x00	; 0
 b34:	62 e0       	ldi	r22, 0x02	; 2
 b36:	82 e0       	ldi	r24, 0x02	; 2
 b38:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <DIO_SetPinValue>
 b3c:	08 95       	ret

Disassembly of section .text.DC_Change_Speed:

00000d3e <DC_Change_Speed>:
		break;
	}
}

void DC_Change_Speed(dc_motor motor,uint16_t speed)
{	switch (motor){
 d3e:	88 23       	and	r24, r24
 d40:	19 f0       	breq	.+6      	; 0xd48 <DC_Change_Speed+0xa>
 d42:	81 30       	cpi	r24, 0x01	; 1
 d44:	41 f0       	breq	.+16     	; 0xd56 <DC_Change_Speed+0x18>
 d46:	08 95       	ret
		case DC_Motor1:
			OCR1A = speed/4;
 d48:	76 95       	lsr	r23
 d4a:	67 95       	ror	r22
 d4c:	76 95       	lsr	r23
 d4e:	67 95       	ror	r22
 d50:	7b bd       	out	0x2b, r23	; 43
 d52:	6a bd       	out	0x2a, r22	; 42
		break;
 d54:	08 95       	ret
		case DC_Motor2:
			OCR1B = speed/4;
 d56:	76 95       	lsr	r23
 d58:	67 95       	ror	r22
 d5a:	76 95       	lsr	r23
 d5c:	67 95       	ror	r22
 d5e:	79 bd       	out	0x29, r23	; 41
 d60:	68 bd       	out	0x28, r22	; 40
 d62:	08 95       	ret

Disassembly of section .text.main:

0000068e <main>:




int main(void)
{	
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
	/*		Initializations		*/
	dc_motor DC_fan1=DC_Motor1;
	DC_Initialize(DC_fan1);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DC_Initialize>
	Initialize_E2PROM_State();
 69c:	0e 94 14 07 	call	0xe28	; 0xe28 <Initialize_E2PROM_State>
	Initialize_TEMP_SENSOR();
 6a0:	0e 94 5d 07 	call	0xeba	; 0xeba <Initialize_TEMP_SENSOR>
	ADC_Initialize(5,1024);
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	85 e0       	ldi	r24, 0x05	; 5
 6a8:	0e 94 3b 07 	call	0xe76	; 0xe76 <ADC_Initialize>
	DIO_SetPinDirection(BOT1_PORT,BOT1_PIN,DIO_INPUT); //push button 
 6ac:	8b b3       	in	r24, 0x1b	; 27
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_SetPinDirection>
	Timer0_OVF_WithInterrupt_Initialize();
 6b6:	0e 94 b2 06 	call	0xd64	; 0xd64 <Timer0_OVF_WithInterrupt_Initialize>
	
	uart_status UART_State= UART_Initialize_WithoutInterrupt(UART_9600,Synchronous, Disable , Bits_8, Bit_1);
 6ba:	00 e0       	ldi	r16, 0x00	; 0
 6bc:	23 e0       	ldi	r18, 0x03	; 3
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	80 e6       	ldi	r24, 0x60	; 96
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
	if(UART_State==UART_NOK){
 6ca:	88 23       	and	r24, r24
 6cc:	d1 f1       	breq	.+116    	; 0x742 <main+0xb4>
		return 0;
	}

	External_Interrupt0_Initalize(INT0_RISING);
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	0e 94 23 05 	call	0xa46	; 0xa46 <External_Interrupt0_Initalize>
	

	
	// Read initial state from EEPROM
	uint8_t x= Read_E2PROM_State();
 6d4:	0e 94 57 07 	call	0xeae	; 0xeae <Read_E2PROM_State>
	if (x==0)
 6d8:	81 11       	cpse	r24, r1
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <main+0x54>
	{
		DC_Start(DC_fan1,DC_CW);
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DC_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e2:	8f e1       	ldi	r24, 0x1F	; 31
 6e4:	9e e4       	ldi	r25, 0x4E	; 78
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <main+0x58>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x5e>
 6ec:	00 00       	nop
	_delay_ms(10);

	/*	Main	Code	*/
    while(1)
    {	
		temperature=Read_TEMP_SENSOR();
 6ee:	0e 94 70 06 	call	0xce0	; 0xce0 <Read_TEMP_SENSOR>
 6f2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <temperature+0x1>
 6f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <temperature>
		
		/* Send the message (Temperature)	*/
		UART_Transmit_State(temperature,temp_counter,&buttonPressed);
 6fa:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <temp_counter>
 6fe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <temperature>
 702:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <temperature+0x1>
 706:	4c e6       	ldi	r20, 0x6C	; 108
 708:	50 e0       	ldi	r21, 0x00	; 0
 70a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <UART_Transmit_State>
		/*
		//Recieve the message (Speed)	
		UART_Receive_Speed(&Speed_Scale);
		*/
		
		handle_event(temperature,&temp_counter,DC_fan1,Speed_Scale,&currentState,&reset);
 70e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <temperature>
 712:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <temperature+0x1>
 716:	0f 2e       	mov	r0, r31
 718:	fa e6       	ldi	r31, 0x6A	; 106
 71a:	ef 2e       	mov	r14, r31
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	ff 2e       	mov	r15, r31
 720:	f0 2d       	mov	r31, r0
 722:	0d e6       	ldi	r16, 0x6D	; 109
 724:	10 e0       	ldi	r17, 0x00	; 0
 726:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Speed_Scale>
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	68 e6       	ldi	r22, 0x68	; 104
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <handle_event>
		
		//check if need reset
		if(reset==1){
 734:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <reset>
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	c9 f6       	brne	.-78     	; 0x6ee <main+0x60>
			//Watch dog
			WDT_ON();
 73c:	0e 94 63 07 	call	0xec6	; 0xec6 <WDT_ON>
 740:	d6 cf       	rjmp	.-84     	; 0x6ee <main+0x60>
		}
		
	}
}
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	08 95       	ret

Disassembly of section .text.__vector_1:

00000c9e <__vector_1>:

/*	Interrupt Service Routine for INT0 (bot1)	 */
ISR(INT0_vect)
{
 c9e:	1f 92       	push	r1
 ca0:	0f 92       	push	r0
 ca2:	0f b6       	in	r0, 0x3f	; 63
 ca4:	0f 92       	push	r0
 ca6:	11 24       	eor	r1, r1
 ca8:	2f 93       	push	r18
 caa:	8f 93       	push	r24
 cac:	9f 93       	push	r25
	bot1_intur++;
 cae:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <bot1_intur>
 cb2:	8f 5f       	subi	r24, 0xFF	; 255
 cb4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <bot1_intur>
	buttonPressed = 1;		/* Set the flag */
 cb8:	81 e0       	ldi	r24, 0x01	; 1
 cba:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <buttonPressed>
 cbe:	2f e7       	ldi	r18, 0x7F	; 127
 cc0:	88 e3       	ldi	r24, 0x38	; 56
 cc2:	91 e0       	ldi	r25, 0x01	; 1
 cc4:	21 50       	subi	r18, 0x01	; 1
 cc6:	80 40       	sbci	r24, 0x00	; 0
 cc8:	90 40       	sbci	r25, 0x00	; 0
 cca:	e1 f7       	brne	.-8      	; 0xcc4 <__vector_1+0x26>
 ccc:	00 c0       	rjmp	.+0      	; 0xcce <__vector_1+0x30>
 cce:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
}
 cd0:	9f 91       	pop	r25
 cd2:	8f 91       	pop	r24
 cd4:	2f 91       	pop	r18
 cd6:	0f 90       	pop	r0
 cd8:	0f be       	out	0x3f, r0	; 63
 cda:	0f 90       	pop	r0
 cdc:	1f 90       	pop	r1
 cde:	18 95       	reti

Disassembly of section .text.__vector_11:

0000097c <__vector_11>:

ISR(TIMER0_OVF_vect){
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	4f 93       	push	r20
 98c:	5f 93       	push	r21
 98e:	6f 93       	push	r22
 990:	7f 93       	push	r23
 992:	8f 93       	push	r24
 994:	9f 93       	push	r25
 996:	af 93       	push	r26
 998:	bf 93       	push	r27
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
	
	overflow_count++;
 99e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <overflow_count>
 9a2:	8f 5f       	subi	r24, 0xFF	; 255
 9a4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <overflow_count>
	if (overflow_count >= 16) {
 9a8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <overflow_count>
 9ac:	80 31       	cpi	r24, 0x10	; 16
 9ae:	58 f0       	brcs	.+22     	; 0x9c6 <__vector_11+0x4a>
		overflow_count = 0;
 9b0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <overflow_count>

		// check the temperature
		if(Read_TEMP_SENSOR()>=50){
 9b4:	0e 94 70 06 	call	0xce0	; 0xce0 <Read_TEMP_SENSOR>
 9b8:	c2 97       	sbiw	r24, 0x32	; 50
 9ba:	28 f0       	brcs	.+10     	; 0x9c6 <__vector_11+0x4a>
			temp_counter++;
 9bc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_counter>
 9c0:	8f 5f       	subi	r24, 0xFF	; 255
 9c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <temp_counter>
		}
	}

 9c6:	ff 91       	pop	r31
 9c8:	ef 91       	pop	r30
 9ca:	bf 91       	pop	r27
 9cc:	af 91       	pop	r26
 9ce:	9f 91       	pop	r25
 9d0:	8f 91       	pop	r24
 9d2:	7f 91       	pop	r23
 9d4:	6f 91       	pop	r22
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

Disassembly of section .text.ADC_Initialize:

00000e76 <ADC_Initialize>:

#include "ADC_Private.h"

void ADC_Initialize(adc_vref voltage , adc_prescaler prescaler)
{
	ADMUX |= 0x40;
 e76:	87 b1       	in	r24, 0x07	; 7
 e78:	80 64       	ori	r24, 0x40	; 64
 e7a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xA7;
 e7c:	86 b1       	in	r24, 0x06	; 6
 e7e:	87 6a       	ori	r24, 0xA7	; 167
 e80:	86 b9       	out	0x06, r24	; 6
 e82:	08 95       	ret

Disassembly of section .text.ADC_Read:

00000908 <ADC_Read>:
}

uint16_t ADC_Read(adc_channel channel)
{
 908:	e8 2f       	mov	r30, r24
	uint16_t val = 0;

	// Clear the ADC result register by reading it once
	uint16_t dummy = ADC_VAL;
 90a:	84 b1       	in	r24, 0x04	; 4
 90c:	95 b1       	in	r25, 0x05	; 5

	// Select the ADC channel
	switch (channel)
 90e:	8e 2f       	mov	r24, r30
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	88 30       	cpi	r24, 0x08	; 8
 914:	91 05       	cpc	r25, r1
 916:	50 f5       	brcc	.+84     	; 0x96c <ADC_Read+0x64>
 918:	fc 01       	movw	r30, r24
 91a:	e6 5d       	subi	r30, 0xD6	; 214
 91c:	ff 4f       	sbci	r31, 0xFF	; 255
 91e:	0c 94 6f 07 	jmp	0xede	; 0xede <__tablejump2__>
	{
		case ADC_0:
		ADMUX = (ADMUX & 0xF8) | 0x00; // Clear the channel bits and set ADC0
 922:	87 b1       	in	r24, 0x07	; 7
 924:	88 7f       	andi	r24, 0xF8	; 248
 926:	87 b9       	out	0x07, r24	; 7
		break;
 928:	21 c0       	rjmp	.+66     	; 0x96c <ADC_Read+0x64>
		case ADC_1:
		ADMUX = (ADMUX & 0xF8) | 0x01; // Clear the channel bits and set ADC1
 92a:	87 b1       	in	r24, 0x07	; 7
 92c:	88 7f       	andi	r24, 0xF8	; 248
 92e:	81 60       	ori	r24, 0x01	; 1
 930:	87 b9       	out	0x07, r24	; 7
		break;
 932:	1c c0       	rjmp	.+56     	; 0x96c <ADC_Read+0x64>
		case ADC_2:
		ADMUX = (ADMUX & 0xF8) | 0x02; // Clear the channel bits and set ADC2
 934:	87 b1       	in	r24, 0x07	; 7
 936:	88 7f       	andi	r24, 0xF8	; 248
 938:	82 60       	ori	r24, 0x02	; 2
 93a:	87 b9       	out	0x07, r24	; 7
		break;
 93c:	17 c0       	rjmp	.+46     	; 0x96c <ADC_Read+0x64>
		case ADC_3:
		ADMUX = (ADMUX & 0xF8) | 0x03; // Clear the channel bits and set ADC3
 93e:	87 b1       	in	r24, 0x07	; 7
 940:	88 7f       	andi	r24, 0xF8	; 248
 942:	83 60       	ori	r24, 0x03	; 3
 944:	87 b9       	out	0x07, r24	; 7
		break;
 946:	12 c0       	rjmp	.+36     	; 0x96c <ADC_Read+0x64>
		case ADC_4:
		ADMUX = (ADMUX & 0xF8) | 0x04; // Clear the channel bits and set ADC4
 948:	87 b1       	in	r24, 0x07	; 7
 94a:	88 7f       	andi	r24, 0xF8	; 248
 94c:	84 60       	ori	r24, 0x04	; 4
 94e:	87 b9       	out	0x07, r24	; 7
		break;
 950:	0d c0       	rjmp	.+26     	; 0x96c <ADC_Read+0x64>
		case ADC_5:
		ADMUX = (ADMUX & 0xF8) | 0x05; // Clear the channel bits and set ADC5
 952:	87 b1       	in	r24, 0x07	; 7
 954:	88 7f       	andi	r24, 0xF8	; 248
 956:	85 60       	ori	r24, 0x05	; 5
 958:	87 b9       	out	0x07, r24	; 7
		break;
 95a:	08 c0       	rjmp	.+16     	; 0x96c <ADC_Read+0x64>
		case ADC_6:
		ADMUX = (ADMUX & 0xF8) | 0x06; // Clear the channel bits and set ADC6
 95c:	87 b1       	in	r24, 0x07	; 7
 95e:	88 7f       	andi	r24, 0xF8	; 248
 960:	86 60       	ori	r24, 0x06	; 6
 962:	87 b9       	out	0x07, r24	; 7
		break;
 964:	03 c0       	rjmp	.+6      	; 0x96c <ADC_Read+0x64>
		case ADC_7:
		ADMUX = (ADMUX & 0xF8) | 0x07; // Clear the channel bits and set ADC7
 966:	87 b1       	in	r24, 0x07	; 7
 968:	87 60       	ori	r24, 0x07	; 7
 96a:	87 b9       	out	0x07, r24	; 7
		break;
	}

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 96c:	86 b1       	in	r24, 0x06	; 6
 96e:	80 64       	ori	r24, 0x40	; 64
 970:	86 b9       	out	0x06, r24	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 972:	36 99       	sbic	0x06, 6	; 6
 974:	fe cf       	rjmp	.-4      	; 0x972 <ADC_Read+0x6a>

	// Read the converted value
	val = ADC_VAL;
 976:	84 b1       	in	r24, 0x04	; 4
 978:	95 b1       	in	r25, 0x05	; 5

	return val;
}
 97a:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

000003f6 <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 3f6:	44 23       	and	r20, r20
 3f8:	19 f0       	breq	.+6      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	c9 f1       	breq	.+114    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 3fe:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	91 f0       	breq	.+36     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 404:	28 f0       	brcs	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	d9 f0       	breq	.+54     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 40a:	83 30       	cpi	r24, 0x03	; 3
 40c:	29 f1       	breq	.+74     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 40e:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 410:	2a b3       	in	r18, 0x1a	; 26
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	82 23       	and	r24, r18
 424:	8a bb       	out	0x1a, r24	; 26
			break;
 426:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 428:	27 b3       	in	r18, 0x17	; 23
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	80 95       	com	r24
 43a:	82 23       	and	r24, r18
 43c:	87 bb       	out	0x17, r24	; 23
			break;
 43e:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 440:	24 b3       	in	r18, 0x14	; 20
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	84 bb       	out	0x14, r24	; 20
			break;
 456:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 458:	21 b3       	in	r18, 0x11	; 17
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	80 95       	com	r24
 46a:	82 23       	and	r24, r18
 46c:	81 bb       	out	0x11, r24	; 17
			break;
 46e:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	89 f0       	breq	.+34     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 474:	28 f0       	brcs	.+10     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	c9 f0       	breq	.+50     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	11 f1       	breq	.+68     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 47e:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 480:	2a b3       	in	r18, 0x1a	; 26
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	82 2b       	or	r24, r18
 492:	8a bb       	out	0x1a, r24	; 26
			break;
 494:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 496:	27 b3       	in	r18, 0x17	; 23
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	82 2b       	or	r24, r18
 4a8:	87 bb       	out	0x17, r24	; 23
			break;
 4aa:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 4ac:	24 b3       	in	r18, 0x14	; 20
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	82 2b       	or	r24, r18
 4be:	84 bb       	out	0x14, r24	; 20
			break;
 4c0:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 4c2:	21 b3       	in	r18, 0x11	; 17
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	82 2b       	or	r24, r18
 4d4:	81 bb       	out	0x11, r24	; 17
 4d6:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

000004d8 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 4d8:	44 23       	and	r20, r20
 4da:	19 f0       	breq	.+6      	; 0x4e2 <DIO_SetPinValue+0xa>
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	c9 f1       	breq	.+114    	; 0x552 <DIO_SetPinValue+0x7a>
 4e0:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	91 f0       	breq	.+36     	; 0x50a <DIO_SetPinValue+0x32>
 4e6:	28 f0       	brcs	.+10     	; 0x4f2 <DIO_SetPinValue+0x1a>
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	d9 f0       	breq	.+54     	; 0x522 <DIO_SetPinValue+0x4a>
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	29 f1       	breq	.+74     	; 0x53a <DIO_SetPinValue+0x62>
 4f0:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 4f2:	2b b3       	in	r18, 0x1b	; 27
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_SetPinValue+0x26>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_SetPinValue+0x22>
 502:	80 95       	com	r24
 504:	82 23       	and	r24, r18
 506:	8b bb       	out	0x1b, r24	; 27
			break;
 508:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 50a:	28 b3       	in	r18, 0x18	; 24
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_SetPinValue+0x3e>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_SetPinValue+0x3a>
 51a:	80 95       	com	r24
 51c:	82 23       	and	r24, r18
 51e:	88 bb       	out	0x18, r24	; 24
			break;
 520:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 522:	25 b3       	in	r18, 0x15	; 21
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_SetPinValue+0x56>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_SetPinValue+0x52>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	85 bb       	out	0x15, r24	; 21
			break;
 538:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 53a:	22 b3       	in	r18, 0x12	; 18
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_SetPinValue+0x6e>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_SetPinValue+0x6a>
 54a:	80 95       	com	r24
 54c:	82 23       	and	r24, r18
 54e:	82 bb       	out	0x12, r24	; 18
			break;
 550:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	89 f0       	breq	.+34     	; 0x578 <DIO_SetPinValue+0xa0>
 556:	28 f0       	brcs	.+10     	; 0x562 <DIO_SetPinValue+0x8a>
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	c9 f0       	breq	.+50     	; 0x58e <DIO_SetPinValue+0xb6>
 55c:	83 30       	cpi	r24, 0x03	; 3
 55e:	11 f1       	breq	.+68     	; 0x5a4 <DIO_SetPinValue+0xcc>
 560:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 562:	2b b3       	in	r18, 0x1b	; 27
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_SetPinValue+0x96>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_SetPinValue+0x92>
 572:	82 2b       	or	r24, r18
 574:	8b bb       	out	0x1b, r24	; 27
			break;
 576:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 578:	28 b3       	in	r18, 0x18	; 24
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_SetPinValue+0xac>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_SetPinValue+0xa8>
 588:	82 2b       	or	r24, r18
 58a:	88 bb       	out	0x18, r24	; 24
			break;
 58c:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 58e:	25 b3       	in	r18, 0x15	; 21
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_SetPinValue+0xc2>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_SetPinValue+0xbe>
 59e:	82 2b       	or	r24, r18
 5a0:	85 bb       	out	0x15, r24	; 21
			break;
 5a2:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 5a4:	22 b3       	in	r18, 0x12	; 18
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_SetPinValue+0xd8>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_SetPinValue+0xd4>
 5b4:	82 2b       	or	r24, r18
 5b6:	82 bb       	out	0x12, r24	; 18
 5b8:	08 95       	ret

Disassembly of section .text.External_Interrupt0_Initalize:

00000a46 <External_Interrupt0_Initalize>:
#include "Interrupt_Private.h"

void External_Interrupt0_Initalize(int0_sense sense)
{
	// Define interrupt pin INT0 as input 
	CLR_BIT(DDRD,2);	
 a46:	91 b3       	in	r25, 0x11	; 17
 a48:	9b 7f       	andi	r25, 0xFB	; 251
 a4a:	91 bb       	out	0x11, r25	; 17
	// Disable global interrupt while initialization 
	cli();//Clear interrupt, CLR_BIT(SREG,7);
 a4c:	f8 94       	cli
	// Choose sensing method
	switch(sense)
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	69 f0       	breq	.+26     	; 0xa6c <External_Interrupt0_Initalize+0x26>
 a52:	28 f0       	brcs	.+10     	; 0xa5e <External_Interrupt0_Initalize+0x18>
 a54:	82 30       	cpi	r24, 0x02	; 2
 a56:	c1 f0       	breq	.+48     	; 0xa88 <External_Interrupt0_Initalize+0x42>
 a58:	83 30       	cpi	r24, 0x03	; 3
 a5a:	79 f0       	breq	.+30     	; 0xa7a <External_Interrupt0_Initalize+0x34>
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <External_Interrupt0_Initalize+0x4e>
	{
		case INT0_LOW:
		CLR_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 0 0
 a5e:	85 b7       	in	r24, 0x35	; 53
 a60:	8d 7f       	andi	r24, 0xFD	; 253
 a62:	85 bf       	out	0x35, r24	; 53
 a64:	85 b7       	in	r24, 0x35	; 53
 a66:	8e 7f       	andi	r24, 0xFE	; 254
 a68:	85 bf       	out	0x35, r24	; 53
		break;
 a6a:	14 c0       	rjmp	.+40     	; 0xa94 <External_Interrupt0_Initalize+0x4e>
		case INT0_HIGH:
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 0 1
 a6c:	85 b7       	in	r24, 0x35	; 53
 a6e:	8d 7f       	andi	r24, 0xFD	; 253
 a70:	85 bf       	out	0x35, r24	; 53
 a72:	85 b7       	in	r24, 0x35	; 53
 a74:	81 60       	ori	r24, 0x01	; 1
 a76:	85 bf       	out	0x35, r24	; 53
		break;
 a78:	0d c0       	rjmp	.+26     	; 0xa94 <External_Interrupt0_Initalize+0x4e>
		case INT0_FALLING:
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 1 0
 a7a:	85 b7       	in	r24, 0x35	; 53
 a7c:	82 60       	ori	r24, 0x02	; 2
 a7e:	85 bf       	out	0x35, r24	; 53
 a80:	85 b7       	in	r24, 0x35	; 53
 a82:	8e 7f       	andi	r24, 0xFE	; 254
 a84:	85 bf       	out	0x35, r24	; 53
		break;
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <External_Interrupt0_Initalize+0x4e>
		case INT0_RISING:
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 1 1
 a88:	85 b7       	in	r24, 0x35	; 53
 a8a:	82 60       	ori	r24, 0x02	; 2
 a8c:	85 bf       	out	0x35, r24	; 53
 a8e:	85 b7       	in	r24, 0x35	; 53
 a90:	81 60       	ori	r24, 0x01	; 1
 a92:	85 bf       	out	0x35, r24	; 53
		break;
		
	}
	// Enable peripheral interrupt 
	SET_BIT(GICR, INT0);
 a94:	8b b7       	in	r24, 0x3b	; 59
 a96:	80 64       	ori	r24, 0x40	; 64
 a98:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupt after initialization 
	sei();//Set interrupt, SET_BIT(SREG,7);
 a9a:	78 94       	sei
 a9c:	08 95       	ret

Disassembly of section .text.Timer0_OVF_WithInterrupt_Initialize:

00000d64 <Timer0_OVF_WithInterrupt_Initialize>:
		Counter++;
	}
}
void Timer0_OVF_WithInterrupt_Initialize(void)
{
	CLR_BIT(TCCR0, PWM0);
 d64:	83 b7       	in	r24, 0x33	; 51
 d66:	8f 7b       	andi	r24, 0xBF	; 191
 d68:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CTC0);
 d6a:	83 b7       	in	r24, 0x33	; 51
 d6c:	87 7f       	andi	r24, 0xF7	; 247
 d6e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, COM00);
 d70:	83 b7       	in	r24, 0x33	; 51
 d72:	8f 7e       	andi	r24, 0xEF	; 239
 d74:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, COM01);
 d76:	83 b7       	in	r24, 0x33	; 51
 d78:	8f 7d       	andi	r24, 0xDF	; 223
 d7a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TIMSK, TOIE0);
 d7c:	89 b7       	in	r24, 0x39	; 57
 d7e:	81 60       	ori	r24, 0x01	; 1
 d80:	89 bf       	out	0x39, r24	; 57
	SET_BIT(SREG, I);
 d82:	8f b7       	in	r24, 0x3f	; 63
 d84:	80 68       	ori	r24, 0x80	; 128
 d86:	8f bf       	out	0x3f, r24	; 63
 d88:	08 95       	ret

Disassembly of section .text.Timer0_OVF_WithInterrupt_Start:

000002fe <Timer0_OVF_WithInterrupt_Start>:
	{
		while(!Get_Bit(TIFR, TOV0));
		CLR_BIT(TIFR, TOV0);
		Counter++;
	}
}
 2fe:	82 30       	cpi	r24, 0x02	; 2
 300:	91 f1       	breq	.+100    	; 0x366 <Timer0_OVF_WithInterrupt_Start+0x68>
 302:	28 f4       	brcc	.+10     	; 0x30e <Timer0_OVF_WithInterrupt_Start+0x10>
 304:	88 23       	and	r24, r24
 306:	59 f0       	breq	.+22     	; 0x31e <Timer0_OVF_WithInterrupt_Start+0x20>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	d9 f0       	breq	.+54     	; 0x342 <Timer0_OVF_WithInterrupt_Start+0x44>
 30c:	08 95       	ret
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	09 f4       	brne	.+2      	; 0x314 <Timer0_OVF_WithInterrupt_Start+0x16>
 312:	4d c0       	rjmp	.+154    	; 0x3ae <Timer0_OVF_WithInterrupt_Start+0xb0>
 314:	d0 f1       	brcs	.+116    	; 0x38a <Timer0_OVF_WithInterrupt_Start+0x8c>
 316:	85 30       	cpi	r24, 0x05	; 5
 318:	09 f4       	brne	.+2      	; 0x31c <Timer0_OVF_WithInterrupt_Start+0x1e>
 31a:	5b c0       	rjmp	.+182    	; 0x3d2 <Timer0_OVF_WithInterrupt_Start+0xd4>
 31c:	08 95       	ret
 31e:	83 b7       	in	r24, 0x33	; 51
 320:	8e 7f       	andi	r24, 0xFE	; 254
 322:	83 bf       	out	0x33, r24	; 51
 324:	83 b7       	in	r24, 0x33	; 51
 326:	8d 7f       	andi	r24, 0xFD	; 253
 328:	83 bf       	out	0x33, r24	; 51
 32a:	83 b7       	in	r24, 0x33	; 51
 32c:	8b 7f       	andi	r24, 0xFB	; 251
 32e:	83 bf       	out	0x33, r24	; 51
 330:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 334:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 338:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 33c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 340:	08 95       	ret
 342:	83 b7       	in	r24, 0x33	; 51
 344:	81 60       	ori	r24, 0x01	; 1
 346:	83 bf       	out	0x33, r24	; 51
 348:	83 b7       	in	r24, 0x33	; 51
 34a:	8d 7f       	andi	r24, 0xFD	; 253
 34c:	83 bf       	out	0x33, r24	; 51
 34e:	83 b7       	in	r24, 0x33	; 51
 350:	8b 7f       	andi	r24, 0xFB	; 251
 352:	83 bf       	out	0x33, r24	; 51
 354:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 358:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 35c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 360:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 364:	08 95       	ret
 366:	83 b7       	in	r24, 0x33	; 51
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	83 bf       	out	0x33, r24	; 51
 36c:	83 b7       	in	r24, 0x33	; 51
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	83 bf       	out	0x33, r24	; 51
 372:	83 b7       	in	r24, 0x33	; 51
 374:	8b 7f       	andi	r24, 0xFB	; 251
 376:	83 bf       	out	0x33, r24	; 51
 378:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 37c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 380:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 384:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 388:	08 95       	ret
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	81 60       	ori	r24, 0x01	; 1
 38e:	83 bf       	out	0x33, r24	; 51
 390:	83 b7       	in	r24, 0x33	; 51
 392:	82 60       	ori	r24, 0x02	; 2
 394:	83 bf       	out	0x33, r24	; 51
 396:	83 b7       	in	r24, 0x33	; 51
 398:	8b 7f       	andi	r24, 0xFB	; 251
 39a:	83 bf       	out	0x33, r24	; 51
 39c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3a8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3ac:	08 95       	ret
 3ae:	83 b7       	in	r24, 0x33	; 51
 3b0:	8e 7f       	andi	r24, 0xFE	; 254
 3b2:	83 bf       	out	0x33, r24	; 51
 3b4:	83 b7       	in	r24, 0x33	; 51
 3b6:	8d 7f       	andi	r24, 0xFD	; 253
 3b8:	83 bf       	out	0x33, r24	; 51
 3ba:	83 b7       	in	r24, 0x33	; 51
 3bc:	84 60       	ori	r24, 0x04	; 4
 3be:	83 bf       	out	0x33, r24	; 51
 3c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3cc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3d0:	08 95       	ret
 3d2:	83 b7       	in	r24, 0x33	; 51
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	83 bf       	out	0x33, r24	; 51
 3d8:	83 b7       	in	r24, 0x33	; 51
 3da:	8d 7f       	andi	r24, 0xFD	; 253
 3dc:	83 bf       	out	0x33, r24	; 51
 3de:	83 b7       	in	r24, 0x33	; 51
 3e0:	84 60       	ori	r24, 0x04	; 4
 3e2:	83 bf       	out	0x33, r24	; 51
 3e4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 3e8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3f0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3f4:	08 95       	ret

Disassembly of section .text.Timer0_OVF_WithInterrupt_Stop:

00000d8a <Timer0_OVF_WithInterrupt_Stop>:
		break;
	}
}
void Timer0_OVF_WithInterrupt_Stop(void)
{
	CLR_BIT(TCCR0, CS00);
 d8a:	83 b7       	in	r24, 0x33	; 51
 d8c:	8e 7f       	andi	r24, 0xFE	; 254
 d8e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
 d90:	83 b7       	in	r24, 0x33	; 51
 d92:	8d 7f       	andi	r24, 0xFD	; 253
 d94:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
 d96:	83 b7       	in	r24, 0x33	; 51
 d98:	8b 7f       	andi	r24, 0xFB	; 251
 d9a:	83 bf       	out	0x33, r24	; 51
	Overflow_Cycle = 0;
 d9c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 da0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 da4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 da8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 dac:	08 95       	ret

Disassembly of section .text.UART_Initialize_WithoutInterrupt:

000000ca <UART_Initialize_WithoutInterrupt>:
uart_status UART_Receive_Character(uint8_t* data)
{
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}
  ca:	0f 93       	push	r16
  cc:	31 b3       	in	r19, 0x11	; 17
  ce:	32 60       	ori	r19, 0x02	; 2
  d0:	31 bb       	out	0x11, r19	; 17
  d2:	31 b3       	in	r19, 0x11	; 17
  d4:	3e 7f       	andi	r19, 0xFE	; 254
  d6:	31 bb       	out	0x11, r19	; 17
  d8:	3a b1       	in	r19, 0x0a	; 10
  da:	38 61       	ori	r19, 0x18	; 24
  dc:	3a b9       	out	0x0a, r19	; 10
  de:	66 23       	and	r22, r22
  e0:	19 f0       	breq	.+6      	; 0xe8 <UART_Initialize_WithoutInterrupt+0x1e>
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	29 f0       	breq	.+10     	; 0xf0 <UART_Initialize_WithoutInterrupt+0x26>
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <UART_Initialize_WithoutInterrupt+0x2c>
  e8:	30 b5       	in	r19, 0x20	; 32
  ea:	3f 77       	andi	r19, 0x7F	; 127
  ec:	30 bd       	out	0x20, r19	; 32
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <UART_Initialize_WithoutInterrupt+0x2c>
  f0:	30 b5       	in	r19, 0x20	; 32
  f2:	30 68       	ori	r19, 0x80	; 128
  f4:	30 bd       	out	0x20, r19	; 32
  f6:	22 30       	cpi	r18, 0x02	; 2
  f8:	f9 f0       	breq	.+62     	; 0x138 <UART_Initialize_WithoutInterrupt+0x6e>
  fa:	28 f4       	brcc	.+10     	; 0x106 <UART_Initialize_WithoutInterrupt+0x3c>
  fc:	22 23       	and	r18, r18
  fe:	41 f0       	breq	.+16     	; 0x110 <UART_Initialize_WithoutInterrupt+0x46>
 100:	21 30       	cpi	r18, 0x01	; 1
 102:	81 f0       	breq	.+32     	; 0x124 <UART_Initialize_WithoutInterrupt+0x5a>
 104:	36 c0       	rjmp	.+108    	; 0x172 <UART_Initialize_WithoutInterrupt+0xa8>
 106:	23 30       	cpi	r18, 0x03	; 3
 108:	09 f1       	breq	.+66     	; 0x14c <UART_Initialize_WithoutInterrupt+0x82>
 10a:	24 30       	cpi	r18, 0x04	; 4
 10c:	49 f1       	breq	.+82     	; 0x160 <UART_Initialize_WithoutInterrupt+0x96>
 10e:	31 c0       	rjmp	.+98     	; 0x172 <UART_Initialize_WithoutInterrupt+0xa8>
 110:	2a b1       	in	r18, 0x0a	; 10
 112:	2b 7f       	andi	r18, 0xFB	; 251
 114:	2a b9       	out	0x0a, r18	; 10
 116:	20 b5       	in	r18, 0x20	; 32
 118:	2b 7f       	andi	r18, 0xFB	; 251
 11a:	20 bd       	out	0x20, r18	; 32
 11c:	20 b5       	in	r18, 0x20	; 32
 11e:	2d 7f       	andi	r18, 0xFD	; 253
 120:	20 bd       	out	0x20, r18	; 32
 122:	27 c0       	rjmp	.+78     	; 0x172 <UART_Initialize_WithoutInterrupt+0xa8>
 124:	2a b1       	in	r18, 0x0a	; 10
 126:	2b 7f       	andi	r18, 0xFB	; 251
 128:	2a b9       	out	0x0a, r18	; 10
 12a:	20 b5       	in	r18, 0x20	; 32
 12c:	2b 7f       	andi	r18, 0xFB	; 251
 12e:	20 bd       	out	0x20, r18	; 32
 130:	20 b5       	in	r18, 0x20	; 32
 132:	22 60       	ori	r18, 0x02	; 2
 134:	20 bd       	out	0x20, r18	; 32
 136:	1d c0       	rjmp	.+58     	; 0x172 <UART_Initialize_WithoutInterrupt+0xa8>
 138:	2a b1       	in	r18, 0x0a	; 10
 13a:	2b 7f       	andi	r18, 0xFB	; 251
 13c:	2a b9       	out	0x0a, r18	; 10
 13e:	20 b5       	in	r18, 0x20	; 32
 140:	24 60       	ori	r18, 0x04	; 4
 142:	20 bd       	out	0x20, r18	; 32
 144:	20 b5       	in	r18, 0x20	; 32
 146:	2d 7f       	andi	r18, 0xFD	; 253
 148:	20 bd       	out	0x20, r18	; 32
 14a:	13 c0       	rjmp	.+38     	; 0x172 <UART_Initialize_WithoutInterrupt+0xa8>
 14c:	2a b1       	in	r18, 0x0a	; 10
 14e:	2b 7f       	andi	r18, 0xFB	; 251
 150:	2a b9       	out	0x0a, r18	; 10
 152:	20 b5       	in	r18, 0x20	; 32
 154:	24 60       	ori	r18, 0x04	; 4
 156:	20 bd       	out	0x20, r18	; 32
 158:	20 b5       	in	r18, 0x20	; 32
 15a:	22 60       	ori	r18, 0x02	; 2
 15c:	20 bd       	out	0x20, r18	; 32
 15e:	09 c0       	rjmp	.+18     	; 0x172 <UART_Initialize_WithoutInterrupt+0xa8>
 160:	2a b1       	in	r18, 0x0a	; 10
 162:	24 60       	ori	r18, 0x04	; 4
 164:	2a b9       	out	0x0a, r18	; 10
 166:	20 b5       	in	r18, 0x20	; 32
 168:	24 60       	ori	r18, 0x04	; 4
 16a:	20 bd       	out	0x20, r18	; 32
 16c:	20 b5       	in	r18, 0x20	; 32
 16e:	22 60       	ori	r18, 0x02	; 2
 170:	20 bd       	out	0x20, r18	; 32
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	59 f0       	breq	.+22     	; 0x18c <UART_Initialize_WithoutInterrupt+0xc2>
 176:	18 f0       	brcs	.+6      	; 0x17e <UART_Initialize_WithoutInterrupt+0xb4>
 178:	42 30       	cpi	r20, 0x02	; 2
 17a:	79 f0       	breq	.+30     	; 0x19a <UART_Initialize_WithoutInterrupt+0xd0>
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <UART_Initialize_WithoutInterrupt+0xdc>
 17e:	20 b5       	in	r18, 0x20	; 32
 180:	2f 7d       	andi	r18, 0xDF	; 223
 182:	20 bd       	out	0x20, r18	; 32
 184:	20 b5       	in	r18, 0x20	; 32
 186:	2f 7e       	andi	r18, 0xEF	; 239
 188:	20 bd       	out	0x20, r18	; 32
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <UART_Initialize_WithoutInterrupt+0xdc>
 18c:	20 b5       	in	r18, 0x20	; 32
 18e:	20 62       	ori	r18, 0x20	; 32
 190:	20 bd       	out	0x20, r18	; 32
 192:	20 b5       	in	r18, 0x20	; 32
 194:	2f 7e       	andi	r18, 0xEF	; 239
 196:	20 bd       	out	0x20, r18	; 32
 198:	06 c0       	rjmp	.+12     	; 0x1a6 <UART_Initialize_WithoutInterrupt+0xdc>
 19a:	20 b5       	in	r18, 0x20	; 32
 19c:	20 62       	ori	r18, 0x20	; 32
 19e:	20 bd       	out	0x20, r18	; 32
 1a0:	20 b5       	in	r18, 0x20	; 32
 1a2:	20 61       	ori	r18, 0x10	; 16
 1a4:	20 bd       	out	0x20, r18	; 32
 1a6:	00 23       	and	r16, r16
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <UART_Initialize_WithoutInterrupt+0xe6>
 1aa:	01 30       	cpi	r16, 0x01	; 1
 1ac:	29 f0       	breq	.+10     	; 0x1b8 <UART_Initialize_WithoutInterrupt+0xee>
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <UART_Initialize_WithoutInterrupt+0xf4>
 1b0:	20 b5       	in	r18, 0x20	; 32
 1b2:	27 7f       	andi	r18, 0xF7	; 247
 1b4:	20 bd       	out	0x20, r18	; 32
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <UART_Initialize_WithoutInterrupt+0xf4>
 1b8:	20 b5       	in	r18, 0x20	; 32
 1ba:	28 60       	ori	r18, 0x08	; 8
 1bc:	20 bd       	out	0x20, r18	; 32
 1be:	9c 01       	movw	r18, r24
 1c0:	22 95       	swap	r18
 1c2:	32 95       	swap	r19
 1c4:	30 7f       	andi	r19, 0xF0	; 240
 1c6:	32 27       	eor	r19, r18
 1c8:	20 7f       	andi	r18, 0xF0	; 240
 1ca:	32 27       	eor	r19, r18
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	71 e7       	ldi	r23, 0x71	; 113
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 88 06 	call	0xd10	; 0xd10 <__divmodsi4>
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	31 09       	sbc	r19, r1
 1e0:	29 b9       	out	0x09, r18	; 9
 1e2:	30 bd       	out	0x20, r19	; 32
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

Disassembly of section .text.UART_Transmit_Character:

00000eea <UART_Transmit_Character>:
	return UART_OK;

}
uart_status UART_Transmit_Character(uint8_t data)
{
	UDR = data;
 eea:	8c b9       	out	0x0c, r24	; 12
	while (((UCSRA>>TXC)&0x01) != 1);//Wait until flag of transmitting received
 eec:	5e 9b       	sbis	0x0b, 6	; 11
 eee:	fe cf       	rjmp	.-4      	; 0xeec <UART_Transmit_Character+0x2>
	return UART_OK;
}
 ef0:	81 e0       	ldi	r24, 0x01	; 1
 ef2:	08 95       	ret

Disassembly of section .text.UART_Transmit_Word:

00000df2 <UART_Transmit_Word>:
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}

uart_status UART_Transmit_Word(uint16_t data){
 df2:	cf 93       	push	r28
 df4:	df 93       	push	r29
 df6:	d8 2f       	mov	r29, r24
	uint8_t high_byte = (data >> 8) & 0xFF;
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
 df8:	89 2f       	mov	r24, r25
 dfa:	0e 94 75 07 	call	0xeea	; 0xeea <UART_Transmit_Character>
 dfe:	c8 2f       	mov	r28, r24
	s|= UART_Transmit_Character(low_byte);
 e00:	8d 2f       	mov	r24, r29
 e02:	0e 94 75 07 	call	0xeea	; 0xeea <UART_Transmit_Character>
	return s;

}
 e06:	8c 2b       	or	r24, r28
 e08:	df 91       	pop	r29
 e0a:	cf 91       	pop	r28
 e0c:	08 95       	ret

Disassembly of section .text.WDT_ON:

00000ec6 <WDT_ON>:
{
	/*
	Watchdog timer enables with typical timeout period 2.1 
	second.
	*/
	WDTCR = (1<<WDE);
 ec6:	88 e0       	ldi	r24, 0x08	; 8
 ec8:	81 bd       	out	0x21, r24	; 33
	WDTCR &= ~((1<<WDP2)|(1<<WDP1)|(1<<WDP0));
 eca:	81 b5       	in	r24, 0x21	; 33
 ecc:	88 7f       	andi	r24, 0xF8	; 248
 ece:	81 bd       	out	0x21, r24	; 33
 ed0:	08 95       	ret

Disassembly of section .text:

00000ef4 <__cmpsf2>:
 ef4:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_cmp>
 ef8:	08 f4       	brcc	.+2      	; 0xefc <__cmpsf2+0x8>
 efa:	81 e0       	ldi	r24, 0x01	; 1
 efc:	08 95       	ret

Disassembly of section .text:

000009e8 <__fixunssfsi>:
 9e8:	0e 94 13 06 	call	0xc26	; 0xc26 <__fp_splitA>
 9ec:	88 f0       	brcs	.+34     	; 0xa10 <__fixunssfsi+0x28>
 9ee:	9f 57       	subi	r25, 0x7F	; 127
 9f0:	98 f0       	brcs	.+38     	; 0xa18 <__fixunssfsi+0x30>
 9f2:	b9 2f       	mov	r27, r25
 9f4:	99 27       	eor	r25, r25
 9f6:	b7 51       	subi	r27, 0x17	; 23
 9f8:	b0 f0       	brcs	.+44     	; 0xa26 <__fixunssfsi+0x3e>
 9fa:	e1 f0       	breq	.+56     	; 0xa34 <__fixunssfsi+0x4c>
 9fc:	66 0f       	add	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	1a f0       	brmi	.+6      	; 0xa0c <__fixunssfsi+0x24>
 a06:	ba 95       	dec	r27
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__fixunssfsi+0x14>
 a0a:	14 c0       	rjmp	.+40     	; 0xa34 <__fixunssfsi+0x4c>
 a0c:	b1 30       	cpi	r27, 0x01	; 1
 a0e:	91 f0       	breq	.+36     	; 0xa34 <__fixunssfsi+0x4c>
 a10:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_zero>
 a14:	b1 e0       	ldi	r27, 0x01	; 1
 a16:	08 95       	ret
 a18:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_zero>
 a1c:	67 2f       	mov	r22, r23
 a1e:	78 2f       	mov	r23, r24
 a20:	88 27       	eor	r24, r24
 a22:	b8 5f       	subi	r27, 0xF8	; 248
 a24:	39 f0       	breq	.+14     	; 0xa34 <__fixunssfsi+0x4c>
 a26:	b9 3f       	cpi	r27, 0xF9	; 249
 a28:	cc f3       	brlt	.-14     	; 0xa1c <__fixunssfsi+0x34>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b3 95       	inc	r27
 a32:	d9 f7       	brne	.-10     	; 0xa2a <__fixunssfsi+0x42>
 a34:	3e f4       	brtc	.+14     	; 0xa44 <__fixunssfsi+0x5c>
 a36:	90 95       	com	r25
 a38:	80 95       	com	r24
 a3a:	70 95       	com	r23
 a3c:	61 95       	neg	r22
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255
 a40:	8f 4f       	sbci	r24, 0xFF	; 255
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	08 95       	ret

Disassembly of section .text:

0000088e <__floatunsisf>:
 88e:	e8 94       	clt
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__floatsisf+0x12>

00000892 <__floatsisf>:
 892:	97 fb       	bst	r25, 7
 894:	3e f4       	brtc	.+14     	; 0x8a4 <__floatsisf+0x12>
 896:	90 95       	com	r25
 898:	80 95       	com	r24
 89a:	70 95       	com	r23
 89c:	61 95       	neg	r22
 89e:	7f 4f       	sbci	r23, 0xFF	; 255
 8a0:	8f 4f       	sbci	r24, 0xFF	; 255
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	99 23       	and	r25, r25
 8a6:	a9 f0       	breq	.+42     	; 0x8d2 <__floatsisf+0x40>
 8a8:	f9 2f       	mov	r31, r25
 8aa:	96 e9       	ldi	r25, 0x96	; 150
 8ac:	bb 27       	eor	r27, r27
 8ae:	93 95       	inc	r25
 8b0:	f6 95       	lsr	r31
 8b2:	87 95       	ror	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b7 95       	ror	r27
 8ba:	f1 11       	cpse	r31, r1
 8bc:	f8 cf       	rjmp	.-16     	; 0x8ae <__floatsisf+0x1c>
 8be:	fa f4       	brpl	.+62     	; 0x8fe <__floatsisf+0x6c>
 8c0:	bb 0f       	add	r27, r27
 8c2:	11 f4       	brne	.+4      	; 0x8c8 <__floatsisf+0x36>
 8c4:	60 ff       	sbrs	r22, 0
 8c6:	1b c0       	rjmp	.+54     	; 0x8fe <__floatsisf+0x6c>
 8c8:	6f 5f       	subi	r22, 0xFF	; 255
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	16 c0       	rjmp	.+44     	; 0x8fe <__floatsisf+0x6c>
 8d2:	88 23       	and	r24, r24
 8d4:	11 f0       	breq	.+4      	; 0x8da <__floatsisf+0x48>
 8d6:	96 e9       	ldi	r25, 0x96	; 150
 8d8:	11 c0       	rjmp	.+34     	; 0x8fc <__floatsisf+0x6a>
 8da:	77 23       	and	r23, r23
 8dc:	21 f0       	breq	.+8      	; 0x8e6 <__floatsisf+0x54>
 8de:	9e e8       	ldi	r25, 0x8E	; 142
 8e0:	87 2f       	mov	r24, r23
 8e2:	76 2f       	mov	r23, r22
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <__floatsisf+0x5e>
 8e6:	66 23       	and	r22, r22
 8e8:	71 f0       	breq	.+28     	; 0x906 <__floatsisf+0x74>
 8ea:	96 e8       	ldi	r25, 0x86	; 134
 8ec:	86 2f       	mov	r24, r22
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	2a f0       	brmi	.+10     	; 0x8fe <__floatsisf+0x6c>
 8f4:	9a 95       	dec	r25
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	da f7       	brpl	.-10     	; 0x8f4 <__floatsisf+0x62>
 8fe:	88 0f       	add	r24, r24
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret

Disassembly of section .text:

00000b88 <__fp_cmp>:
 b88:	99 0f       	add	r25, r25
 b8a:	00 08       	sbc	r0, r0
 b8c:	55 0f       	add	r21, r21
 b8e:	aa 0b       	sbc	r26, r26
 b90:	e0 e8       	ldi	r30, 0x80	; 128
 b92:	fe ef       	ldi	r31, 0xFE	; 254
 b94:	16 16       	cp	r1, r22
 b96:	17 06       	cpc	r1, r23
 b98:	e8 07       	cpc	r30, r24
 b9a:	f9 07       	cpc	r31, r25
 b9c:	c0 f0       	brcs	.+48     	; 0xbce <__fp_cmp+0x46>
 b9e:	12 16       	cp	r1, r18
 ba0:	13 06       	cpc	r1, r19
 ba2:	e4 07       	cpc	r30, r20
 ba4:	f5 07       	cpc	r31, r21
 ba6:	98 f0       	brcs	.+38     	; 0xbce <__fp_cmp+0x46>
 ba8:	62 1b       	sub	r22, r18
 baa:	73 0b       	sbc	r23, r19
 bac:	84 0b       	sbc	r24, r20
 bae:	95 0b       	sbc	r25, r21
 bb0:	39 f4       	brne	.+14     	; 0xbc0 <__fp_cmp+0x38>
 bb2:	0a 26       	eor	r0, r26
 bb4:	61 f0       	breq	.+24     	; 0xbce <__fp_cmp+0x46>
 bb6:	23 2b       	or	r18, r19
 bb8:	24 2b       	or	r18, r20
 bba:	25 2b       	or	r18, r21
 bbc:	21 f4       	brne	.+8      	; 0xbc6 <__fp_cmp+0x3e>
 bbe:	08 95       	ret
 bc0:	0a 26       	eor	r0, r26
 bc2:	09 f4       	brne	.+2      	; 0xbc6 <__fp_cmp+0x3e>
 bc4:	a1 40       	sbci	r26, 0x01	; 1
 bc6:	a6 95       	lsr	r26
 bc8:	8f ef       	ldi	r24, 0xFF	; 255
 bca:	81 1d       	adc	r24, r1
 bcc:	81 1d       	adc	r24, r1
 bce:	08 95       	ret

Disassembly of section .text:

00000c16 <__fp_split3>:
 c16:	57 fd       	sbrc	r21, 7
 c18:	90 58       	subi	r25, 0x80	; 128
 c1a:	44 0f       	add	r20, r20
 c1c:	55 1f       	adc	r21, r21
 c1e:	59 f0       	breq	.+22     	; 0xc36 <__fp_splitA+0x10>
 c20:	5f 3f       	cpi	r21, 0xFF	; 255
 c22:	71 f0       	breq	.+28     	; 0xc40 <__fp_splitA+0x1a>
 c24:	47 95       	ror	r20

00000c26 <__fp_splitA>:
 c26:	88 0f       	add	r24, r24
 c28:	97 fb       	bst	r25, 7
 c2a:	99 1f       	adc	r25, r25
 c2c:	61 f0       	breq	.+24     	; 0xc46 <__fp_splitA+0x20>
 c2e:	9f 3f       	cpi	r25, 0xFF	; 255
 c30:	79 f0       	breq	.+30     	; 0xc50 <__fp_splitA+0x2a>
 c32:	87 95       	ror	r24
 c34:	08 95       	ret
 c36:	12 16       	cp	r1, r18
 c38:	13 06       	cpc	r1, r19
 c3a:	14 06       	cpc	r1, r20
 c3c:	55 1f       	adc	r21, r21
 c3e:	f2 cf       	rjmp	.-28     	; 0xc24 <__fp_split3+0xe>
 c40:	46 95       	lsr	r20
 c42:	f1 df       	rcall	.-30     	; 0xc26 <__fp_splitA>
 c44:	08 c0       	rjmp	.+16     	; 0xc56 <__fp_splitA+0x30>
 c46:	16 16       	cp	r1, r22
 c48:	17 06       	cpc	r1, r23
 c4a:	18 06       	cpc	r1, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	f1 cf       	rjmp	.-30     	; 0xc32 <__fp_splitA+0xc>
 c50:	86 95       	lsr	r24
 c52:	71 05       	cpc	r23, r1
 c54:	61 05       	cpc	r22, r1
 c56:	08 94       	sec
 c58:	08 95       	ret

Disassembly of section .text:

00000e84 <__fp_zero>:
 e84:	e8 94       	clt

00000e86 <__fp_szero>:
 e86:	bb 27       	eor	r27, r27
 e88:	66 27       	eor	r22, r22
 e8a:	77 27       	eor	r23, r23
 e8c:	cb 01       	movw	r24, r22
 e8e:	97 f9       	bld	r25, 7
 e90:	08 95       	ret

Disassembly of section .text:

00000efe <__gesf2>:
 efe:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_cmp>
 f02:	08 f4       	brcc	.+2      	; 0xf06 <__gesf2+0x8>
 f04:	8f ef       	ldi	r24, 0xFF	; 255
 f06:	08 95       	ret

Disassembly of section .text:

00000f08 <__mulsf3>:
 f08:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__mulsf3x>
 f0c:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_round>

Disassembly of section .text:

000005ba <__mulsf3x>:
 5ba:	0f c0       	rjmp	.+30     	; 0x5da <__mulsf3x+0x20>
 5bc:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_pscA>
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__mulsf3x+0x16>
 5c2:	0e 94 50 07 	call	0xea0	; 0xea0 <__fp_pscB>
 5c6:	20 f0       	brcs	.+8      	; 0x5d0 <__mulsf3x+0x16>
 5c8:	95 23       	and	r25, r21
 5ca:	11 f0       	breq	.+4      	; 0x5d0 <__mulsf3x+0x16>
 5cc:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>
 5d0:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_nan>
 5d4:	11 24       	eor	r1, r1
 5d6:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_szero>
 5da:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_split3>
 5de:	70 f3       	brcs	.-36     	; 0x5bc <__mulsf3x+0x2>

000005e0 <__mulsf3_pse>:
 5e0:	95 9f       	mul	r25, r21
 5e2:	c1 f3       	breq	.-16     	; 0x5d4 <__mulsf3x+0x1a>
 5e4:	95 0f       	add	r25, r21
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	55 1f       	adc	r21, r21
 5ea:	62 9f       	mul	r22, r18
 5ec:	f0 01       	movw	r30, r0
 5ee:	72 9f       	mul	r23, r18
 5f0:	bb 27       	eor	r27, r27
 5f2:	f0 0d       	add	r31, r0
 5f4:	b1 1d       	adc	r27, r1
 5f6:	63 9f       	mul	r22, r19
 5f8:	aa 27       	eor	r26, r26
 5fa:	f0 0d       	add	r31, r0
 5fc:	b1 1d       	adc	r27, r1
 5fe:	aa 1f       	adc	r26, r26
 600:	64 9f       	mul	r22, r20
 602:	66 27       	eor	r22, r22
 604:	b0 0d       	add	r27, r0
 606:	a1 1d       	adc	r26, r1
 608:	66 1f       	adc	r22, r22
 60a:	82 9f       	mul	r24, r18
 60c:	22 27       	eor	r18, r18
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	62 1f       	adc	r22, r18
 614:	73 9f       	mul	r23, r19
 616:	b0 0d       	add	r27, r0
 618:	a1 1d       	adc	r26, r1
 61a:	62 1f       	adc	r22, r18
 61c:	83 9f       	mul	r24, r19
 61e:	a0 0d       	add	r26, r0
 620:	61 1d       	adc	r22, r1
 622:	22 1f       	adc	r18, r18
 624:	74 9f       	mul	r23, r20
 626:	33 27       	eor	r19, r19
 628:	a0 0d       	add	r26, r0
 62a:	61 1d       	adc	r22, r1
 62c:	23 1f       	adc	r18, r19
 62e:	84 9f       	mul	r24, r20
 630:	60 0d       	add	r22, r0
 632:	21 1d       	adc	r18, r1
 634:	82 2f       	mov	r24, r18
 636:	76 2f       	mov	r23, r22
 638:	6a 2f       	mov	r22, r26
 63a:	11 24       	eor	r1, r1
 63c:	9f 57       	subi	r25, 0x7F	; 127
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	9a f0       	brmi	.+38     	; 0x668 <__mulsf3_pse+0x88>
 642:	f1 f0       	breq	.+60     	; 0x680 <__mulsf3_pse+0xa0>
 644:	88 23       	and	r24, r24
 646:	4a f0       	brmi	.+18     	; 0x65a <__mulsf3_pse+0x7a>
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	bb 1f       	adc	r27, r27
 64e:	66 1f       	adc	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	91 50       	subi	r25, 0x01	; 1
 656:	50 40       	sbci	r21, 0x00	; 0
 658:	a9 f7       	brne	.-22     	; 0x644 <__mulsf3_pse+0x64>
 65a:	9e 3f       	cpi	r25, 0xFE	; 254
 65c:	51 05       	cpc	r21, r1
 65e:	80 f0       	brcs	.+32     	; 0x680 <__mulsf3_pse+0xa0>
 660:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>
 664:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_szero>
 668:	5f 3f       	cpi	r21, 0xFF	; 255
 66a:	e4 f3       	brlt	.-8      	; 0x664 <__mulsf3_pse+0x84>
 66c:	98 3e       	cpi	r25, 0xE8	; 232
 66e:	d4 f3       	brlt	.-12     	; 0x664 <__mulsf3_pse+0x84>
 670:	86 95       	lsr	r24
 672:	77 95       	ror	r23
 674:	67 95       	ror	r22
 676:	b7 95       	ror	r27
 678:	f7 95       	ror	r31
 67a:	e7 95       	ror	r30
 67c:	9f 5f       	subi	r25, 0xFF	; 255
 67e:	c1 f7       	brne	.-16     	; 0x670 <__mulsf3_pse+0x90>
 680:	fe 2b       	or	r31, r30
 682:	88 0f       	add	r24, r24
 684:	91 1d       	adc	r25, r1
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

Disassembly of section .text:

00000ed2 <__fp_inf>:
 ed2:	97 f9       	bld	r25, 7
 ed4:	9f 67       	ori	r25, 0x7F	; 127
 ed6:	80 e8       	ldi	r24, 0x80	; 128
 ed8:	70 e0       	ldi	r23, 0x00	; 0
 eda:	60 e0       	ldi	r22, 0x00	; 0
 edc:	08 95       	ret

Disassembly of section .text:

00000f10 <__fp_nan>:
 f10:	9f ef       	ldi	r25, 0xFF	; 255
 f12:	80 ec       	ldi	r24, 0xC0	; 192
 f14:	08 95       	ret

Disassembly of section .text:

00000e92 <__fp_pscA>:
 e92:	00 24       	eor	r0, r0
 e94:	0a 94       	dec	r0
 e96:	16 16       	cp	r1, r22
 e98:	17 06       	cpc	r1, r23
 e9a:	18 06       	cpc	r1, r24
 e9c:	09 06       	cpc	r0, r25
 e9e:	08 95       	ret

Disassembly of section .text:

00000ea0 <__fp_pscB>:
 ea0:	00 24       	eor	r0, r0
 ea2:	0a 94       	dec	r0
 ea4:	12 16       	cp	r1, r18
 ea6:	13 06       	cpc	r1, r19
 ea8:	14 06       	cpc	r1, r20
 eaa:	05 06       	cpc	r0, r21
 eac:	08 95       	ret

Disassembly of section .text:

00000dae <__fp_round>:
 dae:	09 2e       	mov	r0, r25
 db0:	03 94       	inc	r0
 db2:	00 0c       	add	r0, r0
 db4:	11 f4       	brne	.+4      	; 0xdba <__fp_round+0xc>
 db6:	88 23       	and	r24, r24
 db8:	52 f0       	brmi	.+20     	; 0xdce <__fp_round+0x20>
 dba:	bb 0f       	add	r27, r27
 dbc:	40 f4       	brcc	.+16     	; 0xdce <__fp_round+0x20>
 dbe:	bf 2b       	or	r27, r31
 dc0:	11 f4       	brne	.+4      	; 0xdc6 <__fp_round+0x18>
 dc2:	60 ff       	sbrs	r22, 0
 dc4:	04 c0       	rjmp	.+8      	; 0xdce <__fp_round+0x20>
 dc6:	6f 5f       	subi	r22, 0xFF	; 255
 dc8:	7f 4f       	sbci	r23, 0xFF	; 255
 dca:	8f 4f       	sbci	r24, 0xFF	; 255
 dcc:	9f 4f       	sbci	r25, 0xFF	; 255
 dce:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000c5a <__udivmodsi4>:
 c5a:	a1 e2       	ldi	r26, 0x21	; 33
 c5c:	1a 2e       	mov	r1, r26
 c5e:	aa 1b       	sub	r26, r26
 c60:	bb 1b       	sub	r27, r27
 c62:	fd 01       	movw	r30, r26
 c64:	0d c0       	rjmp	.+26     	; 0xc80 <__udivmodsi4_ep>

00000c66 <__udivmodsi4_loop>:
 c66:	aa 1f       	adc	r26, r26
 c68:	bb 1f       	adc	r27, r27
 c6a:	ee 1f       	adc	r30, r30
 c6c:	ff 1f       	adc	r31, r31
 c6e:	a2 17       	cp	r26, r18
 c70:	b3 07       	cpc	r27, r19
 c72:	e4 07       	cpc	r30, r20
 c74:	f5 07       	cpc	r31, r21
 c76:	20 f0       	brcs	.+8      	; 0xc80 <__udivmodsi4_ep>
 c78:	a2 1b       	sub	r26, r18
 c7a:	b3 0b       	sbc	r27, r19
 c7c:	e4 0b       	sbc	r30, r20
 c7e:	f5 0b       	sbc	r31, r21

00000c80 <__udivmodsi4_ep>:
 c80:	66 1f       	adc	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	1a 94       	dec	r1
 c8a:	69 f7       	brne	.-38     	; 0xc66 <__udivmodsi4_loop>
 c8c:	60 95       	com	r22
 c8e:	70 95       	com	r23
 c90:	80 95       	com	r24
 c92:	90 95       	com	r25
 c94:	9b 01       	movw	r18, r22
 c96:	ac 01       	movw	r20, r24
 c98:	bd 01       	movw	r22, r26
 c9a:	cf 01       	movw	r24, r30
 c9c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000d10 <__divmodsi4>:
 d10:	05 2e       	mov	r0, r21
 d12:	97 fb       	bst	r25, 7
 d14:	1e f4       	brtc	.+6      	; 0xd1c <__divmodsi4+0xc>
 d16:	00 94       	com	r0
 d18:	0e 94 33 07 	call	0xe66	; 0xe66 <__negsi2>
 d1c:	57 fd       	sbrc	r21, 7
 d1e:	07 d0       	rcall	.+14     	; 0xd2e <__divmodsi4_neg2>
 d20:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__udivmodsi4>
 d24:	07 fc       	sbrc	r0, 7
 d26:	03 d0       	rcall	.+6      	; 0xd2e <__divmodsi4_neg2>
 d28:	4e f4       	brtc	.+18     	; 0xd3c <__divmodsi4_exit>
 d2a:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__negsi2>

00000d2e <__divmodsi4_neg2>:
 d2e:	50 95       	com	r21
 d30:	40 95       	com	r20
 d32:	30 95       	com	r19
 d34:	21 95       	neg	r18
 d36:	3f 4f       	sbci	r19, 0xFF	; 255
 d38:	4f 4f       	sbci	r20, 0xFF	; 255
 d3a:	5f 4f       	sbci	r21, 0xFF	; 255

00000d3c <__divmodsi4_exit>:
 d3c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000e66 <__negsi2>:
 e66:	90 95       	com	r25
 e68:	80 95       	com	r24
 e6a:	70 95       	com	r23
 e6c:	61 95       	neg	r22
 e6e:	7f 4f       	sbci	r23, 0xFF	; 255
 e70:	8f 4f       	sbci	r24, 0xFF	; 255
 e72:	9f 4f       	sbci	r25, 0xFF	; 255
 e74:	08 95       	ret

Disassembly of section .text.libgcc:

00000ede <__tablejump2__>:
 ede:	ee 0f       	add	r30, r30
 ee0:	ff 1f       	adc	r31, r31
 ee2:	05 90       	lpm	r0, Z+
 ee4:	f4 91       	lpm	r31, Z
 ee6:	e0 2d       	mov	r30, r0
 ee8:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00000f1e <_fini>:
 f1e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000f20 <__funcs_on_exit>:
 f20:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000f22 <__simulator_exit>:
 f22:	08 95       	ret

Disassembly of section .text.exit:

00000e3e <exit>:
 e3e:	ec 01       	movw	r28, r24
 e40:	0e 94 90 07 	call	0xf20	; 0xf20 <__funcs_on_exit>
 e44:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_fini>
 e48:	ce 01       	movw	r24, r28
 e4a:	0e 94 91 07 	call	0xf22	; 0xf22 <__simulator_exit>
 e4e:	ce 01       	movw	r24, r28
 e50:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_Exit>

Disassembly of section .text._Exit:

00000f1a <_Exit>:
 f1a:	0e 94 63 00 	call	0xc6	; 0xc6 <_exit>

Disassembly of section .text.avrlibc:

00000e54 <eeprom_read_byte>:
 e54:	cb 01       	movw	r24, r22
 e56:	e1 99       	sbic	0x1c, 1	; 28
 e58:	fe cf       	rjmp	.-4      	; 0xe56 <eeprom_read_byte+0x2>
 e5a:	9f bb       	out	0x1f, r25	; 31
 e5c:	8e bb       	out	0x1e, r24	; 30
 e5e:	e0 9a       	sbi	0x1c, 0	; 28
 e60:	99 27       	eor	r25, r25
 e62:	8d b3       	in	r24, 0x1d	; 29
 e64:	08 95       	ret

Disassembly of section .text.avrlibc:

00000dd0 <eeprom_update_byte>:
 dd0:	26 2f       	mov	r18, r22

00000dd2 <eeprom_update_r18>:
 dd2:	e1 99       	sbic	0x1c, 1	; 28
 dd4:	fe cf       	rjmp	.-4      	; 0xdd2 <eeprom_update_r18>
 dd6:	9f bb       	out	0x1f, r25	; 31
 dd8:	8e bb       	out	0x1e, r24	; 30
 dda:	e0 9a       	sbi	0x1c, 0	; 28
 ddc:	01 97       	sbiw	r24, 0x01	; 1
 dde:	0d b2       	in	r0, 0x1d	; 29
 de0:	02 16       	cp	r0, r18
 de2:	31 f0       	breq	.+12     	; 0xdf0 <eeprom_update_r18+0x1e>
 de4:	2d bb       	out	0x1d, r18	; 29
 de6:	0f b6       	in	r0, 0x3f	; 63
 de8:	f8 94       	cli
 dea:	e2 9a       	sbi	0x1c, 2	; 28
 dec:	e1 9a       	sbi	0x1c, 1	; 28
 dee:	0f be       	out	0x3f, r0	; 63
 df0:	08 95       	ret

Disassembly of section .text.avrlibc:

00000e0e <eeprom_write_byte>:
 e0e:	26 2f       	mov	r18, r22

00000e10 <eeprom_write_r18>:
 e10:	e1 99       	sbic	0x1c, 1	; 28
 e12:	fe cf       	rjmp	.-4      	; 0xe10 <eeprom_write_r18>
 e14:	9f bb       	out	0x1f, r25	; 31
 e16:	8e bb       	out	0x1e, r24	; 30
 e18:	2d bb       	out	0x1d, r18	; 29
 e1a:	0f b6       	in	r0, 0x3f	; 63
 e1c:	f8 94       	cli
 e1e:	e2 9a       	sbi	0x1c, 2	; 28
 e20:	e1 9a       	sbi	0x1c, 1	; 28
 e22:	0f be       	out	0x3f, r0	; 63
 e24:	01 96       	adiw	r24, 0x01	; 1
 e26:	08 95       	ret
