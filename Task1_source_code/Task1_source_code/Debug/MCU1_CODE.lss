
MCU1_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d0  00000258  2**0
                  ALLOC
  2 .bss          0000000e  00800060  00800060  0000253b  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000253b  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000016c  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000005d8  00000000  00000000  000026d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000093e4  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000170b  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000386c  00000000  00000000  0000d79f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f94  00000000  00000000  0001100c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087c  00000000  00000000  00011fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000523d  00000000  00000000  0001281c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  00017a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000023d4  000023d4  00002528  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00017f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.tmp     00000072  00001786  00001786  000018da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .progmemx.data 00000034  000000d0  000000d0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 17 .text.Free_RTOS_Init 000000fe  000007fc  000007fc  00000950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Initialize_E2PROM_State 00000016  00002252  00002252  000023a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Read_E2PROM_State 0000000c  00002322  00002322  00002476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.App_Init 00000068  00001940  00001940  00001a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.check_State 00000084  000014a2  000014a2  000015f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.eestate 0000001e  0000218c  0000218c  000022e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.handle_State 00000142  00000260  00000260  000003b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.fan1    00000026  000020b2  000020b2  00002206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.emergency 00000156  0000010a  0000010a  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_Transmit_State 0000004a  00001d0a  00001d0a  00001e5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uart    00000040  00001ef0  00001ef0  00002044  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_1 00000082  00001526  00001526  0000167a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .data.EEPROM_State_Add 00000001  008006e3  00000109  0000025d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .data.Speed_Scale 00000001  008006e4  000023e6  0000253a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .bss.temperature 00000002  008006d1  008006d1  0000253b  2**0
                  ALLOC
 32 .bss.temp_counter 00000001  008006e5  008006e5  0000253b  2**0
                  ALLOC
 33 .bss.bot1_intur 00000001  008006e6  008006e6  0000253b  2**0
                  ALLOC
 34 .bss.reset    00000001  008006e7  008006e7  0000253b  2**0
                  ALLOC
 35 .bss.DC_fan1  00000001  008006e8  008006e8  0000253b  2**0
                  ALLOC
 36 .bss.emergency_counter 00000001  008006e9  008006e9  0000253b  2**0
                  ALLOC
 37 .bss.emergency_flag 00000001  008006ea  008006ea  0000253b  2**0
                  ALLOC
 38 .bss.buttonPressed 00000001  008006eb  008006eb  0000253b  2**0
                  ALLOC
 39 .bss.currentState 00000001  008006ec  008006ec  0000253b  2**0
                  ALLOC
 40 .text.LED1_Initialize 0000000c  0000232e  0000232e  00002482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.LED1_ON 0000000c  0000233a  0000233a  0000248e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.LED1_OFF 0000000c  00002346  00002346  0000249a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.Initialize_TEMP_SENSOR 0000000c  00002352  00002352  000024a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.Read_TEMP_SENSOR 00000030  00001fd8  00001fd8  0000212c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.DC_Initialize 00000052  00001bd0  00001bd0  00001d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.DC_Start 00000090  0000138c  0000138c  000014e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.DC_Stop 0000004e  00001c22  00001c22  00001d76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.DC_Change_Speed 0000001e  000021aa  000021aa  000022fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.main    00000012  00002294  00002294  000023e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.ADC_Initialize 0000000e  000022ea  000022ea  0000243e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.ADC_Read 00000074  00001712  00001712  00001866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.DIO_SetPinDirection 000000e2  000009f4  000009f4  00000b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.DIO_SetPinValue 000000e2  00000ad6  00000ad6  00000c2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.External_Interrupt0_Initalize 00000058  00001b24  00001b24  00001c78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.UART_Initialize_WithoutInterrupt 00000120  000003a2  000003a2  000004f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.UART_Transmit_Character 0000000a  0000238e  0000238e  000024e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.UART_Transmit_Word 0000001c  000021e6  000021e6  0000233a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.pvPortMalloc 0000006a  000018d6  000018d6  00001a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.vPortFree 00000002  000023dc  000023dc  00002530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .bss.pucAlignedHeap.2045 00000002  008006d3  008006d3  0000253b  2**0
                  ALLOC
 61 .bss.xNextFreeByte 00000002  008006d5  008006d5  0000253b  2**0
                  ALLOC
 62 .bss.ucHeap   000005dc  0080006e  0080006e  0000253b  2**0
                  ALLOC
 63 .text.vListInitialise 0000001c  00002202  00002202  00002356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.vListInitialiseItem 00000008  000023b6  000023b6  0000250a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.vListInsertEnd 00000042  00001e6c  00001e6c  00001fc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.vListInsert 00000062  000019a8  000019a8  00001afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.uxListRemove 0000004e  00001c70  00001c70  00001dc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.prvSetupTimerInterrupt 00000012  000022a6  000022a6  000023fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.pxPortInitialiseStack 000000d8  00000bb8  00000bb8  00000d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.xPortStartScheduler 0000005e  00001a0a  00001a0a  00001b5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.vPortEndScheduler 00000002  000023de  000023de  00002532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.vPortYield 000000b2  00000f08  00000f08  0000105c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__vector_7 00000048  00001d54  00001d54  00001ea8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.prvIsQueueEmpty 00000026  000020d8  000020d8  0000222c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.prvIsQueueFull 00000038  00001f6e  00001f6e  000020c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.prvCopyDataToQueue 00000092  000012fa  000012fa  0000144e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.prvUnlockQueue 00000070  000017f8  000017f8  0000194c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.xQueueGenericReset 00000086  0000141c  0000141c  00001570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.prvInitialiseNewQueue 00000026  000020fe  000020fe  00002252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.xQueueGenericCreate 00000054  00001b7c  00001b7c  00001cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.xQueueGenericSend 0000011e  000004c2  000004c2  00000616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.xQueueSemaphoreTake 00000108  000006f4  000006f4  00000848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.prvTaskIsTaskSuspended 00000042  00001eae  00001eae  00002002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.prvResetNextTaskUnblockTime 0000003e  00001f30  00001f30  00002084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.prvDeleteTCB 0000001a  0000221e  0000221e  00002372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.prvInitialiseNewTask 000000fa  000008fa  000008fa  00000a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.prvInitialiseTaskLists 0000006e  00001868  00001868  000019bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.prvAddNewTaskToReadyList 000000ac  0000106a  0000106a  000011be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.prvCheckTasksWaitingTermination 0000004c  00001cbe  00001cbe  00001e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.prvIdleTask 0000000a  00002398  00002398  000024ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.prvAddCurrentTaskToDelayedList 000000b0  00000fba  00000fba  0000110e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.xTaskCreate 000000d0  00000e38  00000e38  00000f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.vTaskResume 00000078  00001622  00001622  00001776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .progmemx.data 00000005  00000104  00000104  00000258  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 95 .text.vTaskStartScheduler 0000005e  00001a68  00001a68  00001bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.vTaskEndScheduler 0000000c  0000235e  0000235e  000024b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.vTaskSuspendAll 0000000c  0000236a  0000236a  000024be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.xTaskIncrementTick 00000114  000005e0  000005e0  00000734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.xTaskResumeAll 000000d4  00000c90  00000c90  00000de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vTaskDelay 0000002c  00002036  00002036  0000218a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.vTaskSwitchContext 000000a8  00001116  00001116  0000126a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.vTaskSuspend 000000a4  000011be  000011be  00001312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.vTaskPlaceOnEventList 00000024  00002124  00002124  00002278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.xTaskRemoveFromEventList 00000098  00001262  00001262  000013b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.vTaskInternalSetTimeOutState 00000016  00002268  00002268  000023bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.xTaskCheckForTimeOut 00000078  0000169a  0000169a  000017ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vTaskMissedYield 00000008  000023be  000023be  00002512  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .bss.uxSchedulerSuspended 00000001  008006ed  008006ed  0000253b  2**0
                  ALLOC
109 .bss.xIdleTaskHandle 00000002  008006d7  008006d7  0000253b  2**0
                  ALLOC
110 .bss.xNextTaskUnblockTime 00000002  008006d9  008006d9  0000253b  2**0
                  ALLOC
111 .bss.uxTaskNumber 00000001  008006ee  008006ee  0000253b  2**0
                  ALLOC
112 .bss.xNumOfOverflows 00000001  008006ef  008006ef  0000253b  2**0
                  ALLOC
113 .bss.xYieldPending 00000001  008006f0  008006f0  0000253b  2**0
                  ALLOC
114 .bss.uxPendedTicks 00000001  008006f1  008006f1  0000253b  2**0
                  ALLOC
115 .bss.xSchedulerRunning 00000001  008006f2  008006f2  0000253b  2**0
                  ALLOC
116 .bss.uxTopReadyPriority 00000001  008006f3  008006f3  0000253b  2**0
                  ALLOC
117 .bss.xTickCount 00000002  008006db  008006db  0000253b  2**0
                  ALLOC
118 .bss.uxCurrentNumberOfTasks 00000001  008006f4  008006f4  0000253b  2**0
                  ALLOC
119 .bss.xSuspendedTaskList 00000009  008006a4  008006a4  0000253b  2**0
                  ALLOC
120 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006f5  008006f5  0000253b  2**0
                  ALLOC
121 .bss.xTasksWaitingTermination 00000009  008006ad  008006ad  0000253b  2**0
                  ALLOC
122 .bss.xPendingReadyList 00000009  008006b6  008006b6  0000253b  2**0
                  ALLOC
123 .bss.pxOverflowDelayedTaskList 00000002  008006dd  008006dd  0000253b  2**0
                  ALLOC
124 .bss.pxDelayedTaskList 00000002  008006df  008006df  0000253b  2**0
                  ALLOC
125 .bss.xDelayedTaskList2 00000009  008006bf  008006bf  0000253b  2**0
                  ALLOC
126 .bss.xDelayedTaskList1 00000009  008006c8  008006c8  0000253b  2**0
                  ALLOC
127 .bss.pxReadyTasksLists 0000005a  0080064a  0080064a  0000253b  2**0
                  ALLOC
128 .bss.pxCurrentTCB 00000002  008006e1  008006e1  0000253b  2**0
                  ALLOC
129 .text         0000000a  000023a2  000023a2  000024f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 .text         0000005e  00001ac6  00001ac6  00001c1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 .text         0000007a  000015a8  000015a8  000016fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 .text         00000048  00001d9c  00001d9c  00001ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 .text         00000044  00001de4  00001de4  00001f38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 .text         0000000e  000022f8  000022f8  0000244c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 .text         0000000a  000023ac  000023ac  00002500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 .text         00000008  000023c6  000023c6  0000251a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text         000000d4  00000d64  00000d64  00000eb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text         0000000c  00002376  00002376  000024ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text         00000006  000023ce  000023ce  00002522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text         0000000e  00002306  00002306  0000245a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text         0000000e  00002314  00002314  00002468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text         00000022  00002148  00002148  0000229c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text.libgcc.div 00000028  00002062  00002062  000021b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text.libgcc.div 00000044  00001e28  00001e28  00001f7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text.libgcc.div 0000002e  00002008  00002008  0000215c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text.libgcc.div 00000010  000022ca  000022ca  0000241e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text.libgcc  0000000c  00002382  00002382  000024d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text.libgcc.mul 0000001e  000021c8  000021c8  0000231c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text.libgcc  00000010  000022da  000022da  0000242e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.libgcc.div 00000028  0000208a  0000208a  000021de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.__dummy_fini 00000002  000023e0  000023e0  00002534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.__dummy_funcs_on_exit 00000002  000023e2  000023e2  00002536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.__dummy_simulator_exit 00000002  000023e4  000023e4  00002538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.exit    00000016  0000227e  0000227e  000023d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.memcpy  00000032  00001fa6  00001fa6  000020fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text._Exit   00000004  000023d8  000023d8  0000252c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.avrlibc 00000012  000022b8  000022b8  0000240c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.avrlibc 00000022  0000216a  0000216a  000022be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.avrlibc 0000001a  00002238  00002238  0000238c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_1>
   8:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
   c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  10:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  14:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  18:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  1c:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_7>
  20:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  24:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  28:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  2c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  30:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  34:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  38:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  3c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  40:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  44:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  48:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  4c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  50:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__bad_interrupt>
  54:	96 0b       	sbc	r25, r22
  56:	9a 0b       	sbc	r25, r26
  58:	9f 0b       	sbc	r25, r31
  5a:	a4 0b       	sbc	r26, r20
  5c:	a9 0b       	sbc	r26, r25
  5e:	ae 0b       	sbc	r26, r30
  60:	b3 0b       	sbc	r27, r19
  62:	b8 0b       	sbc	r27, r24

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	06 e3       	ldi	r16, 0x36	; 54
  68:	80 06       	cpc	r8, r16
  6a:	e3 06       	cpc	r14, r19
  6c:	e4 00       	.word	0x00e4	; ????
  6e:	01 09       	sbc	r16, r1
  70:	06 e4       	ldi	r16, 0x46	; 70
  72:	06 e5       	ldi	r16, 0x56	; 86
  74:	00 23       	and	r16, r16
  76:	e6 06       	cpc	r14, r22
  78:	e5 06       	cpc	r14, r21
  7a:	f6 80       	ldd	r15, Z+6	; 0x06

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	e4 e6       	ldi	r30, 0x64	; 100
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	17 c0       	rjmp	.+46     	; 0xbe <__do_clear_bss+0x8>
  90:	b5 91       	lpm	r27, Z+
  92:	a5 91       	lpm	r26, Z+
  94:	35 91       	lpm	r19, Z+
  96:	25 91       	lpm	r18, Z+
  98:	05 91       	lpm	r16, Z+
  9a:	07 fd       	sbrc	r16, 7
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <__do_clear_bss>
  9e:	95 91       	lpm	r25, Z+
  a0:	85 91       	lpm	r24, Z+
  a2:	ef 01       	movw	r28, r30
  a4:	f9 2f       	mov	r31, r25
  a6:	e8 2f       	mov	r30, r24
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x20>
  b2:	fe 01       	movw	r30, r28
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_clear_bss+0x8>

000000b6 <__do_clear_bss>:
  b6:	1d 92       	st	X+, r1
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__do_clear_bss>
  be:	ec 37       	cpi	r30, 0x7C	; 124
  c0:	f4 07       	cpc	r31, r20
  c2:	31 f7       	brne	.-52     	; 0x90 <__do_copy_data+0x8>
  c4:	0e 94 4a 11 	call	0x2294	; 0x2294 <main>
  c8:	0c 94 3f 11 	jmp	0x227e	; 0x227e <exit>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>

Disassembly of section .text:

000023d4 <__bad_interrupt>:
    23d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.tmp:

00001786 <tmp>:
void handle_event(temp T,uint8_t *counter,dc_motor DC_fan,uint8_t Speed, E2PROM_State* S,uint8_t* reset){
	
	/*	check the state	*/
	check_State(T,counter,S);
	handle_State(T,DC_fan,Speed,S,reset);
}
    1786:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <Read_TEMP_SENSOR>
    178a:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <temperature+0x1>
    178e:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <temperature>
    1792:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
    1796:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
    179a:	c2 97       	sbiw	r24, 0x32	; 50
    179c:	c0 f0       	brcs	.+48     	; 0x17ce <tmp+0x48>
    179e:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <emergency_flag>
    17a2:	81 11       	cpse	r24, r1
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <tmp+0x3e>
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 93 ea 06 	sts	0x06EA, r24	; 0x8006ea <emergency_flag>
    17ac:	00 e0       	ldi	r16, 0x00	; 0
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Emer_Semaphore>
    17bc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Emer_Semaphore+0x1>
    17c0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xQueueGenericSend>
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 1b 10 	call	0x2036	; 0x2036 <vTaskDelay>
    17cc:	dc cf       	rjmp	.-72     	; 0x1786 <tmp>
    17ce:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <emergency_flag>
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	61 f4       	brne	.+24     	; 0x17ee <tmp+0x68>
    17d6:	00 e0       	ldi	r16, 0x00	; 0
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Emer_Semaphore>
    17e6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Emer_Semaphore+0x1>
    17ea:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xQueueGenericSend>
    17ee:	82 e1       	ldi	r24, 0x12	; 18
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 1b 10 	call	0x2036	; 0x2036 <vTaskDelay>
    17f6:	c7 cf       	rjmp	.-114    	; 0x1786 <tmp>

Disassembly of section .text.Free_RTOS_Init:

000007fc <Free_RTOS_Init>:
 7fc:	cf 92       	push	r12
 7fe:	df 92       	push	r13
 800:	ef 92       	push	r14
 802:	0f 93       	push	r16
 804:	1f 93       	push	r17
 806:	43 e0       	ldi	r20, 0x03	; 3
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xQueueGenericCreate>
 810:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Bot1_Semaphore+0x1>
 814:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Bot1_Semaphore>
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <xQueueSemaphoreTake>
 820:	43 e0       	ldi	r20, 0x03	; 3
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <xQueueGenericCreate>
 82a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Emer_Semaphore+0x1>
 82e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Emer_Semaphore>
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <xQueueSemaphoreTake>
 83a:	0f 2e       	mov	r0, r31
 83c:	fc e6       	ldi	r31, 0x6C	; 108
 83e:	cf 2e       	mov	r12, r31
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	df 2e       	mov	r13, r31
 844:	f0 2d       	mov	r31, r0
 846:	e1 2c       	mov	r14, r1
 848:	00 e0       	ldi	r16, 0x00	; 0
 84a:	10 e0       	ldi	r17, 0x00	; 0
 84c:	24 e6       	ldi	r18, 0x64	; 100
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	40 ed       	ldi	r20, 0xD0	; 208
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	83 ec       	ldi	r24, 0xC3	; 195
 858:	9b e0       	ldi	r25, 0x0B	; 11
 85a:	0e 94 1c 07 	call	0xe38	; 0xe38 <xTaskCreate>
 85e:	0f 2e       	mov	r0, r31
 860:	f6 e6       	ldi	r31, 0x66	; 102
 862:	cf 2e       	mov	r12, r31
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	df 2e       	mov	r13, r31
 868:	f0 2d       	mov	r31, r0
 86a:	0f 2e       	mov	r0, r31
 86c:	f3 e0       	ldi	r31, 0x03	; 3
 86e:	ef 2e       	mov	r14, r31
 870:	f0 2d       	mov	r31, r0
 872:	24 e6       	ldi	r18, 0x64	; 100
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	49 ed       	ldi	r20, 0xD9	; 217
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	88 e7       	ldi	r24, 0x78	; 120
 87e:	9f e0       	ldi	r25, 0x0F	; 15
 880:	0e 94 1c 07 	call	0xe38	; 0xe38 <xTaskCreate>
 884:	0f 2e       	mov	r0, r31
 886:	f0 e6       	ldi	r31, 0x60	; 96
 888:	cf 2e       	mov	r12, r31
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	df 2e       	mov	r13, r31
 88e:	f0 2d       	mov	r31, r0
 890:	e1 2c       	mov	r14, r1
 892:	24 e6       	ldi	r18, 0x64	; 100
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	43 ee       	ldi	r20, 0xE3	; 227
 898:	50 e0       	ldi	r21, 0x00	; 0
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	86 ec       	ldi	r24, 0xC6	; 198
 89e:	90 e1       	ldi	r25, 0x10	; 16
 8a0:	0e 94 1c 07 	call	0xe38	; 0xe38 <xTaskCreate>
 8a4:	0f 2e       	mov	r0, r31
 8a6:	f4 e6       	ldi	r31, 0x64	; 100
 8a8:	cf 2e       	mov	r12, r31
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	df 2e       	mov	r13, r31
 8ae:	f0 2d       	mov	r31, r0
 8b0:	68 94       	set
 8b2:	ee 24       	eor	r14, r14
 8b4:	e1 f8       	bld	r14, 1
 8b6:	24 e6       	ldi	r18, 0x64	; 100
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	40 ef       	ldi	r20, 0xF0	; 240
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	89 e5       	ldi	r24, 0x59	; 89
 8c2:	90 e1       	ldi	r25, 0x10	; 16
 8c4:	0e 94 1c 07 	call	0xe38	; 0xe38 <xTaskCreate>
 8c8:	0f 2e       	mov	r0, r31
 8ca:	fa e6       	ldi	r31, 0x6A	; 106
 8cc:	cf 2e       	mov	r12, r31
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	df 2e       	mov	r13, r31
 8d2:	f0 2d       	mov	r31, r0
 8d4:	0f 2e       	mov	r0, r31
 8d6:	f5 e0       	ldi	r31, 0x05	; 5
 8d8:	ef 2e       	mov	r14, r31
 8da:	f0 2d       	mov	r31, r0
 8dc:	24 e6       	ldi	r18, 0x64	; 100
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	4a ef       	ldi	r20, 0xFA	; 250
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	85 e8       	ldi	r24, 0x85	; 133
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	0e 94 1c 07 	call	0xe38	; 0xe38 <xTaskCreate>
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	ef 90       	pop	r14
 8f4:	df 90       	pop	r13
 8f6:	cf 90       	pop	r12
 8f8:	08 95       	ret

Disassembly of section .text.Initialize_E2PROM_State:

00002252 <Initialize_E2PROM_State>:
}

void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	83 ee       	ldi	r24, 0xE3	; 227
    2256:	96 e0       	ldi	r25, 0x06	; 6
    2258:	0e 94 b5 10 	call	0x216a	; 0x216a <eeprom_update_byte>
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	83 ee       	ldi	r24, 0xE3	; 227
    2260:	96 e0       	ldi	r25, 0x06	; 6
    2262:	0e 94 b5 10 	call	0x216a	; 0x216a <eeprom_update_byte>
    2266:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

00002322 <Read_E2PROM_State>:
}

uint8_t Read_E2PROM_State (void){
	
	/*	read the state	*/
	uint8_t x= eeprom_read_byte (&EEPROM_State_Add); 		
    2322:	63 ee       	ldi	r22, 0xE3	; 227
    2324:	76 e0       	ldi	r23, 0x06	; 6
    2326:	80 e8       	ldi	r24, 0x80	; 128
    2328:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <eeprom_read_byte>
	return x;
}
    232c:	08 95       	ret

Disassembly of section .text.App_Init:

00001940 <App_Init>:
void handle_event(temp T,uint8_t *counter,dc_motor DC_fan,uint8_t Speed, E2PROM_State* S,uint8_t* reset){
	
	/*	check the state	*/
	check_State(T,counter,S);
	handle_State(T,DC_fan,Speed,S,reset);
}
    1940:	0f 93       	push	r16
    1942:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <DC_fan1>
    1946:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <DC_Initialize>
    194a:	0e 94 29 11 	call	0x2252	; 0x2252 <Initialize_E2PROM_State>
    194e:	0e 94 a9 11 	call	0x2352	; 0x2352 <Initialize_TEMP_SENSOR>
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	0e 94 75 11 	call	0x22ea	; 0x22ea <ADC_Initialize>
    195a:	0e 94 97 11 	call	0x232e	; 0x232e <LED1_Initialize>
    195e:	0e 94 a3 11 	call	0x2346	; 0x2346 <LED1_OFF>
    1962:	8b b3       	in	r24, 0x1b	; 27
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
    196c:	00 e0       	ldi	r16, 0x00	; 0
    196e:	23 e0       	ldi	r18, 0x03	; 3
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	80 e6       	ldi	r24, 0x60	; 96
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <UART_Initialize_WithoutInterrupt>
    197c:	88 23       	and	r24, r24
    197e:	91 f0       	breq	.+36     	; 0x19a4 <App_Init+0x64>
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <External_Interrupt0_Initalize>
    1986:	0e 94 91 11 	call	0x2322	; 0x2322 <Read_E2PROM_State>
    198a:	81 11       	cpse	r24, r1
    198c:	05 c0       	rjmp	.+10     	; 0x1998 <App_Init+0x58>
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <DC_fan1>
    1994:	0e 94 c6 09 	call	0x138c	; 0x138c <DC_Start>
    1998:	8f e1       	ldi	r24, 0x1F	; 31
    199a:	9e e4       	ldi	r25, 0x4E	; 78
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <App_Init+0x5c>
    19a0:	00 c0       	rjmp	.+0      	; 0x19a2 <App_Init+0x62>
    19a2:	00 00       	nop
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

Disassembly of section .text.check_State:

000014a2 <check_State>:
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	8b 01       	movw	r16, r22
    14b4:	ea 01       	movw	r28, r20
    14b6:	bc 01       	movw	r22, r24
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__floatunsisf>
    14c0:	6b 01       	movw	r12, r22
    14c2:	7c 01       	movw	r14, r24
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	48 e4       	ldi	r20, 0x48	; 72
    14ca:	52 e4       	ldi	r21, 0x42	; 66
    14cc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	64 f4       	brge	.+24     	; 0x14ec <check_State+0x4a>
    14d4:	88 81       	ld	r24, Y
    14d6:	88 23       	and	r24, r24
    14d8:	49 f0       	breq	.+18     	; 0x14ec <check_State+0x4a>
    14da:	f8 01       	movw	r30, r16
    14dc:	10 82       	st	Z, r1
    14de:	18 82       	st	Y, r1
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	83 ee       	ldi	r24, 0xE3	; 227
    14e4:	96 e0       	ldi	r25, 0x06	; 6
    14e6:	0e 94 1c 11 	call	0x2238	; 0x2238 <eeprom_write_byte>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <check_State+0x72>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	48 e4       	ldi	r20, 0x48	; 72
    14f2:	52 e4       	ldi	r21, 0x42	; 66
    14f4:	c7 01       	movw	r24, r14
    14f6:	b6 01       	movw	r22, r12
    14f8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__gesf2>
    14fc:	88 23       	and	r24, r24
    14fe:	54 f0       	brlt	.+20     	; 0x1514 <check_State+0x72>
    1500:	88 81       	ld	r24, Y
    1502:	81 11       	cpse	r24, r1
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <check_State+0x72>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	88 83       	st	Y, r24
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	83 ee       	ldi	r24, 0xE3	; 227
    150e:	96 e0       	ldi	r25, 0x06	; 6
    1510:	0e 94 1c 11 	call	0x2238	; 0x2238 <eeprom_write_byte>
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	08 95       	ret

Disassembly of section .text.eestate:

0000218c <eestate>:
}

void eestate(void *par){
	
	while(1){
		check_State(temperature,&temp_counter,&currentState);
    218c:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
    2190:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
    2194:	4c ee       	ldi	r20, 0xEC	; 236
    2196:	56 e0       	ldi	r21, 0x06	; 6
    2198:	65 ee       	ldi	r22, 0xE5	; 229
    219a:	76 e0       	ldi	r23, 0x06	; 6
    219c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <check_State>
		vTaskDelay(pdMS_TO_TICKS(500));
    21a0:	89 e2       	ldi	r24, 0x29	; 41
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 1b 10 	call	0x2036	; 0x2036 <vTaskDelay>
    21a8:	f1 cf       	rjmp	.-30     	; 0x218c <eestate>

Disassembly of section .text.handle_State:

00000260 <handle_State>:
void handle_event(temp T,uint8_t *counter,dc_motor DC_fan,uint8_t Speed, E2PROM_State* S,uint8_t* reset){
	
	/*	check the state	*/
	check_State(T,counter,S);
	handle_State(T,DC_fan,Speed,S,reset);
}
 260:	8f 92       	push	r8
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	7c 01       	movw	r14, r24
 276:	c6 2f       	mov	r28, r22
 278:	d4 2f       	mov	r29, r20
 27a:	f9 01       	movw	r30, r18
 27c:	90 81       	ld	r25, Z
 27e:	91 30       	cpi	r25, 0x01	; 1
 280:	09 f4       	brne	.+2      	; 0x284 <handle_State+0x24>
 282:	62 c0       	rjmp	.+196    	; 0x348 <handle_State+0xe8>
 284:	20 f0       	brcs	.+8      	; 0x28e <handle_State+0x2e>
 286:	92 30       	cpi	r25, 0x02	; 2
 288:	09 f4       	brne	.+2      	; 0x28c <handle_State+0x2c>
 28a:	6e c0       	rjmp	.+220    	; 0x368 <handle_State+0x108>
 28c:	7f c0       	rjmp	.+254    	; 0x38c <handle_State+0x12c>
 28e:	b7 01       	movw	r22, r14
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__floatunsisf>
 298:	4b 01       	movw	r8, r22
 29a:	5c 01       	movw	r10, r24
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	40 ea       	ldi	r20, 0xA0	; 160
 2a2:	51 e4       	ldi	r21, 0x41	; 65
 2a4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
 2a8:	18 16       	cp	r1, r24
 2aa:	24 f0       	brlt	.+8      	; 0x2b4 <handle_State+0x54>
 2ac:	8c 2f       	mov	r24, r28
 2ae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <DC_Stop>
 2b2:	6c c0       	rjmp	.+216    	; 0x38c <handle_State+0x12c>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 ea       	ldi	r20, 0xA0	; 160
 2ba:	51 e4       	ldi	r21, 0x41	; 65
 2bc:	c5 01       	movw	r24, r10
 2be:	b4 01       	movw	r22, r8
 2c0:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__gesf2>
 2c4:	18 16       	cp	r1, r24
 2c6:	4c f5       	brge	.+82     	; 0x31a <handle_State+0xba>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e2       	ldi	r20, 0x20	; 32
 2ce:	52 e4       	ldi	r21, 0x42	; 66
 2d0:	c5 01       	movw	r24, r10
 2d2:	b4 01       	movw	r22, r8
 2d4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
 2d8:	18 16       	cp	r1, r24
 2da:	fc f0       	brlt	.+62     	; 0x31a <handle_State+0xba>
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 c6 09 	call	0x138c	; 0x138c <DC_Start>
 2e4:	de 9d       	mul	r29, r14
 2e6:	c0 01       	movw	r24, r0
 2e8:	df 9d       	mul	r29, r15
 2ea:	90 0d       	add	r25, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	9c 01       	movw	r18, r24
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	28 0f       	add	r18, r24
 2fa:	39 1f       	adc	r19, r25
 2fc:	36 95       	lsr	r19
 2fe:	27 95       	ror	r18
 300:	36 95       	lsr	r19
 302:	27 95       	ror	r18
 304:	ab e7       	ldi	r26, 0x7B	; 123
 306:	b4 e1       	ldi	r27, 0x14	; 20
 308:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <__umulhisi3>
 30c:	bc 01       	movw	r22, r24
 30e:	76 95       	lsr	r23
 310:	67 95       	ror	r22
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DC_Change_Speed>
 318:	39 c0       	rjmp	.+114    	; 0x38c <handle_State+0x12c>
 31a:	f9 e2       	ldi	r31, 0x29	; 41
 31c:	ef 1a       	sub	r14, r31
 31e:	f1 08       	sbc	r15, r1
 320:	2a e0       	ldi	r18, 0x0A	; 10
 322:	e2 16       	cp	r14, r18
 324:	f1 04       	cpc	r15, r1
 326:	90 f5       	brcc	.+100    	; 0x38c <handle_State+0x12c>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	8c 2f       	mov	r24, r28
 32c:	0e 94 c6 09 	call	0x138c	; 0x138c <DC_Start>
 330:	ea ef       	ldi	r30, 0xFA	; 250
 332:	de 9f       	mul	r29, r30
 334:	c0 01       	movw	r24, r0
 336:	11 24       	eor	r1, r1
 338:	64 e6       	ldi	r22, 0x64	; 100
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	0e 94 31 10 	call	0x2062	; 0x2062 <__divmodhi4>
 340:	8c 2f       	mov	r24, r28
 342:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DC_Change_Speed>
 346:	22 c0       	rjmp	.+68     	; 0x38c <handle_State+0x12c>
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	8c 2f       	mov	r24, r28
 34c:	0e 94 c6 09 	call	0x138c	; 0x138c <DC_Start>
 350:	fa ef       	ldi	r31, 0xFA	; 250
 352:	df 9f       	mul	r29, r31
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	64 e6       	ldi	r22, 0x64	; 100
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	0e 94 31 10 	call	0x2062	; 0x2062 <__divmodhi4>
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DC_Change_Speed>
 366:	12 c0       	rjmp	.+36     	; 0x38c <handle_State+0x12c>
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	8c 2f       	mov	r24, r28
 36c:	0e 94 c6 09 	call	0x138c	; 0x138c <DC_Start>
 370:	2a ef       	ldi	r18, 0xFA	; 250
 372:	d2 9f       	mul	r29, r18
 374:	c0 01       	movw	r24, r0
 376:	11 24       	eor	r1, r1
 378:	64 e6       	ldi	r22, 0x64	; 100
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	0e 94 31 10 	call	0x2062	; 0x2062 <__divmodhi4>
 380:	8c 2f       	mov	r24, r28
 382:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DC_Change_Speed>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	f8 01       	movw	r30, r16
 38a:	80 83       	st	Z, r24
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	08 95       	ret

Disassembly of section .text.fan1:

000020b2 <fan1>:
}

void fan1(void *par){

	while(1){
		handle_State(temperature,DC_fan1,Speed_Scale,&currentState,&reset);
    20b2:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
    20b6:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
    20ba:	07 ee       	ldi	r16, 0xE7	; 231
    20bc:	16 e0       	ldi	r17, 0x06	; 6
    20be:	2c ee       	ldi	r18, 0xEC	; 236
    20c0:	36 e0       	ldi	r19, 0x06	; 6
    20c2:	40 91 e4 06 	lds	r20, 0x06E4	; 0x8006e4 <Speed_Scale>
    20c6:	60 91 e8 06 	lds	r22, 0x06E8	; 0x8006e8 <DC_fan1>
    20ca:	0e 94 30 01 	call	0x260	; 0x260 <handle_State>
		vTaskDelay(pdMS_TO_TICKS(80));
    20ce:	8e e0       	ldi	r24, 0x0E	; 14
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 1b 10 	call	0x2036	; 0x2036 <vTaskDelay>
    20d6:	ed cf       	rjmp	.-38     	; 0x20b2 <fan1>

Disassembly of section .text.emergency:

0000010a <emergency>:
void handle_event(temp T,uint8_t *counter,dc_motor DC_fan,uint8_t Speed, E2PROM_State* S,uint8_t* reset){
	
	/*	check the state	*/
	check_State(T,counter,S);
	handle_State(T,DC_fan,Speed,S,reset);
}
 10a:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <emergency_flag>
 10e:	88 23       	and	r24, r24
 110:	21 f0       	breq	.+8      	; 0x11a <emergency+0x10>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	09 f4       	brne	.+2      	; 0x118 <emergency+0xe>
 116:	4a c0       	rjmp	.+148    	; 0x1ac <emergency+0xa2>
 118:	f8 cf       	rjmp	.-16     	; 0x10a <emergency>
 11a:	60 e1       	ldi	r22, 0x10	; 16
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Emer_Semaphore>
 122:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Emer_Semaphore+0x1>
 126:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <xQueueSemaphoreTake>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	61 f5       	brne	.+88     	; 0x186 <emergency+0x7c>
 12e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 132:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 136:	0e 94 df 08 	call	0x11be	; 0x11be <vTaskSuspend>
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 142:	0e 94 df 08 	call	0x11be	; 0x11be <vTaskSuspend>
 146:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 14a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 14e:	0e 94 df 08 	call	0x11be	; 0x11be <vTaskSuspend>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <currentState>
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <Speed_Scale>
 15e:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
 162:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
 166:	07 ee       	ldi	r16, 0xE7	; 231
 168:	16 e0       	ldi	r17, 0x06	; 6
 16a:	2c ee       	ldi	r18, 0xEC	; 236
 16c:	36 e0       	ldi	r19, 0x06	; 6
 16e:	44 e6       	ldi	r20, 0x64	; 100
 170:	60 91 e8 06 	lds	r22, 0x06E8	; 0x8006e8 <DC_fan1>
 174:	0e 94 30 01 	call	0x260	; 0x260 <handle_State>
 178:	60 91 ec 06 	lds	r22, 0x06EC	; 0x8006ec <currentState>
 17c:	83 ee       	ldi	r24, 0xE3	; 227
 17e:	96 e0       	ldi	r25, 0x06	; 6
 180:	0e 94 1c 11 	call	0x2238	; 0x2238 <eeprom_write_byte>
 184:	c2 cf       	rjmp	.-124    	; 0x10a <emergency>
 186:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 18a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 18e:	0e 94 11 0b 	call	0x1622	; 0x1622 <vTaskResume>
 192:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 196:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 19a:	0e 94 11 0b 	call	0x1622	; 0x1622 <vTaskResume>
 19e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 1a2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 1a6:	0e 94 11 0b 	call	0x1622	; 0x1622 <vTaskResume>
 1aa:	af cf       	rjmp	.-162    	; 0x10a <emergency>
 1ac:	65 e0       	ldi	r22, 0x05	; 5
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Emer_Semaphore>
 1b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Emer_Semaphore+0x1>
 1b8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <xQueueSemaphoreTake>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	79 f5       	brne	.+94     	; 0x21e <emergency+0x114>
 1c0:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <emergency_counter>
 1c4:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <emergency_flag>
 1c8:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <currentState>
 1cc:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
 1d0:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
 1d4:	07 ee       	ldi	r16, 0xE7	; 231
 1d6:	16 e0       	ldi	r17, 0x06	; 6
 1d8:	2c ee       	ldi	r18, 0xEC	; 236
 1da:	36 e0       	ldi	r19, 0x06	; 6
 1dc:	40 91 e4 06 	lds	r20, 0x06E4	; 0x8006e4 <Speed_Scale>
 1e0:	60 91 e8 06 	lds	r22, 0x06E8	; 0x8006e8 <DC_fan1>
 1e4:	0e 94 30 01 	call	0x260	; 0x260 <handle_State>
 1e8:	60 91 ec 06 	lds	r22, 0x06EC	; 0x8006ec <currentState>
 1ec:	83 ee       	ldi	r24, 0xE3	; 227
 1ee:	96 e0       	ldi	r25, 0x06	; 6
 1f0:	0e 94 1c 11 	call	0x2238	; 0x2238 <eeprom_write_byte>
 1f4:	0e 94 a3 11 	call	0x2346	; 0x2346 <LED1_OFF>
 1f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 1fc:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 200:	0e 94 11 0b 	call	0x1622	; 0x1622 <vTaskResume>
 204:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 208:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 20c:	0e 94 11 0b 	call	0x1622	; 0x1622 <vTaskResume>
 210:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 214:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 218:	0e 94 11 0b 	call	0x1622	; 0x1622 <vTaskResume>
 21c:	1c c0       	rjmp	.+56     	; 0x256 <emergency+0x14c>
 21e:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <emergency_counter>
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <emergency_counter>
 228:	8e 36       	cpi	r24, 0x6E	; 110
 22a:	a8 f0       	brcs	.+42     	; 0x256 <emergency+0x14c>
 22c:	f8 94       	cli
 22e:	0e 94 9d 11 	call	0x233a	; 0x233a <LED1_ON>
 232:	0e 94 af 11 	call	0x235e	; 0x235e <vTaskEndScheduler>
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <currentState>
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	83 ee       	ldi	r24, 0xE3	; 227
 240:	96 e0       	ldi	r25, 0x06	; 6
 242:	0e 94 1c 11 	call	0x2238	; 0x2238 <eeprom_write_byte>
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	81 bd       	out	0x21, r24	; 33
 24a:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <emergency_counter>
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <emergency_counter>
 254:	fa cf       	rjmp	.-12     	; 0x24a <emergency+0x140>
 256:	8c e2       	ldi	r24, 0x2C	; 44
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 1b 10 	call	0x2036	; 0x2036 <vTaskDelay>
 25e:	55 cf       	rjmp	.-342    	; 0x10a <emergency>

Disassembly of section .text.UART_Transmit_State:

00001d0a <UART_Transmit_State>:
    1d0a:	82 33       	cpi	r24, 0x32	; 50
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	70 f0       	brcs	.+28     	; 0x1d2c <UART_Transmit_State+0x22>
    1d10:	6e 36       	cpi	r22, 0x6E	; 110
    1d12:	38 f4       	brcc	.+14     	; 0x1d22 <UART_Transmit_State+0x18>
    1d14:	fa 01       	movw	r30, r20
    1d16:	10 82       	st	Z, r1
    1d18:	8c e2       	ldi	r24, 0x2C	; 44
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_Transmit_Word>
    1d20:	08 95       	ret
    1d22:	8e e5       	ldi	r24, 0x5E	; 94
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_Transmit_Word>
    1d2a:	08 95       	ret
    1d2c:	9c 01       	movw	r18, r24
    1d2e:	29 52       	subi	r18, 0x29	; 41
    1d30:	31 09       	sbc	r19, r1
    1d32:	2a 30       	cpi	r18, 0x0A	; 10
    1d34:	31 05       	cpc	r19, r1
    1d36:	48 f4       	brcc	.+18     	; 0x1d4a <UART_Transmit_State+0x40>
    1d38:	fa 01       	movw	r30, r20
    1d3a:	20 81       	ld	r18, Z
    1d3c:	21 30       	cpi	r18, 0x01	; 1
    1d3e:	29 f4       	brne	.+10     	; 0x1d4a <UART_Transmit_State+0x40>
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_Transmit_Word>
    1d48:	08 95       	ret
    1d4a:	fa 01       	movw	r30, r20
    1d4c:	10 82       	st	Z, r1
    1d4e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <UART_Transmit_Word>
    1d52:	08 95       	ret

Disassembly of section .text.uart:

00001ef0 <uart>:
    1ef0:	64 e0       	ldi	r22, 0x04	; 4
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Bot1_Semaphore>
    1ef8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Bot1_Semaphore+0x1>
    1efc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <xQueueSemaphoreTake>
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	59 f4       	brne	.+22     	; 0x1f1a <uart+0x2a>
    1f04:	60 91 e5 06 	lds	r22, 0x06E5	; 0x8006e5 <temp_counter>
    1f08:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
    1f0c:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
    1f10:	4b ee       	ldi	r20, 0xEB	; 235
    1f12:	56 e0       	ldi	r21, 0x06	; 6
    1f14:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <UART_Transmit_State>
    1f18:	eb cf       	rjmp	.-42     	; 0x1ef0 <uart>
    1f1a:	60 91 e5 06 	lds	r22, 0x06E5	; 0x8006e5 <temp_counter>
    1f1e:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <temperature>
    1f22:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <temperature+0x1>
    1f26:	4b ee       	ldi	r20, 0xEB	; 235
    1f28:	56 e0       	ldi	r21, 0x06	; 6
    1f2a:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <UART_Transmit_State>
    1f2e:	e0 cf       	rjmp	.-64     	; 0x1ef0 <uart>

Disassembly of section .text.__vector_1:

00001526 <__vector_1>:
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	0f 93       	push	r16
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
    154a:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bot1_intur>
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <bot1_intur>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <buttonPressed>
    155a:	00 e0       	ldi	r16, 0x00	; 0
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Bot1_Semaphore>
    156a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Bot1_Semaphore+0x1>
    156e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <xQueueGenericSend>
    1572:	2f e7       	ldi	r18, 0x7F	; 127
    1574:	88 e3       	ldi	r24, 0x38	; 56
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	21 50       	subi	r18, 0x01	; 1
    157a:	80 40       	sbci	r24, 0x00	; 0
    157c:	90 40       	sbci	r25, 0x00	; 0
    157e:	e1 f7       	brne	.-8      	; 0x1578 <__vector_1+0x52>
    1580:	00 c0       	rjmp	.+0      	; 0x1582 <__vector_1+0x5c>
    1582:	00 00       	nop
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 91       	pop	r16
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

Disassembly of section .text.LED1_Initialize:

0000232e <LED1_Initialize>:

static char num_arr[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void LED1_Initialize(void)
{
	DIO_SetPinDirection(LED1_PORT, LED1_PIN, LED1_OUTPUT);
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
    2338:	08 95       	ret

Disassembly of section .text.LED1_ON:

0000233a <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_HIGH);
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
    2344:	08 95       	ret

Disassembly of section .text.LED1_OFF:

00002346 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_LOW);
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
    2350:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

00002352 <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
    235c:	08 95       	ret

Disassembly of section .text.Read_TEMP_SENSOR:

00001fd8 <Read_TEMP_SENSOR>:
}

temp Read_TEMP_SENSOR(void){
	uint16_t temp_volt=ADC_Read(TEMP_SEN_PIN);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0e 94 89 0b 	call	0x1712	; 0x1712 <ADC_Read>
	temp temp_read = temp_volt*500.0/1024.0 ;
    1fde:	bc 01       	movw	r22, r24
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__floatunsisf>
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a ef       	ldi	r20, 0xFA	; 250
    1fee:	53 e4       	ldi	r21, 0x43	; 67
    1ff0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5a e3       	ldi	r21, 0x3A	; 58
    1ffc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__mulsf3>
    2000:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fixunssfsi>
	return temp_read;
    2004:	cb 01       	movw	r24, r22
    2006:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00001bd0 <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{	
	switch(motor)
    1bd0:	88 23       	and	r24, r24
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <DC_Initialize+0xa>
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	a9 f0       	breq	.+42     	; 0x1c02 <DC_Initialize+0x32>
    1bd8:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	65 e0       	ldi	r22, 0x05	; 5
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	62 e0       	ldi	r22, 0x02	; 2
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
		// Set Timer1 to Fast PWM mode with 8-bit resolution
		TCCR1A = (1 << WGM10) | (1 << WGM12) | (1 << COM1A1); // Fast PWM, Clear OC1A on Compare Match
    1bf8:	89 e8       	ldi	r24, 0x89	; 137
    1bfa:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);    // Prescaler = 64, start the timer
    1bfc:	8b e0       	ldi	r24, 0x0B	; 11
    1bfe:	8e bd       	out	0x2e, r24	; 46
		break;
    1c00:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	62 e0       	ldi	r22, 0x02	; 2
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_SetPinDirection>
    1c20:	08 95       	ret

Disassembly of section .text.DC_Start:

0000138c <DC_Start>:
	}
	
}

void DC_Start(dc_motor motor, dc_motor_direction direction)
{	
    138c:	cf 93       	push	r28
    138e:	c6 2f       	mov	r28, r22
	switch(motor)
    1390:	88 23       	and	r24, r24
    1392:	19 f0       	breq	.+6      	; 0x139a <DC_Start+0xe>
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	09 f1       	breq	.+66     	; 0x13da <DC_Start+0x4e>
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <DC_Start+0x8c>
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_HIGH);
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	65 e0       	ldi	r22, 0x05	; 5
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		switch(direction)
    13a4:	cc 23       	and	r28, r28
    13a6:	19 f0       	breq	.+6      	; 0x13ae <DC_Start+0x22>
    13a8:	c1 30       	cpi	r28, 0x01	; 1
    13aa:	61 f0       	breq	.+24     	; 0x13c4 <DC_Start+0x38>
    13ac:	35 c0       	rjmp	.+106    	; 0x1418 <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_HIGH);
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	62 e0       	ldi	r22, 0x02	; 2
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			break;
    13c2:	2a c0       	rjmp	.+84     	; 0x1418 <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_HIGH);
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	62 e0       	ldi	r22, 0x02	; 2
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			break;
    13d8:	1f c0       	rjmp	.+62     	; 0x1418 <DC_Start+0x8c>
		}
		break;
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_HIGH);
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		switch(direction)
    13e4:	cc 23       	and	r28, r28
    13e6:	19 f0       	breq	.+6      	; 0x13ee <DC_Start+0x62>
    13e8:	c1 30       	cpi	r28, 0x01	; 1
    13ea:	61 f0       	breq	.+24     	; 0x1404 <DC_Start+0x78>
    13ec:	15 c0       	rjmp	.+42     	; 0x1418 <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_HIGH);
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	62 e0       	ldi	r22, 0x02	; 2
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			break;
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_HIGH);
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
			break;
		}
		break;
	}
}
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

Disassembly of section .text.DC_Stop:

00001c22 <DC_Stop>:

void DC_Stop(dc_motor motor)
{
	switch(motor)
    1c22:	88 23       	and	r24, r24
    1c24:	19 f0       	breq	.+6      	; 0x1c2c <DC_Stop+0xa>
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	99 f0       	breq	.+38     	; 0x1c50 <DC_Stop+0x2e>
    1c2a:	08 95       	ret
	{
		case DC_Motor1:
		// Stop the pulse
		OCR1A=0;
    1c2c:	1b bc       	out	0x2b, r1	; 43
    1c2e:	1a bc       	out	0x2a, r1	; 42
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_LOW);
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	65 e0       	ldi	r22, 0x05	; 5
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		break;
    1c4e:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_LOW);
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	62 e0       	ldi	r22, 0x02	; 2
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	62 e0       	ldi	r22, 0x02	; 2
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_SetPinValue>
    1c6e:	08 95       	ret

Disassembly of section .text.DC_Change_Speed:

000021aa <DC_Change_Speed>:
		break;
	}
}

void DC_Change_Speed(dc_motor motor,uint16_t speed)
{	switch (motor){
    21aa:	88 23       	and	r24, r24
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <DC_Change_Speed+0xa>
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	21 f0       	breq	.+8      	; 0x21ba <DC_Change_Speed+0x10>
    21b2:	08 95       	ret
		case DC_Motor1:
			OCR1A = speed;
    21b4:	7b bd       	out	0x2b, r23	; 43
    21b6:	6a bd       	out	0x2a, r22	; 42
		break;
    21b8:	08 95       	ret
		case DC_Motor2:
			OCR1B = speed/4;
    21ba:	76 95       	lsr	r23
    21bc:	67 95       	ror	r22
    21be:	76 95       	lsr	r23
    21c0:	67 95       	ror	r22
    21c2:	79 bd       	out	0x29, r23	; 41
    21c4:	68 bd       	out	0x28, r22	; 40
    21c6:	08 95       	ret

Disassembly of section .text.main:

00002294 <main>:


int main(void)
{	
	
	App_Init();
    2294:	0e 94 a0 0c 	call	0x1940	; 0x1940 <App_Init>
	Free_RTOS_Init();
    2298:	0e 94 fe 03 	call	0x7fc	; 0x7fc <Free_RTOS_Init>
	

		
	vTaskStartScheduler();
    229c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <vTaskStartScheduler>
	//Recieve the message (Speed)
	UART_Receive_Speed(&Speed_Scale);
	*/
	

}
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	08 95       	ret

Disassembly of section .text.ADC_Initialize:

000022ea <ADC_Initialize>:

#include "ADC_Private.h"

void ADC_Initialize(adc_vref voltage , adc_prescaler prescaler)
{
	ADMUX |= 0x40;
    22ea:	87 b1       	in	r24, 0x07	; 7
    22ec:	80 64       	ori	r24, 0x40	; 64
    22ee:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xA7;
    22f0:	86 b1       	in	r24, 0x06	; 6
    22f2:	87 6a       	ori	r24, 0xA7	; 167
    22f4:	86 b9       	out	0x06, r24	; 6
    22f6:	08 95       	ret

Disassembly of section .text.ADC_Read:

00001712 <ADC_Read>:
}

uint16_t ADC_Read(adc_channel channel)
{
    1712:	e8 2f       	mov	r30, r24
	uint16_t val = 0;

	// Clear the ADC result register by reading it once
	uint16_t dummy = ADC_VAL;
    1714:	84 b1       	in	r24, 0x04	; 4
    1716:	95 b1       	in	r25, 0x05	; 5

	// Select the ADC channel
	switch (channel)
    1718:	8e 2f       	mov	r24, r30
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	88 30       	cpi	r24, 0x08	; 8
    171e:	91 05       	cpc	r25, r1
    1720:	50 f5       	brcc	.+84     	; 0x1776 <ADC_Read+0x64>
    1722:	fc 01       	movw	r30, r24
    1724:	e6 5d       	subi	r30, 0xD6	; 214
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__tablejump2__>
	{
		case ADC_0:
		ADMUX = (ADMUX & 0xF8) | 0x00; // Clear the channel bits and set ADC0
    172c:	87 b1       	in	r24, 0x07	; 7
    172e:	88 7f       	andi	r24, 0xF8	; 248
    1730:	87 b9       	out	0x07, r24	; 7
		break;
    1732:	21 c0       	rjmp	.+66     	; 0x1776 <ADC_Read+0x64>
		case ADC_1:
		ADMUX = (ADMUX & 0xF8) | 0x01; // Clear the channel bits and set ADC1
    1734:	87 b1       	in	r24, 0x07	; 7
    1736:	88 7f       	andi	r24, 0xF8	; 248
    1738:	81 60       	ori	r24, 0x01	; 1
    173a:	87 b9       	out	0x07, r24	; 7
		break;
    173c:	1c c0       	rjmp	.+56     	; 0x1776 <ADC_Read+0x64>
		case ADC_2:
		ADMUX = (ADMUX & 0xF8) | 0x02; // Clear the channel bits and set ADC2
    173e:	87 b1       	in	r24, 0x07	; 7
    1740:	88 7f       	andi	r24, 0xF8	; 248
    1742:	82 60       	ori	r24, 0x02	; 2
    1744:	87 b9       	out	0x07, r24	; 7
		break;
    1746:	17 c0       	rjmp	.+46     	; 0x1776 <ADC_Read+0x64>
		case ADC_3:
		ADMUX = (ADMUX & 0xF8) | 0x03; // Clear the channel bits and set ADC3
    1748:	87 b1       	in	r24, 0x07	; 7
    174a:	88 7f       	andi	r24, 0xF8	; 248
    174c:	83 60       	ori	r24, 0x03	; 3
    174e:	87 b9       	out	0x07, r24	; 7
		break;
    1750:	12 c0       	rjmp	.+36     	; 0x1776 <ADC_Read+0x64>
		case ADC_4:
		ADMUX = (ADMUX & 0xF8) | 0x04; // Clear the channel bits and set ADC4
    1752:	87 b1       	in	r24, 0x07	; 7
    1754:	88 7f       	andi	r24, 0xF8	; 248
    1756:	84 60       	ori	r24, 0x04	; 4
    1758:	87 b9       	out	0x07, r24	; 7
		break;
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <ADC_Read+0x64>
		case ADC_5:
		ADMUX = (ADMUX & 0xF8) | 0x05; // Clear the channel bits and set ADC5
    175c:	87 b1       	in	r24, 0x07	; 7
    175e:	88 7f       	andi	r24, 0xF8	; 248
    1760:	85 60       	ori	r24, 0x05	; 5
    1762:	87 b9       	out	0x07, r24	; 7
		break;
    1764:	08 c0       	rjmp	.+16     	; 0x1776 <ADC_Read+0x64>
		case ADC_6:
		ADMUX = (ADMUX & 0xF8) | 0x06; // Clear the channel bits and set ADC6
    1766:	87 b1       	in	r24, 0x07	; 7
    1768:	88 7f       	andi	r24, 0xF8	; 248
    176a:	86 60       	ori	r24, 0x06	; 6
    176c:	87 b9       	out	0x07, r24	; 7
		break;
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <ADC_Read+0x64>
		case ADC_7:
		ADMUX = (ADMUX & 0xF8) | 0x07; // Clear the channel bits and set ADC7
    1770:	87 b1       	in	r24, 0x07	; 7
    1772:	87 60       	ori	r24, 0x07	; 7
    1774:	87 b9       	out	0x07, r24	; 7
		break;
	}

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
    1776:	86 b1       	in	r24, 0x06	; 6
    1778:	80 64       	ori	r24, 0x40	; 64
    177a:	86 b9       	out	0x06, r24	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
    177c:	36 99       	sbic	0x06, 6	; 6
    177e:	fe cf       	rjmp	.-4      	; 0x177c <ADC_Read+0x6a>

	// Read the converted value
	val = ADC_VAL;
    1780:	84 b1       	in	r24, 0x04	; 4
    1782:	95 b1       	in	r25, 0x05	; 5

	return val;
}
    1784:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

000009f4 <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 9f4:	44 23       	and	r20, r20
 9f6:	19 f0       	breq	.+6      	; 0x9fe <DIO_SetPinDirection+0xa>
 9f8:	41 30       	cpi	r20, 0x01	; 1
 9fa:	c9 f1       	breq	.+114    	; 0xa6e <DIO_SetPinDirection+0x7a>
 9fc:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	91 f0       	breq	.+36     	; 0xa26 <DIO_SetPinDirection+0x32>
 a02:	28 f0       	brcs	.+10     	; 0xa0e <DIO_SetPinDirection+0x1a>
 a04:	82 30       	cpi	r24, 0x02	; 2
 a06:	d9 f0       	breq	.+54     	; 0xa3e <DIO_SetPinDirection+0x4a>
 a08:	83 30       	cpi	r24, 0x03	; 3
 a0a:	29 f1       	breq	.+74     	; 0xa56 <DIO_SetPinDirection+0x62>
 a0c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 a0e:	2a b3       	in	r18, 0x1a	; 26
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_SetPinDirection+0x26>
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	6a 95       	dec	r22
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_SetPinDirection+0x22>
 a1e:	80 95       	com	r24
 a20:	82 23       	and	r24, r18
 a22:	8a bb       	out	0x1a, r24	; 26
			break;
 a24:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 a26:	27 b3       	in	r18, 0x17	; 23
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_SetPinDirection+0x3e>
 a2e:	88 0f       	add	r24, r24
 a30:	99 1f       	adc	r25, r25
 a32:	6a 95       	dec	r22
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_SetPinDirection+0x3a>
 a36:	80 95       	com	r24
 a38:	82 23       	and	r24, r18
 a3a:	87 bb       	out	0x17, r24	; 23
			break;
 a3c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 a3e:	24 b3       	in	r18, 0x14	; 20
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <DIO_SetPinDirection+0x56>
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	6a 95       	dec	r22
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <DIO_SetPinDirection+0x52>
 a4e:	80 95       	com	r24
 a50:	82 23       	and	r24, r18
 a52:	84 bb       	out	0x14, r24	; 20
			break;
 a54:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 a56:	21 b3       	in	r18, 0x11	; 17
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <DIO_SetPinDirection+0x6e>
 a5e:	88 0f       	add	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	6a 95       	dec	r22
 a64:	e2 f7       	brpl	.-8      	; 0xa5e <DIO_SetPinDirection+0x6a>
 a66:	80 95       	com	r24
 a68:	82 23       	and	r24, r18
 a6a:	81 bb       	out	0x11, r24	; 17
			break;
 a6c:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	89 f0       	breq	.+34     	; 0xa94 <DIO_SetPinDirection+0xa0>
 a72:	28 f0       	brcs	.+10     	; 0xa7e <DIO_SetPinDirection+0x8a>
 a74:	82 30       	cpi	r24, 0x02	; 2
 a76:	c9 f0       	breq	.+50     	; 0xaaa <DIO_SetPinDirection+0xb6>
 a78:	83 30       	cpi	r24, 0x03	; 3
 a7a:	11 f1       	breq	.+68     	; 0xac0 <DIO_SetPinDirection+0xcc>
 a7c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 a7e:	2a b3       	in	r18, 0x1a	; 26
 a80:	81 e0       	ldi	r24, 0x01	; 1
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <DIO_SetPinDirection+0x96>
 a86:	88 0f       	add	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	6a 95       	dec	r22
 a8c:	e2 f7       	brpl	.-8      	; 0xa86 <DIO_SetPinDirection+0x92>
 a8e:	82 2b       	or	r24, r18
 a90:	8a bb       	out	0x1a, r24	; 26
			break;
 a92:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 a94:	27 b3       	in	r18, 0x17	; 23
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_SetPinDirection+0xac>
 a9c:	88 0f       	add	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	6a 95       	dec	r22
 aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_SetPinDirection+0xa8>
 aa4:	82 2b       	or	r24, r18
 aa6:	87 bb       	out	0x17, r24	; 23
			break;
 aa8:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 aaa:	24 b3       	in	r18, 0x14	; 20
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_SetPinDirection+0xc2>
 ab2:	88 0f       	add	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	6a 95       	dec	r22
 ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_SetPinDirection+0xbe>
 aba:	82 2b       	or	r24, r18
 abc:	84 bb       	out	0x14, r24	; 20
			break;
 abe:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 ac0:	21 b3       	in	r18, 0x11	; 17
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_SetPinDirection+0xd8>
 ac8:	88 0f       	add	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	6a 95       	dec	r22
 ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_SetPinDirection+0xd4>
 ad0:	82 2b       	or	r24, r18
 ad2:	81 bb       	out	0x11, r24	; 17
 ad4:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

00000ad6 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 ad6:	44 23       	and	r20, r20
 ad8:	19 f0       	breq	.+6      	; 0xae0 <DIO_SetPinValue+0xa>
 ada:	41 30       	cpi	r20, 0x01	; 1
 adc:	c9 f1       	breq	.+114    	; 0xb50 <DIO_SetPinValue+0x7a>
 ade:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 ae0:	81 30       	cpi	r24, 0x01	; 1
 ae2:	91 f0       	breq	.+36     	; 0xb08 <DIO_SetPinValue+0x32>
 ae4:	28 f0       	brcs	.+10     	; 0xaf0 <DIO_SetPinValue+0x1a>
 ae6:	82 30       	cpi	r24, 0x02	; 2
 ae8:	d9 f0       	breq	.+54     	; 0xb20 <DIO_SetPinValue+0x4a>
 aea:	83 30       	cpi	r24, 0x03	; 3
 aec:	29 f1       	breq	.+74     	; 0xb38 <DIO_SetPinValue+0x62>
 aee:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 af0:	2b b3       	in	r18, 0x1b	; 27
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_SetPinValue+0x26>
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	6a 95       	dec	r22
 afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_SetPinValue+0x22>
 b00:	80 95       	com	r24
 b02:	82 23       	and	r24, r18
 b04:	8b bb       	out	0x1b, r24	; 27
			break;
 b06:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 b08:	28 b3       	in	r18, 0x18	; 24
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_SetPinValue+0x3e>
 b10:	88 0f       	add	r24, r24
 b12:	99 1f       	adc	r25, r25
 b14:	6a 95       	dec	r22
 b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_SetPinValue+0x3a>
 b18:	80 95       	com	r24
 b1a:	82 23       	and	r24, r18
 b1c:	88 bb       	out	0x18, r24	; 24
			break;
 b1e:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 b20:	25 b3       	in	r18, 0x15	; 21
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_SetPinValue+0x56>
 b28:	88 0f       	add	r24, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	6a 95       	dec	r22
 b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_SetPinValue+0x52>
 b30:	80 95       	com	r24
 b32:	82 23       	and	r24, r18
 b34:	85 bb       	out	0x15, r24	; 21
			break;
 b36:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 b38:	22 b3       	in	r18, 0x12	; 18
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_SetPinValue+0x6e>
 b40:	88 0f       	add	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	6a 95       	dec	r22
 b46:	e2 f7       	brpl	.-8      	; 0xb40 <DIO_SetPinValue+0x6a>
 b48:	80 95       	com	r24
 b4a:	82 23       	and	r24, r18
 b4c:	82 bb       	out	0x12, r24	; 18
			break;
 b4e:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 b50:	81 30       	cpi	r24, 0x01	; 1
 b52:	89 f0       	breq	.+34     	; 0xb76 <DIO_SetPinValue+0xa0>
 b54:	28 f0       	brcs	.+10     	; 0xb60 <DIO_SetPinValue+0x8a>
 b56:	82 30       	cpi	r24, 0x02	; 2
 b58:	c9 f0       	breq	.+50     	; 0xb8c <DIO_SetPinValue+0xb6>
 b5a:	83 30       	cpi	r24, 0x03	; 3
 b5c:	11 f1       	breq	.+68     	; 0xba2 <DIO_SetPinValue+0xcc>
 b5e:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 b60:	2b b3       	in	r18, 0x1b	; 27
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_SetPinValue+0x96>
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	6a 95       	dec	r22
 b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_SetPinValue+0x92>
 b70:	82 2b       	or	r24, r18
 b72:	8b bb       	out	0x1b, r24	; 27
			break;
 b74:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 b76:	28 b3       	in	r18, 0x18	; 24
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_SetPinValue+0xac>
 b7e:	88 0f       	add	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	6a 95       	dec	r22
 b84:	e2 f7       	brpl	.-8      	; 0xb7e <DIO_SetPinValue+0xa8>
 b86:	82 2b       	or	r24, r18
 b88:	88 bb       	out	0x18, r24	; 24
			break;
 b8a:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 b8c:	25 b3       	in	r18, 0x15	; 21
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <DIO_SetPinValue+0xc2>
 b94:	88 0f       	add	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	6a 95       	dec	r22
 b9a:	e2 f7       	brpl	.-8      	; 0xb94 <DIO_SetPinValue+0xbe>
 b9c:	82 2b       	or	r24, r18
 b9e:	85 bb       	out	0x15, r24	; 21
			break;
 ba0:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 ba2:	22 b3       	in	r18, 0x12	; 18
 ba4:	81 e0       	ldi	r24, 0x01	; 1
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_SetPinValue+0xd8>
 baa:	88 0f       	add	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	6a 95       	dec	r22
 bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_SetPinValue+0xd4>
 bb2:	82 2b       	or	r24, r18
 bb4:	82 bb       	out	0x12, r24	; 18
 bb6:	08 95       	ret

Disassembly of section .text.External_Interrupt0_Initalize:

00001b24 <External_Interrupt0_Initalize>:
#include "Interrupt_Private.h"

void External_Interrupt0_Initalize(int0_sense sense)
{
	// Define interrupt pin INT0 as input 
	CLR_BIT(DDRD,2);	
    1b24:	91 b3       	in	r25, 0x11	; 17
    1b26:	9b 7f       	andi	r25, 0xFB	; 251
    1b28:	91 bb       	out	0x11, r25	; 17
	// Disable global interrupt while initialization 
	cli();//Clear interrupt, CLR_BIT(SREG,7);
    1b2a:	f8 94       	cli
	// Choose sensing method
	switch(sense)
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	69 f0       	breq	.+26     	; 0x1b4a <External_Interrupt0_Initalize+0x26>
    1b30:	28 f0       	brcs	.+10     	; 0x1b3c <External_Interrupt0_Initalize+0x18>
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	c1 f0       	breq	.+48     	; 0x1b66 <External_Interrupt0_Initalize+0x42>
    1b36:	83 30       	cpi	r24, 0x03	; 3
    1b38:	79 f0       	breq	.+30     	; 0x1b58 <External_Interrupt0_Initalize+0x34>
    1b3a:	1b c0       	rjmp	.+54     	; 0x1b72 <External_Interrupt0_Initalize+0x4e>
	{
		case INT0_LOW:
		CLR_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 0 0
    1b3c:	85 b7       	in	r24, 0x35	; 53
    1b3e:	8d 7f       	andi	r24, 0xFD	; 253
    1b40:	85 bf       	out	0x35, r24	; 53
    1b42:	85 b7       	in	r24, 0x35	; 53
    1b44:	8e 7f       	andi	r24, 0xFE	; 254
    1b46:	85 bf       	out	0x35, r24	; 53
		break;
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <External_Interrupt0_Initalize+0x4e>
		case INT0_HIGH:
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 0 1
    1b4a:	85 b7       	in	r24, 0x35	; 53
    1b4c:	8d 7f       	andi	r24, 0xFD	; 253
    1b4e:	85 bf       	out	0x35, r24	; 53
    1b50:	85 b7       	in	r24, 0x35	; 53
    1b52:	81 60       	ori	r24, 0x01	; 1
    1b54:	85 bf       	out	0x35, r24	; 53
		break;
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <External_Interrupt0_Initalize+0x4e>
		case INT0_FALLING:
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 1 0
    1b58:	85 b7       	in	r24, 0x35	; 53
    1b5a:	82 60       	ori	r24, 0x02	; 2
    1b5c:	85 bf       	out	0x35, r24	; 53
    1b5e:	85 b7       	in	r24, 0x35	; 53
    1b60:	8e 7f       	andi	r24, 0xFE	; 254
    1b62:	85 bf       	out	0x35, r24	; 53
		break;
    1b64:	06 c0       	rjmp	.+12     	; 0x1b72 <External_Interrupt0_Initalize+0x4e>
		case INT0_RISING:
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 1 1
    1b66:	85 b7       	in	r24, 0x35	; 53
    1b68:	82 60       	ori	r24, 0x02	; 2
    1b6a:	85 bf       	out	0x35, r24	; 53
    1b6c:	85 b7       	in	r24, 0x35	; 53
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	85 bf       	out	0x35, r24	; 53
		break;
		
	}
	// Enable peripheral interrupt 
	SET_BIT(GICR, INT0);
    1b72:	8b b7       	in	r24, 0x3b	; 59
    1b74:	80 64       	ori	r24, 0x40	; 64
    1b76:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupt after initialization 
	sei();//Set interrupt, SET_BIT(SREG,7);
    1b78:	78 94       	sei
    1b7a:	08 95       	ret

Disassembly of section .text.UART_Initialize_WithoutInterrupt:

000003a2 <UART_Initialize_WithoutInterrupt>:
uart_status UART_Receive_Character(uint8_t* data)
{
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}
 3a2:	0f 93       	push	r16
 3a4:	31 b3       	in	r19, 0x11	; 17
 3a6:	32 60       	ori	r19, 0x02	; 2
 3a8:	31 bb       	out	0x11, r19	; 17
 3aa:	31 b3       	in	r19, 0x11	; 17
 3ac:	3e 7f       	andi	r19, 0xFE	; 254
 3ae:	31 bb       	out	0x11, r19	; 17
 3b0:	3a b1       	in	r19, 0x0a	; 10
 3b2:	38 61       	ori	r19, 0x18	; 24
 3b4:	3a b9       	out	0x0a, r19	; 10
 3b6:	66 23       	and	r22, r22
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <UART_Initialize_WithoutInterrupt+0x1e>
 3ba:	61 30       	cpi	r22, 0x01	; 1
 3bc:	29 f0       	breq	.+10     	; 0x3c8 <UART_Initialize_WithoutInterrupt+0x26>
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <UART_Initialize_WithoutInterrupt+0x2c>
 3c0:	30 b5       	in	r19, 0x20	; 32
 3c2:	3f 77       	andi	r19, 0x7F	; 127
 3c4:	30 bd       	out	0x20, r19	; 32
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <UART_Initialize_WithoutInterrupt+0x2c>
 3c8:	30 b5       	in	r19, 0x20	; 32
 3ca:	30 68       	ori	r19, 0x80	; 128
 3cc:	30 bd       	out	0x20, r19	; 32
 3ce:	22 30       	cpi	r18, 0x02	; 2
 3d0:	f9 f0       	breq	.+62     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3d2:	28 f4       	brcc	.+10     	; 0x3de <UART_Initialize_WithoutInterrupt+0x3c>
 3d4:	22 23       	and	r18, r18
 3d6:	41 f0       	breq	.+16     	; 0x3e8 <UART_Initialize_WithoutInterrupt+0x46>
 3d8:	21 30       	cpi	r18, 0x01	; 1
 3da:	81 f0       	breq	.+32     	; 0x3fc <UART_Initialize_WithoutInterrupt+0x5a>
 3dc:	36 c0       	rjmp	.+108    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3de:	23 30       	cpi	r18, 0x03	; 3
 3e0:	09 f1       	breq	.+66     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3e2:	24 30       	cpi	r18, 0x04	; 4
 3e4:	49 f1       	breq	.+82     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3e6:	31 c0       	rjmp	.+98     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3e8:	2a b1       	in	r18, 0x0a	; 10
 3ea:	2b 7f       	andi	r18, 0xFB	; 251
 3ec:	2a b9       	out	0x0a, r18	; 10
 3ee:	20 b5       	in	r18, 0x20	; 32
 3f0:	2b 7f       	andi	r18, 0xFB	; 251
 3f2:	20 bd       	out	0x20, r18	; 32
 3f4:	20 b5       	in	r18, 0x20	; 32
 3f6:	2d 7f       	andi	r18, 0xFD	; 253
 3f8:	20 bd       	out	0x20, r18	; 32
 3fa:	27 c0       	rjmp	.+78     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3fc:	2a b1       	in	r18, 0x0a	; 10
 3fe:	2b 7f       	andi	r18, 0xFB	; 251
 400:	2a b9       	out	0x0a, r18	; 10
 402:	20 b5       	in	r18, 0x20	; 32
 404:	2b 7f       	andi	r18, 0xFB	; 251
 406:	20 bd       	out	0x20, r18	; 32
 408:	20 b5       	in	r18, 0x20	; 32
 40a:	22 60       	ori	r18, 0x02	; 2
 40c:	20 bd       	out	0x20, r18	; 32
 40e:	1d c0       	rjmp	.+58     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 410:	2a b1       	in	r18, 0x0a	; 10
 412:	2b 7f       	andi	r18, 0xFB	; 251
 414:	2a b9       	out	0x0a, r18	; 10
 416:	20 b5       	in	r18, 0x20	; 32
 418:	24 60       	ori	r18, 0x04	; 4
 41a:	20 bd       	out	0x20, r18	; 32
 41c:	20 b5       	in	r18, 0x20	; 32
 41e:	2d 7f       	andi	r18, 0xFD	; 253
 420:	20 bd       	out	0x20, r18	; 32
 422:	13 c0       	rjmp	.+38     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 424:	2a b1       	in	r18, 0x0a	; 10
 426:	2b 7f       	andi	r18, 0xFB	; 251
 428:	2a b9       	out	0x0a, r18	; 10
 42a:	20 b5       	in	r18, 0x20	; 32
 42c:	24 60       	ori	r18, 0x04	; 4
 42e:	20 bd       	out	0x20, r18	; 32
 430:	20 b5       	in	r18, 0x20	; 32
 432:	22 60       	ori	r18, 0x02	; 2
 434:	20 bd       	out	0x20, r18	; 32
 436:	09 c0       	rjmp	.+18     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 438:	2a b1       	in	r18, 0x0a	; 10
 43a:	24 60       	ori	r18, 0x04	; 4
 43c:	2a b9       	out	0x0a, r18	; 10
 43e:	20 b5       	in	r18, 0x20	; 32
 440:	24 60       	ori	r18, 0x04	; 4
 442:	20 bd       	out	0x20, r18	; 32
 444:	20 b5       	in	r18, 0x20	; 32
 446:	22 60       	ori	r18, 0x02	; 2
 448:	20 bd       	out	0x20, r18	; 32
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	59 f0       	breq	.+22     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 44e:	18 f0       	brcs	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 450:	42 30       	cpi	r20, 0x02	; 2
 452:	79 f0       	breq	.+30     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 454:	14 c0       	rjmp	.+40     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 456:	20 b5       	in	r18, 0x20	; 32
 458:	2f 7d       	andi	r18, 0xDF	; 223
 45a:	20 bd       	out	0x20, r18	; 32
 45c:	20 b5       	in	r18, 0x20	; 32
 45e:	2f 7e       	andi	r18, 0xEF	; 239
 460:	20 bd       	out	0x20, r18	; 32
 462:	0d c0       	rjmp	.+26     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 464:	20 b5       	in	r18, 0x20	; 32
 466:	20 62       	ori	r18, 0x20	; 32
 468:	20 bd       	out	0x20, r18	; 32
 46a:	20 b5       	in	r18, 0x20	; 32
 46c:	2f 7e       	andi	r18, 0xEF	; 239
 46e:	20 bd       	out	0x20, r18	; 32
 470:	06 c0       	rjmp	.+12     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 472:	20 b5       	in	r18, 0x20	; 32
 474:	20 62       	ori	r18, 0x20	; 32
 476:	20 bd       	out	0x20, r18	; 32
 478:	20 b5       	in	r18, 0x20	; 32
 47a:	20 61       	ori	r18, 0x10	; 16
 47c:	20 bd       	out	0x20, r18	; 32
 47e:	00 23       	and	r16, r16
 480:	19 f0       	breq	.+6      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 482:	01 30       	cpi	r16, 0x01	; 1
 484:	29 f0       	breq	.+10     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 486:	07 c0       	rjmp	.+14     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 488:	20 b5       	in	r18, 0x20	; 32
 48a:	27 7f       	andi	r18, 0xF7	; 247
 48c:	20 bd       	out	0x20, r18	; 32
 48e:	03 c0       	rjmp	.+6      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 490:	20 b5       	in	r18, 0x20	; 32
 492:	28 60       	ori	r18, 0x08	; 8
 494:	20 bd       	out	0x20, r18	; 32
 496:	9c 01       	movw	r18, r24
 498:	22 95       	swap	r18
 49a:	32 95       	swap	r19
 49c:	30 7f       	andi	r19, 0xF0	; 240
 49e:	32 27       	eor	r19, r18
 4a0:	20 7f       	andi	r18, 0xF0	; 240
 4a2:	32 27       	eor	r19, r18
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	71 e7       	ldi	r23, 0x71	; 113
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 04 10 	call	0x2008	; 0x2008 <__divmodsi4>
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	31 09       	sbc	r19, r1
 4b8:	29 b9       	out	0x09, r18	; 9
 4ba:	30 bd       	out	0x20, r19	; 32
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

Disassembly of section .text.UART_Transmit_Character:

0000238e <UART_Transmit_Character>:

}
uart_status UART_Transmit_Character(uint8_t data)
{

	while ((!(UCSRA & (1 << UDRE))) ) {
    238e:	5d 9b       	sbis	0x0b, 5	; 11
    2390:	fe cf       	rjmp	.-4      	; 0x238e <UART_Transmit_Character>
		// Wait until the transmit buffer is empty
	}
	
	UDR = data;
    2392:	8c b9       	out	0x0c, r24	; 12
	//while (((UCSRA>>TXC)&0x01) != 1);//Wait until flag of transmitting received
	return UART_OK;
}
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	08 95       	ret

Disassembly of section .text.UART_Transmit_Word:

000021e6 <UART_Transmit_Word>:
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}

uart_status UART_Transmit_Word(uint16_t data){
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	d8 2f       	mov	r29, r24
	uint8_t high_byte = (data >> 8) & 0xFF;
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
    21ec:	89 2f       	mov	r24, r25
    21ee:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_Transmit_Character>
    21f2:	c8 2f       	mov	r28, r24
	s|= UART_Transmit_Character(low_byte);
    21f4:	8d 2f       	mov	r24, r29
    21f6:	0e 94 c7 11 	call	0x238e	; 0x238e <UART_Transmit_Character>
	return s;

}
    21fa:	8c 2b       	or	r24, r28
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

000018d6 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    18dc:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    18e0:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <pucAlignedHeap.2045>
    18e4:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <pucAlignedHeap.2045+0x1>
    18e8:	89 2b       	or	r24, r25
    18ea:	31 f4       	brne	.+12     	; 0x18f8 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    18ec:	8f e6       	ldi	r24, 0x6F	; 111
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <pucAlignedHeap.2045+0x1>
    18f4:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <pucAlignedHeap.2045>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    18f8:	20 91 d5 06 	lds	r18, 0x06D5	; 0x8006d5 <xNextFreeByte>
    18fc:	30 91 d6 06 	lds	r19, 0x06D6	; 0x8006d6 <xNextFreeByte+0x1>
    1900:	c9 01       	movw	r24, r18
    1902:	8c 0f       	add	r24, r28
    1904:	9d 1f       	adc	r25, r29
    1906:	8b 3d       	cpi	r24, 0xDB	; 219
    1908:	45 e0       	ldi	r20, 0x05	; 5
    190a:	94 07       	cpc	r25, r20
    190c:	70 f4       	brcc	.+28     	; 0x192a <pvPortMalloc+0x54>
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	70 f4       	brcc	.+28     	; 0x1930 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1914:	c0 91 d3 06 	lds	r28, 0x06D3	; 0x8006d3 <pucAlignedHeap.2045>
    1918:	d0 91 d4 06 	lds	r29, 0x06D4	; 0x8006d4 <pucAlignedHeap.2045+0x1>
    191c:	c2 0f       	add	r28, r18
    191e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    1920:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <xNextFreeByte+0x1>
    1924:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <xNextFreeByte>
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    192a:	c0 e0       	ldi	r28, 0x00	; 0
    192c:	d0 e0       	ldi	r29, 0x00	; 0
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <pvPortMalloc+0x5e>
    1930:	c0 e0       	ldi	r28, 0x00	; 0
    1932:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1934:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1938:	ce 01       	movw	r24, r28
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

Disassembly of section .text.vPortFree:

000023dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    23dc:	08 95       	ret

Disassembly of section .text.vListInitialise:

00002202 <vListInitialise>:
 * all the API functions to use the MPU wrappers.  That should only be done when
 * task.h is included from an application file. */
#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE

#include "FreeRTOS.h"
#include "list.h"
    2202:	fc 01       	movw	r30, r24

/* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
 * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
 * defined for the header files above, but not in this file, in order to
    2204:	03 96       	adiw	r24, 0x03	; 3
    2206:	92 83       	std	Z+2, r25	; 0x02
    2208:	81 83       	std	Z+1, r24	; 0x01
 * generate the correct privileged Vs unprivileged linkage and placement. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */

/*-----------------------------------------------------------
    220a:	2f ef       	ldi	r18, 0xFF	; 255
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	34 83       	std	Z+4, r19	; 0x04
    2210:	23 83       	std	Z+3, r18	; 0x03
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
    2212:	96 83       	std	Z+6, r25	; 0x06
    2214:	85 83       	std	Z+5, r24	; 0x05
{
    2216:	90 87       	std	Z+8, r25	; 0x08
    2218:	87 83       	std	Z+7, r24	; 0x07
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
    221a:	10 82       	st	Z, r1
    221c:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

000023b6 <vListInitialiseItem>:
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    23b6:	fc 01       	movw	r30, r24
    23b8:	11 86       	std	Z+9, r1	; 0x09
    23ba:	10 86       	std	Z+8, r1	; 0x08
    23bc:	08 95       	ret

Disassembly of section .text.vListInsertEnd:

00001e6c <vListInsertEnd>:
    {
        pxList->xListEnd.pvOwner = NULL;
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	9c 01       	movw	r18, r24
    1e72:	fb 01       	movw	r30, r22

    1e74:	dc 01       	movw	r26, r24
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	cd 91       	ld	r28, X+
    1e7a:	dc 91       	ld	r29, X
    1e7c:	12 97       	sbiw	r26, 0x02	; 2
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1e7e:	d3 83       	std	Z+3, r29	; 0x03
    1e80:	c2 83       	std	Z+2, r28	; 0x02
    /* Make sure the list item is not recorded as being on a list. */
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	9d 81       	ldd	r25, Y+5	; 0x05
    1e86:	95 83       	std	Z+5, r25	; 0x05
    1e88:	84 83       	std	Z+4, r24	; 0x04
    pxItem->pxContainer = NULL;

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	dc 01       	movw	r26, r24
    1e90:	13 96       	adiw	r26, 0x03	; 3
    1e92:	7c 93       	st	X, r23
    1e94:	6e 93       	st	-X, r22
    1e96:	12 97       	sbiw	r26, 0x02	; 2
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    1e98:	7d 83       	std	Y+5, r23	; 0x05
    1e9a:	6c 83       	std	Y+4, r22	; 0x04
}
/*-----------------------------------------------------------*/

    1e9c:	31 87       	std	Z+9, r19	; 0x09
    1e9e:	20 87       	std	Z+8, r18	; 0x08
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	80 83       	st	Z, r24
{
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	08 95       	ret

Disassembly of section .text.vListInsert:

000019a8 <vListInsert>:
    ListItem_t * const pxIndex = pxList->pxIndex;

    /* Only effective when configASSERT() is also defined, these tests may catch
     * the list data structures being overwritten in memory.  They will not catch
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	eb 01       	movw	r28, r22
     * data errors caused by incorrect configuration or use of FreeRTOS. */
    listTEST_LIST_INTEGRITY( pxList );
    19ae:	48 81       	ld	r20, Y
    19b0:	59 81       	ldd	r21, Y+1	; 0x01

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    pxIndex->pxPrevious = pxNewListItem;

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    19b2:	4f 3f       	cpi	r20, 0xFF	; 255
    19b4:	2f ef       	ldi	r18, 0xFF	; 255
    19b6:	52 07       	cpc	r21, r18
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <vListInsert+0x1a>

    ( pxList->uxNumberOfItems )++;
    19ba:	fc 01       	movw	r30, r24
    19bc:	a7 81       	ldd	r26, Z+7	; 0x07
    19be:	b0 85       	ldd	r27, Z+8	; 0x08
    19c0:	0d c0       	rjmp	.+26     	; 0x19dc <vListInsert+0x34>
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    19c2:	dc 01       	movw	r26, r24
    19c4:	13 96       	adiw	r26, 0x03	; 3
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <vListInsert+0x22>
    19c8:	df 01       	movw	r26, r30
    19ca:	12 96       	adiw	r26, 0x02	; 2
    19cc:	ed 91       	ld	r30, X+
    19ce:	fc 91       	ld	r31, X
    19d0:	13 97       	sbiw	r26, 0x03	; 3
    19d2:	20 81       	ld	r18, Z
    19d4:	31 81       	ldd	r19, Z+1	; 0x01
    19d6:	42 17       	cp	r20, r18
    19d8:	53 07       	cpc	r21, r19
    19da:	b0 f7       	brcc	.-20     	; 0x19c8 <vListInsert+0x20>
    else
    {
        /* *** NOTE ***********************************************************
        *  If you find your application is crashing here then likely causes are
        *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
        *  more tips, and ensure configASSERT() is defined!
    19dc:	12 96       	adiw	r26, 0x02	; 2
    19de:	ed 91       	ld	r30, X+
    19e0:	fc 91       	ld	r31, X
    19e2:	13 97       	sbiw	r26, 0x03	; 3
    19e4:	fb 83       	std	Y+3, r31	; 0x03
    19e6:	ea 83       	std	Y+2, r30	; 0x02
        *  https://www.FreeRTOS.org/a00110.html#configASSERT
    19e8:	d5 83       	std	Z+5, r29	; 0x05
    19ea:	c4 83       	std	Z+4, r28	; 0x04
        *
    19ec:	bd 83       	std	Y+5, r27	; 0x05
    19ee:	ac 83       	std	Y+4, r26	; 0x04
        *   1) Stack overflow -
    19f0:	13 96       	adiw	r26, 0x03	; 3
    19f2:	dc 93       	st	X, r29
    19f4:	ce 93       	st	-X, r28
    19f6:	12 97       	sbiw	r26, 0x02	; 2
        *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
        *   2) Incorrect interrupt priority assignment, especially on Cortex-M
        *      parts where numerically high priority values denote low actual
        *      interrupt priorities, which can seem counter intuitive.  See
    19f8:	99 87       	std	Y+9, r25	; 0x09
    19fa:	88 87       	std	Y+8, r24	; 0x08
        *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
        *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 81       	ld	r18, Z
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	20 83       	st	Z, r18
        *      https://www.FreeRTOS.org/a00110.html
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	08 95       	ret

Disassembly of section .text.uxListRemove:

00001c70 <uxListRemove>:
        *   3) Calling an API function from within a critical section or when
        *      the scheduler is suspended, or calling an API function that does
        *      not end in "FromISR" from an interrupt.
        *   4) Using a queue or semaphore before it has been initialised or
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	fc 01       	movw	r30, r24
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
    1c76:	a0 85       	ldd	r26, Z+8	; 0x08
    1c78:	b1 85       	ldd	r27, Z+9	; 0x09
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
    1c7a:	c2 81       	ldd	r28, Z+2	; 0x02
    1c7c:	d3 81       	ldd	r29, Z+3	; 0x03
    1c7e:	84 81       	ldd	r24, Z+4	; 0x04
    1c80:	95 81       	ldd	r25, Z+5	; 0x05
    1c82:	9d 83       	std	Y+5, r25	; 0x05
    1c84:	8c 83       	std	Y+4, r24	; 0x04
        **********************************************************************/
    1c86:	c4 81       	ldd	r28, Z+4	; 0x04
    1c88:	d5 81       	ldd	r29, Z+5	; 0x05
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	9b 83       	std	Y+3, r25	; 0x03
    1c90:	8a 83       	std	Y+2, r24	; 0x02

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
        {
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    1c92:	11 96       	adiw	r26, 0x01	; 1
    1c94:	8d 91       	ld	r24, X+
    1c96:	9c 91       	ld	r25, X
    1c98:	12 97       	sbiw	r26, 0x02	; 2
    1c9a:	e8 17       	cp	r30, r24
    1c9c:	f9 07       	cpc	r31, r25
    1c9e:	31 f4       	brne	.+12     	; 0x1cac <uxListRemove+0x3c>
    }

    1ca0:	84 81       	ldd	r24, Z+4	; 0x04
    1ca2:	95 81       	ldd	r25, Z+5	; 0x05
    1ca4:	12 96       	adiw	r26, 0x02	; 2
    1ca6:	9c 93       	st	X, r25
    1ca8:	8e 93       	st	-X, r24
    1caa:	11 97       	sbiw	r26, 0x01	; 1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    pxNewListItem->pxPrevious = pxIterator;
    pxIterator->pxNext = pxNewListItem;

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    1cac:	11 86       	std	Z+9, r1	; 0x09
    1cae:	10 86       	std	Z+8, r1	; 0x08
    pxNewListItem->pxContainer = pxList;
    1cb0:	8c 91       	ld	r24, X
    1cb2:	81 50       	subi	r24, 0x01	; 1
    1cb4:	8c 93       	st	X, r24

    ( pxList->uxNumberOfItems )++;
    1cb6:	8c 91       	ld	r24, X
}
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

000022a6 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    22a6:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    22a8:	89 ef       	ldi	r24, 0xF9	; 249
    22aa:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    22ac:	8b e0       	ldi	r24, 0x0B	; 11
    22ae:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    22b0:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    22b2:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    22b4:	89 bf       	out	0x39, r24	; 57
    22b6:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000bb8 <pxPortInitialiseStack>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
 bb8:	31 e1       	ldi	r19, 0x11	; 17
 bba:	fc 01       	movw	r30, r24
 bbc:	30 83       	st	Z, r19
 bbe:	31 97       	sbiw	r30, 0x01	; 1
 bc0:	22 e2       	ldi	r18, 0x22	; 34
 bc2:	20 83       	st	Z, r18
 bc4:	31 97       	sbiw	r30, 0x01	; 1
 bc6:	a3 e3       	ldi	r26, 0x33	; 51
 bc8:	a0 83       	st	Z, r26
 bca:	31 97       	sbiw	r30, 0x01	; 1
 bcc:	60 83       	st	Z, r22
 bce:	31 97       	sbiw	r30, 0x01	; 1
 bd0:	70 83       	st	Z, r23
 bd2:	31 97       	sbiw	r30, 0x01	; 1
 bd4:	10 82       	st	Z, r1
 bd6:	31 97       	sbiw	r30, 0x01	; 1
 bd8:	60 e8       	ldi	r22, 0x80	; 128
 bda:	60 83       	st	Z, r22
 bdc:	31 97       	sbiw	r30, 0x01	; 1
 bde:	10 82       	st	Z, r1
 be0:	31 97       	sbiw	r30, 0x01	; 1
 be2:	62 e0       	ldi	r22, 0x02	; 2
 be4:	60 83       	st	Z, r22
 be6:	31 97       	sbiw	r30, 0x01	; 1
 be8:	63 e0       	ldi	r22, 0x03	; 3
 bea:	60 83       	st	Z, r22
 bec:	31 97       	sbiw	r30, 0x01	; 1
 bee:	64 e0       	ldi	r22, 0x04	; 4
 bf0:	60 83       	st	Z, r22
 bf2:	31 97       	sbiw	r30, 0x01	; 1
 bf4:	65 e0       	ldi	r22, 0x05	; 5
 bf6:	60 83       	st	Z, r22
 bf8:	31 97       	sbiw	r30, 0x01	; 1
 bfa:	66 e0       	ldi	r22, 0x06	; 6
 bfc:	60 83       	st	Z, r22
 bfe:	31 97       	sbiw	r30, 0x01	; 1
 c00:	67 e0       	ldi	r22, 0x07	; 7
 c02:	60 83       	st	Z, r22
 c04:	31 97       	sbiw	r30, 0x01	; 1
 c06:	68 e0       	ldi	r22, 0x08	; 8
 c08:	60 83       	st	Z, r22
 c0a:	31 97       	sbiw	r30, 0x01	; 1
 c0c:	69 e0       	ldi	r22, 0x09	; 9
 c0e:	60 83       	st	Z, r22
 c10:	31 97       	sbiw	r30, 0x01	; 1
 c12:	60 e1       	ldi	r22, 0x10	; 16
 c14:	60 83       	st	Z, r22
 c16:	31 97       	sbiw	r30, 0x01	; 1
 c18:	30 83       	st	Z, r19
 c1a:	31 97       	sbiw	r30, 0x01	; 1
 c1c:	32 e1       	ldi	r19, 0x12	; 18
 c1e:	30 83       	st	Z, r19
 c20:	31 97       	sbiw	r30, 0x01	; 1
 c22:	33 e1       	ldi	r19, 0x13	; 19
 c24:	30 83       	st	Z, r19
 c26:	31 97       	sbiw	r30, 0x01	; 1
 c28:	34 e1       	ldi	r19, 0x14	; 20
 c2a:	30 83       	st	Z, r19
 c2c:	31 97       	sbiw	r30, 0x01	; 1
 c2e:	35 e1       	ldi	r19, 0x15	; 21
 c30:	30 83       	st	Z, r19
 c32:	31 97       	sbiw	r30, 0x01	; 1
 c34:	36 e1       	ldi	r19, 0x16	; 22
 c36:	30 83       	st	Z, r19
 c38:	31 97       	sbiw	r30, 0x01	; 1
 c3a:	37 e1       	ldi	r19, 0x17	; 23
 c3c:	30 83       	st	Z, r19
 c3e:	31 97       	sbiw	r30, 0x01	; 1
 c40:	38 e1       	ldi	r19, 0x18	; 24
 c42:	30 83       	st	Z, r19
 c44:	31 97       	sbiw	r30, 0x01	; 1
 c46:	39 e1       	ldi	r19, 0x19	; 25
 c48:	30 83       	st	Z, r19
 c4a:	31 97       	sbiw	r30, 0x01	; 1
 c4c:	30 e2       	ldi	r19, 0x20	; 32
 c4e:	30 83       	st	Z, r19
 c50:	31 97       	sbiw	r30, 0x01	; 1
 c52:	31 e2       	ldi	r19, 0x21	; 33
 c54:	30 83       	st	Z, r19
 c56:	31 97       	sbiw	r30, 0x01	; 1
 c58:	20 83       	st	Z, r18
 c5a:	31 97       	sbiw	r30, 0x01	; 1
 c5c:	23 e2       	ldi	r18, 0x23	; 35
 c5e:	20 83       	st	Z, r18
 c60:	31 97       	sbiw	r30, 0x01	; 1
 c62:	40 83       	st	Z, r20
 c64:	31 97       	sbiw	r30, 0x01	; 1
 c66:	50 83       	st	Z, r21
 c68:	31 97       	sbiw	r30, 0x01	; 1
 c6a:	26 e2       	ldi	r18, 0x26	; 38
 c6c:	20 83       	st	Z, r18
 c6e:	31 97       	sbiw	r30, 0x01	; 1
 c70:	27 e2       	ldi	r18, 0x27	; 39
 c72:	20 83       	st	Z, r18
 c74:	31 97       	sbiw	r30, 0x01	; 1
 c76:	28 e2       	ldi	r18, 0x28	; 40
 c78:	20 83       	st	Z, r18
 c7a:	31 97       	sbiw	r30, 0x01	; 1
 c7c:	29 e2       	ldi	r18, 0x29	; 41
 c7e:	20 83       	st	Z, r18
 c80:	31 97       	sbiw	r30, 0x01	; 1
 c82:	20 e3       	ldi	r18, 0x30	; 48
 c84:	20 83       	st	Z, r18
 c86:	31 97       	sbiw	r30, 0x01	; 1
 c88:	21 e3       	ldi	r18, 0x31	; 49
 c8a:	20 83       	st	Z, r18
 c8c:	86 97       	sbiw	r24, 0x26	; 38
 c8e:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00001a0a <xPortStartScheduler>:
    1a0a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <prvSetupTimerInterrupt>
    1a0e:	a0 91 e1 06 	lds	r26, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    1a12:	b0 91 e2 06 	lds	r27, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    1a16:	cd 91       	ld	r28, X+
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	dd 91       	ld	r29, X+
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	7f 91       	pop	r23
    1a30:	6f 91       	pop	r22
    1a32:	5f 91       	pop	r21
    1a34:	4f 91       	pop	r20
    1a36:	3f 91       	pop	r19
    1a38:	2f 91       	pop	r18
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	bf 90       	pop	r11
    1a48:	af 90       	pop	r10
    1a4a:	9f 90       	pop	r9
    1a4c:	8f 90       	pop	r8
    1a4e:	7f 90       	pop	r7
    1a50:	6f 90       	pop	r6
    1a52:	5f 90       	pop	r5
    1a54:	4f 90       	pop	r4
    1a56:	3f 90       	pop	r3
    1a58:	2f 90       	pop	r2
    1a5a:	1f 90       	pop	r1
    1a5c:	0f 90       	pop	r0
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	0f 90       	pop	r0
    1a62:	08 95       	ret
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	08 95       	ret

Disassembly of section .text.vPortEndScheduler:

000023de <vPortEndScheduler>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    23de:	08 95       	ret

Disassembly of section .text.vPortYield:

00000f08 <vPortYield>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
 f08:	0f 92       	push	r0
 f0a:	0f b6       	in	r0, 0x3f	; 63
 f0c:	f8 94       	cli
 f0e:	0f 92       	push	r0
 f10:	1f 92       	push	r1
 f12:	11 24       	eor	r1, r1
 f14:	2f 92       	push	r2
 f16:	3f 92       	push	r3
 f18:	4f 92       	push	r4
 f1a:	5f 92       	push	r5
 f1c:	6f 92       	push	r6
 f1e:	7f 92       	push	r7
 f20:	8f 92       	push	r8
 f22:	9f 92       	push	r9
 f24:	af 92       	push	r10
 f26:	bf 92       	push	r11
 f28:	cf 92       	push	r12
 f2a:	df 92       	push	r13
 f2c:	ef 92       	push	r14
 f2e:	ff 92       	push	r15
 f30:	0f 93       	push	r16
 f32:	1f 93       	push	r17
 f34:	2f 93       	push	r18
 f36:	3f 93       	push	r19
 f38:	4f 93       	push	r20
 f3a:	5f 93       	push	r21
 f3c:	6f 93       	push	r22
 f3e:	7f 93       	push	r23
 f40:	8f 93       	push	r24
 f42:	9f 93       	push	r25
 f44:	af 93       	push	r26
 f46:	bf 93       	push	r27
 f48:	cf 93       	push	r28
 f4a:	df 93       	push	r29
 f4c:	ef 93       	push	r30
 f4e:	ff 93       	push	r31
 f50:	a0 91 e1 06 	lds	r26, 0x06E1	; 0x8006e1 <pxCurrentTCB>
 f54:	b0 91 e2 06 	lds	r27, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
 f58:	0d b6       	in	r0, 0x3d	; 61
 f5a:	0d 92       	st	X+, r0
 f5c:	0e b6       	in	r0, 0x3e	; 62
 f5e:	0d 92       	st	X+, r0
 f60:	0e 94 8b 08 	call	0x1116	; 0x1116 <vTaskSwitchContext>
 f64:	a0 91 e1 06 	lds	r26, 0x06E1	; 0x8006e1 <pxCurrentTCB>
 f68:	b0 91 e2 06 	lds	r27, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
 f6c:	cd 91       	ld	r28, X+
 f6e:	cd bf       	out	0x3d, r28	; 61
 f70:	dd 91       	ld	r29, X+
 f72:	de bf       	out	0x3e, r29	; 62
 f74:	ff 91       	pop	r31
 f76:	ef 91       	pop	r30
 f78:	df 91       	pop	r29
 f7a:	cf 91       	pop	r28
 f7c:	bf 91       	pop	r27
 f7e:	af 91       	pop	r26
 f80:	9f 91       	pop	r25
 f82:	8f 91       	pop	r24
 f84:	7f 91       	pop	r23
 f86:	6f 91       	pop	r22
 f88:	5f 91       	pop	r21
 f8a:	4f 91       	pop	r20
 f8c:	3f 91       	pop	r19
 f8e:	2f 91       	pop	r18
 f90:	1f 91       	pop	r17
 f92:	0f 91       	pop	r16
 f94:	ff 90       	pop	r15
 f96:	ef 90       	pop	r14
 f98:	df 90       	pop	r13
 f9a:	cf 90       	pop	r12
 f9c:	bf 90       	pop	r11
 f9e:	af 90       	pop	r10
 fa0:	9f 90       	pop	r9
 fa2:	8f 90       	pop	r8
 fa4:	7f 90       	pop	r7
 fa6:	6f 90       	pop	r6
 fa8:	5f 90       	pop	r5
 faa:	4f 90       	pop	r4
 fac:	3f 90       	pop	r3
 fae:	2f 90       	pop	r2
 fb0:	1f 90       	pop	r1
 fb2:	0f 90       	pop	r0
 fb4:	0f be       	out	0x3f, r0	; 63
 fb6:	0f 90       	pop	r0
 fb8:	08 95       	ret

Disassembly of section .text.__vector_7:

00001d54 <__vector_7>:
	 * manual calls to taskYIELD();
	 */
	// Correct interrupt vector name for Timer1 Output Compare A
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
		xTaskIncrementTick();
    1d76:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <xTaskIncrementTick>
	}
    1d7a:	ff 91       	pop	r31
    1d7c:	ef 91       	pop	r30
    1d7e:	bf 91       	pop	r27
    1d80:	af 91       	pop	r26
    1d82:	9f 91       	pop	r25
    1d84:	8f 91       	pop	r24
    1d86:	7f 91       	pop	r23
    1d88:	6f 91       	pop	r22
    1d8a:	5f 91       	pop	r21
    1d8c:	4f 91       	pop	r20
    1d8e:	3f 91       	pop	r19
    1d90:	2f 91       	pop	r18
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	0f 90       	pop	r0
    1d98:	1f 90       	pop	r1
    1d9a:	18 95       	reti

Disassembly of section .text.prvIsQueueEmpty:

000020d8 <prvIsQueueEmpty>:
     * updated. */
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	0f 92       	push	r0
        while( cTxLock > queueLOCKED_UNMODIFIED )
        {
    20de:	a8 2f       	mov	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	4a 96       	adiw	r24, 0x1a	; 26
    20e4:	a1 1d       	adc	r26, r1
    20e6:	fc 01       	movw	r30, r24
    20e8:	84 91       	lpm	r24, Z
    20ea:	a7 fd       	sbrc	r26, 7
    20ec:	80 81       	ld	r24, Z
    20ee:	81 11       	cpse	r24, r1
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <prvIsQueueEmpty+0x1e>
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <prvIsQueueEmpty+0x20>
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
                {
    20f6:	80 e0       	ldi	r24, 0x00	; 0
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
                    {
                        /* The queue is a member of a queue set, and posting to
    20f8:	0f 90       	pop	r0
    20fa:	0f be       	out	0x3f, r0	; 63
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
    20fc:	08 95       	ret

Disassembly of section .text.prvIsQueueFull:

00001f6e <prvIsQueueFull>:
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else
                    {
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	0f 92       	push	r0
                        break;
                    }
    1f74:	9b 01       	movw	r18, r22
    1f76:	48 2f       	mov	r20, r24
    1f78:	26 5e       	subi	r18, 0xE6	; 230
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1f7e:	f9 01       	movw	r30, r18
    1f80:	24 91       	lpm	r18, Z
    1f82:	47 fd       	sbrc	r20, 7
    1f84:	20 81       	ld	r18, Z
    1f86:	a8 2f       	mov	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	4b 96       	adiw	r24, 0x1b	; 27
    1f8c:	a1 1d       	adc	r26, r1
    1f8e:	fc 01       	movw	r30, r24
    1f90:	84 91       	lpm	r24, Z
    1f92:	a7 fd       	sbrc	r26, 7
    1f94:	80 81       	ld	r24, Z
    1f96:	28 13       	cpse	r18, r24
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <prvIsQueueFull+0x30>
                }
            }
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <prvIsQueueFull+0x32>
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
    1fa4:	08 95       	ret

Disassembly of section .text.prvCopyDataToQueue:

000012fa <prvCopyDataToQueue>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
    1304:	02 2f       	mov	r16, r18
    1306:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1308:	2c 8d       	ldd	r18, Y+28	; 0x1c
    130a:	22 23       	and	r18, r18
    130c:	b9 f1       	breq	.+110    	; 0x137c <prvCopyDataToQueue+0x82>
    130e:	01 11       	cpse	r16, r1
    1310:	16 c0       	rjmp	.+44     	; 0x133e <prvCopyDataToQueue+0x44>
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	9b 81       	ldd	r25, Y+3	; 0x03
    1318:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <memcpy>
    131c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	9b 81       	ldd	r25, Y+3	; 0x03
    1322:	82 0f       	add	r24, r18
    1324:	91 1d       	adc	r25, r1
    1326:	9b 83       	std	Y+3, r25	; 0x03
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	3d 81       	ldd	r19, Y+5	; 0x05
    132e:	82 17       	cp	r24, r18
    1330:	93 07       	cpc	r25, r19
    1332:	20 f1       	brcs	.+72     	; 0x137c <prvCopyDataToQueue+0x82>
    1334:	88 81       	ld	r24, Y
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	9b 83       	std	Y+3, r25	; 0x03
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	1f c0       	rjmp	.+62     	; 0x137c <prvCopyDataToQueue+0x82>
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <memcpy>
    1348:	8c 8d       	ldd	r24, Y+28	; 0x1c
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	91 95       	neg	r25
    134e:	81 95       	neg	r24
    1350:	91 09       	sbc	r25, r1
    1352:	2e 81       	ldd	r18, Y+6	; 0x06
    1354:	3f 81       	ldd	r19, Y+7	; 0x07
    1356:	28 0f       	add	r18, r24
    1358:	39 1f       	adc	r19, r25
    135a:	3f 83       	std	Y+7, r19	; 0x07
    135c:	2e 83       	std	Y+6, r18	; 0x06
    135e:	48 81       	ld	r20, Y
    1360:	59 81       	ldd	r21, Y+1	; 0x01
    1362:	24 17       	cp	r18, r20
    1364:	35 07       	cpc	r19, r21
    1366:	30 f4       	brcc	.+12     	; 0x1374 <prvCopyDataToQueue+0x7a>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	9f 83       	std	Y+7, r25	; 0x07
    1372:	8e 83       	std	Y+6, r24	; 0x06
    1374:	02 30       	cpi	r16, 0x02	; 2
    1376:	11 f4       	brne	.+4      	; 0x137c <prvCopyDataToQueue+0x82>
    1378:	11 11       	cpse	r17, r1
    137a:	11 50       	subi	r17, 0x01	; 1
    137c:	1f 5f       	subi	r17, 0xFF	; 255
    137e:	1a 8f       	std	Y+26, r17	; 0x1a
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

000017f8 <prvUnlockQueue>:
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
        }

    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ec 01       	movw	r28, r24
    }

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	0f 92       	push	r0
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
    1806:	1e 8d       	ldd	r17, Y+30	; 0x1e
{
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <prvUnlockQueue+0x2c>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
    180a:	89 89       	ldd	r24, Y+17	; 0x11
    180c:	88 23       	and	r24, r24
    180e:	61 f0       	breq	.+24     	; 0x1828 <prvUnlockQueue+0x30>
        }

    1810:	be 01       	movw	r22, r28
    1812:	6f 5e       	subi	r22, 0xEF	; 239
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	80 e8       	ldi	r24, 0x80	; 128
    1818:	0e 94 31 09 	call	0x1262	; 0x1262 <xTaskRemoveFromEventList>
    181c:	81 11       	cpse	r24, r1
        if( xPosition == queueOVERWRITE )
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
            {
    181e:	0e 94 df 11 	call	0x23be	; 0x23be <vTaskMissedYield>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
    1822:	11 50       	subi	r17, 0x01	; 1
static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;
    1824:	11 16       	cp	r1, r17
    1826:	8c f3       	brlt	.-30     	; 0x180a <prvUnlockQueue+0x12>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	8e 8f       	std	Y+30, r24	; 0x1e
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;

    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    return xReturn;
}
/*-----------------------------------------------------------*/
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	0f 92       	push	r0

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
    1836:	1d 8d       	ldd	r17, Y+29	; 0x1d
                                  void * const pvBuffer )
{
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <prvUnlockQueue+0x5c>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    {
    183a:	88 85       	ldd	r24, Y+8	; 0x08
    183c:	88 23       	and	r24, r24
    183e:	61 f0       	breq	.+24     	; 0x1858 <prvUnlockQueue+0x60>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */

    1840:	be 01       	movw	r22, r28
    1842:	68 5f       	subi	r22, 0xF8	; 248
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	80 e8       	ldi	r24, 0x80	; 128
    1848:	0e 94 31 09 	call	0x1262	; 0x1262 <xTaskRemoveFromEventList>
    184c:	81 11       	cpse	r24, r1
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
        {
    184e:	0e 94 df 11 	call	0x23be	; 0x23be <vTaskMissedYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

    1852:	11 50       	subi	r17, 0x01	; 1
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1854:	11 16       	cp	r1, r17
    1856:	8c f3       	brlt	.-30     	; 0x183a <prvUnlockQueue+0x42>
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	8d 8f       	std	Y+29, r24	; 0x1d

    /* The lock counts contains the number of extra data items placed or
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
     * removed from the queue while the queue was locked.  When a queue is
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

0000141c <xQueueGenericReset>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	0f 92       	push	r0
    1428:	e8 81       	ld	r30, Y
    142a:	f9 81       	ldd	r31, Y+1	; 0x01
    142c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    142e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	82 9f       	mul	r24, r18
    1436:	a0 01       	movw	r20, r0
    1438:	83 9f       	mul	r24, r19
    143a:	50 0d       	add	r21, r0
    143c:	92 9f       	mul	r25, r18
    143e:	50 0d       	add	r21, r0
    1440:	11 24       	eor	r1, r1
    1442:	4e 0f       	add	r20, r30
    1444:	5f 1f       	adc	r21, r31
    1446:	5d 83       	std	Y+5, r21	; 0x05
    1448:	4c 83       	std	Y+4, r20	; 0x04
    144a:	1a 8e       	std	Y+26, r1	; 0x1a
    144c:	fb 83       	std	Y+3, r31	; 0x03
    144e:	ea 83       	std	Y+2, r30	; 0x02
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	28 9f       	mul	r18, r24
    1454:	a0 01       	movw	r20, r0
    1456:	29 9f       	mul	r18, r25
    1458:	50 0d       	add	r21, r0
    145a:	38 9f       	mul	r19, r24
    145c:	50 0d       	add	r21, r0
    145e:	11 24       	eor	r1, r1
    1460:	cf 01       	movw	r24, r30
    1462:	84 0f       	add	r24, r20
    1464:	95 1f       	adc	r25, r21
    1466:	9f 83       	std	Y+7, r25	; 0x07
    1468:	8e 83       	std	Y+6, r24	; 0x06
    146a:	8f ef       	ldi	r24, 0xFF	; 255
    146c:	8d 8f       	std	Y+29, r24	; 0x1d
    146e:	8e 8f       	std	Y+30, r24	; 0x1e
    1470:	61 11       	cpse	r22, r1
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <xQueueGenericReset+0x6a>
    1474:	88 85       	ldd	r24, Y+8	; 0x08
    1476:	88 23       	and	r24, r24
    1478:	71 f0       	breq	.+28     	; 0x1496 <xQueueGenericReset+0x7a>
    147a:	28 96       	adiw	r28, 0x08	; 8
    147c:	be 01       	movw	r22, r28
    147e:	80 e8       	ldi	r24, 0x80	; 128
    1480:	0e 94 31 09 	call	0x1262	; 0x1262 <xTaskRemoveFromEventList>
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <xQueueGenericReset+0x7a>
    1486:	ce 01       	movw	r24, r28
    1488:	08 96       	adiw	r24, 0x08	; 8
    148a:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    148e:	ce 01       	movw	r24, r28
    1490:	41 96       	adiw	r24, 0x11	; 17
    1492:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

Disassembly of section .text.prvInitialiseNewQueue:

000020fe <prvInitialiseNewQueue>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	f8 01       	movw	r30, r16
    {
        Queue_t * pxNewQueue = NULL;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

    2104:	61 11       	cpse	r22, r1
    2106:	03 c0       	rjmp	.+6      	; 0x210e <prvInitialiseNewQueue+0x10>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
        {
    2108:	11 83       	std	Z+1, r17	; 0x01
    210a:	00 83       	st	Z, r16
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <prvInitialiseNewQueue+0x14>
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    210e:	51 83       	std	Z+1, r21	; 0x01
    2110:	40 83       	st	Z, r20
            /* Allocate the queue and storage area.  Justification for MISRA
             * deviation as follows:  pvPortMalloc() always ensures returned memory
             * blocks are aligned per the requirements of the MCU stack.  In this case
             * pvPortMalloc() must return a pointer that is guaranteed to meet the
             * alignment requirements of the Queue_t structure - which in this case
    2112:	83 8f       	std	Z+27, r24	; 0x1b
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
    2114:	64 8f       	std	Z+28, r22	; 0x1c
             * are greater than or equal to the pointer to char requirements the cast
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	cf 01       	movw	r24, r30
    211a:	0e 94 0e 0a 	call	0x141c	; 0x141c <xQueueGenericReset>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */

                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

00001b7c <xQueueGenericCreate>:

    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	e8 2e       	mov	r14, r24
    1b8c:	f6 2e       	mov	r15, r22
    1b8e:	d4 2e       	mov	r13, r20
        Queue_t * pxNewQueue = NULL;

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );

    1b90:	66 23       	and	r22, r22
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <xQueueGenericCreate+0x20>
            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
        {
            #if ( configASSERT_DEFINED == 1 )
    1b94:	86 9f       	mul	r24, r22
    1b96:	c0 01       	movw	r24, r0
    1b98:	11 24       	eor	r1, r1
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <xQueueGenericCreate+0x24>
         * supplied. */
        configASSERT( pxStaticQueue );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            ( pxStaticQueue != NULL ) &&

    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
            }
            #endif /* configASSERT_DEFINED */

    1ba0:	4f 96       	adiw	r24, 0x1f	; 31
    1ba2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <pvPortMalloc>
    1ba6:	ec 01       	movw	r28, r24
            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	49 f0       	breq	.+18     	; 0x1bbe <xQueueGenericCreate+0x42>
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
        }
        else
        {
    1bac:	8c 01       	movw	r16, r24
    1bae:	2d 2d       	mov	r18, r13
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	41 5e       	subi	r20, 0xE1	; 225
    1bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb6:	6f 2d       	mov	r22, r15
    1bb8:	8e 2d       	mov	r24, r14
    1bba:	0e 94 7f 10 	call	0x20fe	; 0x20fe <prvInitialiseNewQueue>

        return pxNewQueue;
    }

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	df 90       	pop	r13
    1bce:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

000004c2 <xQueueGenericSend>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 4c2:	6f 92       	push	r6
 4c4:	7f 92       	push	r7
 4c6:	8f 92       	push	r8
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <xQueueGenericSend+0x14>
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <xQueueGenericSend+0x16>
 4d8:	0f 92       	push	r0
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	7c 01       	movw	r14, r24
 4e0:	3a 01       	movw	r6, r20
 4e2:	86 2e       	mov	r8, r22
 4e4:	3d 83       	std	Y+5, r19	; 0x05
 4e6:	2c 83       	std	Y+4, r18	; 0x04
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	0f 92       	push	r0
 4f0:	f7 01       	movw	r30, r14
 4f2:	92 8d       	ldd	r25, Z+26	; 0x1a
 4f4:	83 8d       	ldd	r24, Z+27	; 0x1b
 4f6:	98 17       	cp	r25, r24
 4f8:	10 f0       	brcs	.+4      	; 0x4fe <xQueueGenericSend+0x3c>
 4fa:	02 30       	cpi	r16, 0x02	; 2
 4fc:	a9 f4       	brne	.+42     	; 0x528 <xQueueGenericSend+0x66>
 4fe:	20 2f       	mov	r18, r16
 500:	68 2d       	mov	r22, r8
 502:	a3 01       	movw	r20, r6
 504:	c7 01       	movw	r24, r14
 506:	0e 94 7d 09 	call	0x12fa	; 0x12fa <prvCopyDataToQueue>
 50a:	f7 01       	movw	r30, r14
 50c:	81 89       	ldd	r24, Z+17	; 0x11
 50e:	88 23       	and	r24, r24
 510:	39 f0       	breq	.+14     	; 0x520 <xQueueGenericSend+0x5e>
 512:	f1 e1       	ldi	r31, 0x11	; 17
 514:	ef 0e       	add	r14, r31
 516:	f1 1c       	adc	r15, r1
 518:	b7 01       	movw	r22, r14
 51a:	80 e8       	ldi	r24, 0x80	; 128
 51c:	0e 94 31 09 	call	0x1262	; 0x1262 <xTaskRemoveFromEventList>
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	4d c0       	rjmp	.+154    	; 0x5c2 <xQueueGenericSend+0x100>
 528:	8c 81       	ldd	r24, Y+4	; 0x04
 52a:	9d 81       	ldd	r25, Y+5	; 0x05
 52c:	89 2b       	or	r24, r25
 52e:	21 f4       	brne	.+8      	; 0x538 <xQueueGenericSend+0x76>
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	45 c0       	rjmp	.+138    	; 0x5c2 <xQueueGenericSend+0x100>
 538:	11 11       	cpse	r17, r1
 53a:	05 c0       	rjmp	.+10     	; 0x546 <xQueueGenericSend+0x84>
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	0e 94 34 11 	call	0x2268	; 0x2268 <vTaskInternalSetTimeOutState>
 544:	11 e0       	ldi	r17, 0x01	; 1
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	f8 94       	cli
 552:	0f 92       	push	r0
 554:	f7 01       	movw	r30, r14
 556:	85 8d       	ldd	r24, Z+29	; 0x1d
 558:	8f 3f       	cpi	r24, 0xFF	; 255
 55a:	09 f4       	brne	.+2      	; 0x55e <xQueueGenericSend+0x9c>
 55c:	15 8e       	std	Z+29, r1	; 0x1d
 55e:	f7 01       	movw	r30, r14
 560:	86 8d       	ldd	r24, Z+30	; 0x1e
 562:	8f 3f       	cpi	r24, 0xFF	; 255
 564:	09 f4       	brne	.+2      	; 0x568 <xQueueGenericSend+0xa6>
 566:	16 8e       	std	Z+30, r1	; 0x1e
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	be 01       	movw	r22, r28
 56e:	6c 5f       	subi	r22, 0xFC	; 252
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	ce 01       	movw	r24, r28
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	0e 94 4d 0b 	call	0x169a	; 0x169a <xTaskCheckForTimeOut>
 57a:	81 11       	cpse	r24, r1
 57c:	1c c0       	rjmp	.+56     	; 0x5b6 <xQueueGenericSend+0xf4>
 57e:	b7 01       	movw	r22, r14
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <prvIsQueueFull>
 586:	88 23       	and	r24, r24
 588:	81 f0       	breq	.+32     	; 0x5aa <xQueueGenericSend+0xe8>
 58a:	6c 81       	ldd	r22, Y+4	; 0x04
 58c:	7d 81       	ldd	r23, Y+5	; 0x05
 58e:	c7 01       	movw	r24, r14
 590:	08 96       	adiw	r24, 0x08	; 8
 592:	0e 94 92 10 	call	0x2124	; 0x2124 <vTaskPlaceOnEventList>
 596:	c7 01       	movw	r24, r14
 598:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvUnlockQueue>
 59c:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
 5a0:	81 11       	cpse	r24, r1
 5a2:	a3 cf       	rjmp	.-186    	; 0x4ea <xQueueGenericSend+0x28>
 5a4:	0e 94 84 07 	call	0xf08	; 0xf08 <vPortYield>
 5a8:	a0 cf       	rjmp	.-192    	; 0x4ea <xQueueGenericSend+0x28>
 5aa:	c7 01       	movw	r24, r14
 5ac:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvUnlockQueue>
 5b0:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
 5b4:	9a cf       	rjmp	.-204    	; 0x4ea <xQueueGenericSend+0x28>
 5b6:	c7 01       	movw	r24, r14
 5b8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvUnlockQueue>
 5bc:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	8f 90       	pop	r8
 5da:	7f 90       	pop	r7
 5dc:	6f 90       	pop	r6
 5de:	08 95       	ret

Disassembly of section .text.xQueueSemaphoreTake:

000006f4 <xQueueSemaphoreTake>:
 6f4:	ff 92       	push	r15
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	00 d0       	rcall	.+0      	; 0x700 <xQueueSemaphoreTake+0xc>
 700:	00 d0       	rcall	.+0      	; 0x702 <xQueueSemaphoreTake+0xe>
 702:	0f 92       	push	r0
 704:	cd b7       	in	r28, 0x3d	; 61
 706:	de b7       	in	r29, 0x3e	; 62
 708:	8c 01       	movw	r16, r24
 70a:	7d 83       	std	Y+5, r23	; 0x05
 70c:	6c 83       	std	Y+4, r22	; 0x04
 70e:	f1 2c       	mov	r15, r1
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	0f 92       	push	r0
 716:	f8 01       	movw	r30, r16
 718:	82 8d       	ldd	r24, Z+26	; 0x1a
 71a:	88 23       	and	r24, r24
 71c:	79 f0       	breq	.+30     	; 0x73c <xQueueSemaphoreTake+0x48>
 71e:	81 50       	subi	r24, 0x01	; 1
 720:	82 8f       	std	Z+26, r24	; 0x1a
 722:	80 85       	ldd	r24, Z+8	; 0x08
 724:	88 23       	and	r24, r24
 726:	31 f0       	breq	.+12     	; 0x734 <xQueueSemaphoreTake+0x40>
 728:	08 5f       	subi	r16, 0xF8	; 248
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
 72c:	b8 01       	movw	r22, r16
 72e:	80 e8       	ldi	r24, 0x80	; 128
 730:	0e 94 31 09 	call	0x1262	; 0x1262 <xTaskRemoveFromEventList>
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	55 c0       	rjmp	.+170    	; 0x7e6 <xQueueSemaphoreTake+0xf2>
 73c:	8c 81       	ldd	r24, Y+4	; 0x04
 73e:	9d 81       	ldd	r25, Y+5	; 0x05
 740:	89 2b       	or	r24, r25
 742:	21 f4       	brne	.+8      	; 0x74c <xQueueSemaphoreTake+0x58>
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	4d c0       	rjmp	.+154    	; 0x7e6 <xQueueSemaphoreTake+0xf2>
 74c:	f1 10       	cpse	r15, r1
 74e:	06 c0       	rjmp	.+12     	; 0x75c <xQueueSemaphoreTake+0x68>
 750:	ce 01       	movw	r24, r28
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	0e 94 34 11 	call	0x2268	; 0x2268 <vTaskInternalSetTimeOutState>
 758:	ff 24       	eor	r15, r15
 75a:	f3 94       	inc	r15
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	0f 92       	push	r0
 76a:	f8 01       	movw	r30, r16
 76c:	85 8d       	ldd	r24, Z+29	; 0x1d
 76e:	8f 3f       	cpi	r24, 0xFF	; 255
 770:	09 f4       	brne	.+2      	; 0x774 <xQueueSemaphoreTake+0x80>
 772:	15 8e       	std	Z+29, r1	; 0x1d
 774:	f8 01       	movw	r30, r16
 776:	86 8d       	ldd	r24, Z+30	; 0x1e
 778:	8f 3f       	cpi	r24, 0xFF	; 255
 77a:	09 f4       	brne	.+2      	; 0x77e <xQueueSemaphoreTake+0x8a>
 77c:	16 8e       	std	Z+30, r1	; 0x1e
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	be 01       	movw	r22, r28
 784:	6c 5f       	subi	r22, 0xFC	; 252
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	ce 01       	movw	r24, r28
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	0e 94 4d 0b 	call	0x169a	; 0x169a <xTaskCheckForTimeOut>
 790:	81 11       	cpse	r24, r1
 792:	1c c0       	rjmp	.+56     	; 0x7cc <xQueueSemaphoreTake+0xd8>
 794:	b8 01       	movw	r22, r16
 796:	80 e8       	ldi	r24, 0x80	; 128
 798:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <prvIsQueueEmpty>
 79c:	88 23       	and	r24, r24
 79e:	81 f0       	breq	.+32     	; 0x7c0 <xQueueSemaphoreTake+0xcc>
 7a0:	6c 81       	ldd	r22, Y+4	; 0x04
 7a2:	7d 81       	ldd	r23, Y+5	; 0x05
 7a4:	c8 01       	movw	r24, r16
 7a6:	41 96       	adiw	r24, 0x11	; 17
 7a8:	0e 94 92 10 	call	0x2124	; 0x2124 <vTaskPlaceOnEventList>
 7ac:	c8 01       	movw	r24, r16
 7ae:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvUnlockQueue>
 7b2:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
 7b6:	81 11       	cpse	r24, r1
 7b8:	ab cf       	rjmp	.-170    	; 0x710 <xQueueSemaphoreTake+0x1c>
 7ba:	0e 94 84 07 	call	0xf08	; 0xf08 <vPortYield>
 7be:	a8 cf       	rjmp	.-176    	; 0x710 <xQueueSemaphoreTake+0x1c>
 7c0:	c8 01       	movw	r24, r16
 7c2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvUnlockQueue>
 7c6:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
 7ca:	a2 cf       	rjmp	.-188    	; 0x710 <xQueueSemaphoreTake+0x1c>
 7cc:	c8 01       	movw	r24, r16
 7ce:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <prvUnlockQueue>
 7d2:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
 7d6:	b8 01       	movw	r22, r16
 7d8:	80 e8       	ldi	r24, 0x80	; 128
 7da:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <prvIsQueueEmpty>
 7de:	88 23       	and	r24, r24
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <xQueueSemaphoreTake+0xf0>
 7e2:	96 cf       	rjmp	.-212    	; 0x710 <xQueueSemaphoreTake+0x1c>
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	ff 90       	pop	r15
 7fa:	08 95       	ret

Disassembly of section .text.prvTaskIsTaskSuspended:

00001eae <prvTaskIsTaskSuspended>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    1eae:	a0 e8       	ldi	r26, 0x80	; 128
    1eb0:	9c 01       	movw	r18, r24
    1eb2:	4a 2f       	mov	r20, r26
    1eb4:	26 5f       	subi	r18, 0xF6	; 246
    1eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eba:	f9 01       	movw	r30, r18
    1ebc:	54 2f       	mov	r21, r20
    1ebe:	0e 94 6d 11 	call	0x22da	; 0x22da <__xload_2>
    1ec2:	64 5a       	subi	r22, 0xA4	; 164
    1ec4:	76 40       	sbci	r23, 0x06	; 6
    1ec6:	71 f4       	brne	.+28     	; 0x1ee4 <prvTaskIsTaskSuspended+0x36>
    1ec8:	44 96       	adiw	r24, 0x14	; 20
    1eca:	a1 1d       	adc	r26, r1
    1ecc:	fc 01       	movw	r30, r24
    1ece:	5a 2f       	mov	r21, r26
    1ed0:	0e 94 6d 11 	call	0x22da	; 0x22da <__xload_2>
    1ed4:	86 e0       	ldi	r24, 0x06	; 6
    1ed6:	66 3b       	cpi	r22, 0xB6	; 182
    1ed8:	78 07       	cpc	r23, r24
    1eda:	31 f0       	breq	.+12     	; 0x1ee8 <prvTaskIsTaskSuspended+0x3a>
    1edc:	67 2b       	or	r22, r23
    1ede:	31 f0       	breq	.+12     	; 0x1eec <prvTaskIsTaskSuspended+0x3e>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	08 95       	ret
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	08 95       	ret
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	08 95       	ret
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	08 95       	ret

Disassembly of section .text.prvResetNextTaskUnblockTime:

00001f30 <prvResetNextTaskUnblockTime>:
    1f30:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxDelayedTaskList>
    1f34:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxDelayedTaskList+0x1>
    1f38:	80 81       	ld	r24, Z
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <prvResetNextTaskUnblockTime+0x1c>
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	9f ef       	ldi	r25, 0xFF	; 255
    1f42:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <xNextTaskUnblockTime+0x1>
    1f46:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <xNextTaskUnblockTime>
    1f4a:	08 95       	ret
    1f4c:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxDelayedTaskList>
    1f50:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxDelayedTaskList+0x1>
    1f54:	05 80       	ldd	r0, Z+5	; 0x05
    1f56:	f6 81       	ldd	r31, Z+6	; 0x06
    1f58:	e0 2d       	mov	r30, r0
    1f5a:	06 80       	ldd	r0, Z+6	; 0x06
    1f5c:	f7 81       	ldd	r31, Z+7	; 0x07
    1f5e:	e0 2d       	mov	r30, r0
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <xNextTaskUnblockTime+0x1>
    1f68:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <xNextTaskUnblockTime>
    1f6c:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

0000221e <prvDeleteTCB>:
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	ec 01       	movw	r28, r24
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vPortFree>
    222c:	ce 01       	movw	r24, r28
    222e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vPortFree>
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

000008fa <prvInitialiseNewTask>:
 8fa:	6f 92       	push	r6
 8fc:	7f 92       	push	r7
 8fe:	8f 92       	push	r8
 900:	9f 92       	push	r9
 902:	af 92       	push	r10
 904:	bf 92       	push	r11
 906:	cf 92       	push	r12
 908:	df 92       	push	r13
 90a:	ef 92       	push	r14
 90c:	ff 92       	push	r15
 90e:	0f 93       	push	r16
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	3c 01       	movw	r6, r24
 91c:	a6 2f       	mov	r26, r22
 91e:	ca 01       	movw	r24, r20
 920:	f4 01       	movw	r30, r8
 922:	47 89       	ldd	r20, Z+23	; 0x17
 924:	50 8d       	ldd	r21, Z+24	; 0x18
 926:	01 50       	subi	r16, 0x01	; 1
 928:	11 09       	sbc	r17, r1
 92a:	04 0f       	add	r16, r20
 92c:	15 1f       	adc	r17, r21
 92e:	00 97       	sbiw	r24, 0x00	; 0
 930:	a1 05       	cpc	r26, r1
 932:	d1 f4       	brne	.+52     	; 0x968 <prvInitialiseNewTask+0x6e>
 934:	1f c0       	rjmp	.+62     	; 0x974 <prvInitialiseNewTask+0x7a>
 936:	27 2f       	mov	r18, r23
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	ac 01       	movw	r20, r24
 93c:	6a 2f       	mov	r22, r26
 93e:	42 0f       	add	r20, r18
 940:	53 1f       	adc	r21, r19
 942:	61 1d       	adc	r22, r1
 944:	37 fd       	sbrc	r19, 7
 946:	6a 95       	dec	r22
 948:	fa 01       	movw	r30, r20
 94a:	b4 91       	lpm	r27, Z
 94c:	67 fd       	sbrc	r22, 7
 94e:	b0 81       	ld	r27, Z
 950:	f4 01       	movw	r30, r8
 952:	e2 0f       	add	r30, r18
 954:	f3 1f       	adc	r31, r19
 956:	b1 8f       	std	Z+25, r27	; 0x19
 958:	fa 01       	movw	r30, r20
 95a:	24 91       	lpm	r18, Z
 95c:	67 fd       	sbrc	r22, 7
 95e:	20 81       	ld	r18, Z
 960:	22 23       	and	r18, r18
 962:	29 f0       	breq	.+10     	; 0x96e <prvInitialiseNewTask+0x74>
 964:	7f 5f       	subi	r23, 0xFF	; 255
 966:	01 c0       	rjmp	.+2      	; 0x96a <prvInitialiseNewTask+0x70>
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	78 30       	cpi	r23, 0x08	; 8
 96c:	20 f3       	brcs	.-56     	; 0x936 <prvInitialiseNewTask+0x3c>
 96e:	f4 01       	movw	r30, r8
 970:	10 a2       	std	Z+32, r1	; 0x20
 972:	02 c0       	rjmp	.+4      	; 0x978 <prvInitialiseNewTask+0x7e>
 974:	f4 01       	movw	r30, r8
 976:	11 8e       	std	Z+25, r1	; 0x19
 978:	f9 e0       	ldi	r31, 0x09	; 9
 97a:	fc 15       	cp	r31, r12
 97c:	20 f4       	brcc	.+8      	; 0x986 <prvInitialiseNewTask+0x8c>
 97e:	0f 2e       	mov	r0, r31
 980:	f9 e0       	ldi	r31, 0x09	; 9
 982:	cf 2e       	mov	r12, r31
 984:	f0 2d       	mov	r31, r0
 986:	f4 01       	movw	r30, r8
 988:	c6 8a       	std	Z+22, r12	; 0x16
 98a:	c4 01       	movw	r24, r8
 98c:	02 96       	adiw	r24, 0x02	; 2
 98e:	0e 94 db 11 	call	0x23b6	; 0x23b6 <vListInitialiseItem>
 992:	c4 01       	movw	r24, r8
 994:	0c 96       	adiw	r24, 0x0c	; 12
 996:	0e 94 db 11 	call	0x23b6	; 0x23b6 <vListInitialiseItem>
 99a:	f4 01       	movw	r30, r8
 99c:	91 86       	std	Z+9, r9	; 0x09
 99e:	80 86       	std	Z+8, r8	; 0x08
 9a0:	8a e0       	ldi	r24, 0x0A	; 10
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	8c 19       	sub	r24, r12
 9a6:	91 09       	sbc	r25, r1
 9a8:	95 87       	std	Z+13, r25	; 0x0d
 9aa:	84 87       	std	Z+12, r24	; 0x0c
 9ac:	93 8a       	std	Z+19, r9	; 0x13
 9ae:	82 8a       	std	Z+18, r8	; 0x12
 9b0:	11 a2       	std	Z+33, r1	; 0x21
 9b2:	12 a2       	std	Z+34, r1	; 0x22
 9b4:	13 a2       	std	Z+35, r1	; 0x23
 9b6:	14 a2       	std	Z+36, r1	; 0x24
 9b8:	15 a2       	std	Z+37, r1	; 0x25
 9ba:	a7 01       	movw	r20, r14
 9bc:	b3 01       	movw	r22, r6
 9be:	c8 01       	movw	r24, r16
 9c0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <pxPortInitialiseStack>
 9c4:	f4 01       	movw	r30, r8
 9c6:	91 83       	std	Z+1, r25	; 0x01
 9c8:	80 83       	st	Z, r24
 9ca:	a1 14       	cp	r10, r1
 9cc:	b1 04       	cpc	r11, r1
 9ce:	19 f0       	breq	.+6      	; 0x9d6 <prvInitialiseNewTask+0xdc>
 9d0:	f5 01       	movw	r30, r10
 9d2:	91 82       	std	Z+1, r9	; 0x01
 9d4:	80 82       	st	Z, r8
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	bf 90       	pop	r11
 9e8:	af 90       	pop	r10
 9ea:	9f 90       	pop	r9
 9ec:	8f 90       	pop	r8
 9ee:	7f 90       	pop	r7
 9f0:	6f 90       	pop	r6
 9f2:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

00001868 <prvInitialiseTaskLists>:
    1868:	cf 93       	push	r28
    186a:	c0 e0       	ldi	r28, 0x00	; 0
    186c:	10 c0       	rjmp	.+32     	; 0x188e <prvInitialiseTaskLists+0x26>
    186e:	8c 2f       	mov	r24, r28
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 01       	movw	r18, r24
    1874:	22 0f       	add	r18, r18
    1876:	33 1f       	adc	r19, r19
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	22 0f       	add	r18, r18
    187e:	33 1f       	adc	r19, r19
    1880:	82 0f       	add	r24, r18
    1882:	93 1f       	adc	r25, r19
    1884:	86 5b       	subi	r24, 0xB6	; 182
    1886:	99 4f       	sbci	r25, 0xF9	; 249
    1888:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    188c:	cf 5f       	subi	r28, 0xFF	; 255
    188e:	ca 30       	cpi	r28, 0x0A	; 10
    1890:	70 f3       	brcs	.-36     	; 0x186e <prvInitialiseTaskLists+0x6>
    1892:	88 ec       	ldi	r24, 0xC8	; 200
    1894:	96 e0       	ldi	r25, 0x06	; 6
    1896:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    189a:	8f eb       	ldi	r24, 0xBF	; 191
    189c:	96 e0       	ldi	r25, 0x06	; 6
    189e:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    18a2:	86 eb       	ldi	r24, 0xB6	; 182
    18a4:	96 e0       	ldi	r25, 0x06	; 6
    18a6:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    18aa:	8d ea       	ldi	r24, 0xAD	; 173
    18ac:	96 e0       	ldi	r25, 0x06	; 6
    18ae:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    18b2:	84 ea       	ldi	r24, 0xA4	; 164
    18b4:	96 e0       	ldi	r25, 0x06	; 6
    18b6:	0e 94 01 11 	call	0x2202	; 0x2202 <vListInitialise>
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	96 e0       	ldi	r25, 0x06	; 6
    18be:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxDelayedTaskList+0x1>
    18c2:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxDelayedTaskList>
    18c6:	8f eb       	ldi	r24, 0xBF	; 191
    18c8:	96 e0       	ldi	r25, 0x06	; 6
    18ca:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <pxOverflowDelayedTaskList+0x1>
    18ce:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <pxOverflowDelayedTaskList>
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

0000106a <prvAddNewTaskToReadyList>:
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	ec 01       	movw	r28, r24
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	0f 92       	push	r0
    1076:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxCurrentNumberOfTasks>
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxCurrentNumberOfTasks>
    1080:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    1084:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    1088:	89 2b       	or	r24, r25
    108a:	59 f4       	brne	.+22     	; 0x10a2 <prvAddNewTaskToReadyList+0x38>
    108c:	d0 93 e2 06 	sts	0x06E2, r29	; 0x8006e2 <pxCurrentTCB+0x1>
    1090:	c0 93 e1 06 	sts	0x06E1, r28	; 0x8006e1 <pxCurrentTCB>
    1094:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxCurrentNumberOfTasks>
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	99 f4       	brne	.+38     	; 0x10c2 <prvAddNewTaskToReadyList+0x58>
    109c:	0e 94 34 0c 	call	0x1868	; 0x1868 <prvInitialiseTaskLists>
    10a0:	10 c0       	rjmp	.+32     	; 0x10c2 <prvAddNewTaskToReadyList+0x58>
    10a2:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xSchedulerRunning>
    10a6:	81 11       	cpse	r24, r1
    10a8:	0c c0       	rjmp	.+24     	; 0x10c2 <prvAddNewTaskToReadyList+0x58>
    10aa:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    10ae:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    10b2:	96 89       	ldd	r25, Z+22	; 0x16
    10b4:	8e 89       	ldd	r24, Y+22	; 0x16
    10b6:	89 17       	cp	r24, r25
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <prvAddNewTaskToReadyList+0x58>
    10ba:	d0 93 e2 06 	sts	0x06E2, r29	; 0x8006e2 <pxCurrentTCB+0x1>
    10be:	c0 93 e1 06 	sts	0x06E1, r28	; 0x8006e1 <pxCurrentTCB>
    10c2:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <uxTaskNumber>
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <uxTaskNumber>
    10cc:	2e 89       	ldd	r18, Y+22	; 0x16
    10ce:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxTopReadyPriority>
    10d2:	82 17       	cp	r24, r18
    10d4:	10 f4       	brcc	.+4      	; 0x10da <prvAddNewTaskToReadyList+0x70>
    10d6:	20 93 f3 06 	sts	0x06F3, r18	; 0x8006f3 <uxTopReadyPriority>
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	be 01       	movw	r22, r28
    10de:	6e 5f       	subi	r22, 0xFE	; 254
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	c9 01       	movw	r24, r18
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	86 5b       	subi	r24, 0xB6	; 182
    10f6:	99 4f       	sbci	r25, 0xF9	; 249
    10f8:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xSchedulerRunning>
    1104:	88 23       	and	r24, r24
    1106:	21 f0       	breq	.+8      	; 0x1110 <prvAddNewTaskToReadyList+0xa6>
    1108:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    110c:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

00001cbe <prvCheckTasksWaitingTermination>:
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	1c c0       	rjmp	.+56     	; 0x1cfc <prvCheckTasksWaitingTermination+0x3e>
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	0f 92       	push	r0
    1cca:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <xTasksWaitingTermination+0x5>
    1cce:	f0 91 b3 06 	lds	r31, 0x06B3	; 0x8006b3 <xTasksWaitingTermination+0x6>
    1cd2:	c6 81       	ldd	r28, Z+6	; 0x06
    1cd4:	d7 81       	ldd	r29, Z+7	; 0x07
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	02 96       	adiw	r24, 0x02	; 2
    1cda:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
    1cde:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxCurrentNumberOfTasks>
    1ce2:	81 50       	subi	r24, 0x01	; 1
    1ce4:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxCurrentNumberOfTasks>
    1ce8:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxDeletedTasksWaitingCleanUp>
    1cec:	81 50       	subi	r24, 0x01	; 1
    1cee:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxDeletedTasksWaitingCleanUp>
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	0e 94 0f 11 	call	0x221e	; 0x221e <prvDeleteTCB>
    1cfc:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxDeletedTasksWaitingCleanUp>
    1d00:	81 11       	cpse	r24, r1
    1d02:	e0 cf       	rjmp	.-64     	; 0x1cc4 <prvCheckTasksWaitingTermination+0x6>
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

Disassembly of section .text.prvIdleTask:

00002398 <prvIdleTask>:
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    2398:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <prvCheckTasksWaitingTermination>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
            vTaskInternalSetTimeOutState( pxTimeOut );
            xReturn = pdFALSE;
        }
    239c:	0e 94 84 07 	call	0xf08	; 0xf08 <vPortYield>
    23a0:	fb cf       	rjmp	.-10     	; 0x2398 <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

00000fba <prvAddCurrentTaskToDelayedList>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	f6 2e       	mov	r15, r22
     fc8:	00 91 db 06 	lds	r16, 0x06DB	; 0x8006db <xTickCount>
     fcc:	10 91 dc 06 	lds	r17, 0x06DC	; 0x8006dc <xTickCount+0x1>
     fd0:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxCurrentTCB>
     fd4:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
     fd8:	02 96       	adiw	r24, 0x02	; 2
     fda:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
     fde:	cf 3f       	cpi	r28, 0xFF	; 255
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	d8 07       	cpc	r29, r24
     fe4:	69 f4       	brne	.+26     	; 0x1000 <prvAddCurrentTaskToDelayedList+0x46>
     fe6:	ff 20       	and	r15, r15
     fe8:	59 f0       	breq	.+22     	; 0x1000 <prvAddCurrentTaskToDelayedList+0x46>
     fea:	60 91 e1 06 	lds	r22, 0x06E1	; 0x8006e1 <pxCurrentTCB>
     fee:	70 91 e2 06 	lds	r23, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
     ff2:	6e 5f       	subi	r22, 0xFE	; 254
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	84 ea       	ldi	r24, 0xA4	; 164
     ff8:	96 e0       	ldi	r25, 0x06	; 6
     ffa:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
     ffe:	2f c0       	rjmp	.+94     	; 0x105e <prvAddCurrentTaskToDelayedList+0xa4>
    1000:	c0 0f       	add	r28, r16
    1002:	d1 1f       	adc	r29, r17
    1004:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    1008:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    100c:	d3 83       	std	Z+3, r29	; 0x03
    100e:	c2 83       	std	Z+2, r28	; 0x02
    1010:	c0 17       	cp	r28, r16
    1012:	d1 07       	cpc	r29, r17
    1014:	68 f4       	brcc	.+26     	; 0x1030 <prvAddCurrentTaskToDelayedList+0x76>
    1016:	60 91 e1 06 	lds	r22, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    101a:	70 91 e2 06 	lds	r23, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    101e:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <pxOverflowDelayedTaskList>
    1022:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <pxOverflowDelayedTaskList+0x1>
    1026:	6e 5f       	subi	r22, 0xFE	; 254
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <vListInsert>
    102e:	17 c0       	rjmp	.+46     	; 0x105e <prvAddCurrentTaskToDelayedList+0xa4>
    1030:	60 91 e1 06 	lds	r22, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    1034:	70 91 e2 06 	lds	r23, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    1038:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxDelayedTaskList>
    103c:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxDelayedTaskList+0x1>
    1040:	6e 5f       	subi	r22, 0xFE	; 254
    1042:	7f 4f       	sbci	r23, 0xFF	; 255
    1044:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <vListInsert>
    1048:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <xNextTaskUnblockTime>
    104c:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <xNextTaskUnblockTime+0x1>
    1050:	c8 17       	cp	r28, r24
    1052:	d9 07       	cpc	r29, r25
    1054:	20 f4       	brcc	.+8      	; 0x105e <prvAddCurrentTaskToDelayedList+0xa4>
    1056:	d0 93 da 06 	sts	0x06DA, r29	; 0x8006da <xNextTaskUnblockTime+0x1>
    105a:	c0 93 d9 06 	sts	0x06D9, r28	; 0x8006d9 <xNextTaskUnblockTime>
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	08 95       	ret

Disassembly of section .text.xTaskCreate:

00000e38 <xTaskCreate>:
 e38:	4f 92       	push	r4
 e3a:	5f 92       	push	r5
 e3c:	6f 92       	push	r6
 e3e:	7f 92       	push	r7
 e40:	8f 92       	push	r8
 e42:	9f 92       	push	r9
 e44:	af 92       	push	r10
 e46:	bf 92       	push	r11
 e48:	cf 92       	push	r12
 e4a:	df 92       	push	r13
 e4c:	ef 92       	push	r14
 e4e:	ff 92       	push	r15
 e50:	0f 93       	push	r16
 e52:	1f 93       	push	r17
 e54:	cf 93       	push	r28
 e56:	df 93       	push	r29
 e58:	00 d0       	rcall	.+0      	; 0xe5a <xTaskCreate+0x22>
 e5a:	00 d0       	rcall	.+0      	; 0xe5c <xTaskCreate+0x24>
 e5c:	0f 92       	push	r0
 e5e:	cd b7       	in	r28, 0x3d	; 61
 e60:	de b7       	in	r29, 0x3e	; 62
 e62:	3c 01       	movw	r6, r24
 e64:	49 83       	std	Y+1, r20	; 0x01
 e66:	5a 83       	std	Y+2, r21	; 0x02
 e68:	6b 83       	std	Y+3, r22	; 0x03
 e6a:	49 01       	movw	r8, r18
 e6c:	28 01       	movw	r4, r16
 e6e:	c9 01       	movw	r24, r18
 e70:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <pvPortMalloc>
 e74:	8c 01       	movw	r16, r24
 e76:	89 2b       	or	r24, r25
 e78:	81 f0       	breq	.+32     	; 0xe9a <xTaskCreate+0x62>
 e7a:	86 e2       	ldi	r24, 0x26	; 38
 e7c:	90 e0       	ldi	r25, 0x00	; 0
 e7e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <pvPortMalloc>
 e82:	9d 83       	std	Y+5, r25	; 0x05
 e84:	8c 83       	std	Y+4, r24	; 0x04
 e86:	00 97       	sbiw	r24, 0x00	; 0
 e88:	21 f0       	breq	.+8      	; 0xe92 <xTaskCreate+0x5a>
 e8a:	fc 01       	movw	r30, r24
 e8c:	10 8f       	std	Z+24, r17	; 0x18
 e8e:	07 8b       	std	Z+23, r16	; 0x17
 e90:	06 c0       	rjmp	.+12     	; 0xe9e <xTaskCreate+0x66>
 e92:	c8 01       	movw	r24, r16
 e94:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vPortFree>
 e98:	02 c0       	rjmp	.+4      	; 0xe9e <xTaskCreate+0x66>
 e9a:	1d 82       	std	Y+5, r1	; 0x05
 e9c:	1c 82       	std	Y+4, r1	; 0x04
 e9e:	8c 81       	ldd	r24, Y+4	; 0x04
 ea0:	9d 81       	ldd	r25, Y+5	; 0x05
 ea2:	89 2b       	or	r24, r25
 ea4:	d1 f0       	breq	.+52     	; 0xeda <xTaskCreate+0xa2>
 ea6:	84 01       	movw	r16, r8
 ea8:	20 e0       	ldi	r18, 0x00	; 0
 eaa:	30 e0       	ldi	r19, 0x00	; 0
 eac:	1f 92       	push	r1
 eae:	1f 92       	push	r1
 eb0:	1f 92       	push	r1
 eb2:	8c 80       	ldd	r8, Y+4	; 0x04
 eb4:	9d 80       	ldd	r9, Y+5	; 0x05
 eb6:	56 01       	movw	r10, r12
 eb8:	ce 2c       	mov	r12, r14
 eba:	72 01       	movw	r14, r4
 ebc:	49 81       	ldd	r20, Y+1	; 0x01
 ebe:	5a 81       	ldd	r21, Y+2	; 0x02
 ec0:	6b 81       	ldd	r22, Y+3	; 0x03
 ec2:	c3 01       	movw	r24, r6
 ec4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <prvInitialiseNewTask>
 ec8:	8c 81       	ldd	r24, Y+4	; 0x04
 eca:	9d 81       	ldd	r25, Y+5	; 0x05
 ecc:	0e 94 35 08 	call	0x106a	; 0x106a <prvAddNewTaskToReadyList>
 ed0:	0f 90       	pop	r0
 ed2:	0f 90       	pop	r0
 ed4:	0f 90       	pop	r0
 ed6:	81 e0       	ldi	r24, 0x01	; 1
 ed8:	01 c0       	rjmp	.+2      	; 0xedc <xTaskCreate+0xa4>
 eda:	8f ef       	ldi	r24, 0xFF	; 255
 edc:	0f 90       	pop	r0
 ede:	0f 90       	pop	r0
 ee0:	0f 90       	pop	r0
 ee2:	0f 90       	pop	r0
 ee4:	0f 90       	pop	r0
 ee6:	df 91       	pop	r29
 ee8:	cf 91       	pop	r28
 eea:	1f 91       	pop	r17
 eec:	0f 91       	pop	r16
 eee:	ff 90       	pop	r15
 ef0:	ef 90       	pop	r14
 ef2:	df 90       	pop	r13
 ef4:	cf 90       	pop	r12
 ef6:	bf 90       	pop	r11
 ef8:	af 90       	pop	r10
 efa:	9f 90       	pop	r9
 efc:	8f 90       	pop	r8
 efe:	7f 90       	pop	r7
 f00:	6f 90       	pop	r6
 f02:	5f 90       	pop	r5
 f04:	4f 90       	pop	r4
 f06:	08 95       	ret

Disassembly of section .text.vTaskResume:

00001622 <vTaskResume>:
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	20 91 e1 06 	lds	r18, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    162e:	30 91 e2 06 	lds	r19, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	61 f1       	breq	.+88     	; 0x1690 <vTaskResume+0x6e>
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	51 f1       	breq	.+84     	; 0x1690 <vTaskResume+0x6e>
    163c:	ec 01       	movw	r28, r24
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	0f 92       	push	r0
    1644:	0e 94 57 0f 	call	0x1eae	; 0x1eae <prvTaskIsTaskSuspended>
    1648:	88 23       	and	r24, r24
    164a:	01 f1       	breq	.+64     	; 0x168c <vTaskResume+0x6a>
    164c:	8e 01       	movw	r16, r28
    164e:	0e 5f       	subi	r16, 0xFE	; 254
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	c8 01       	movw	r24, r16
    1654:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
    1658:	8e 89       	ldd	r24, Y+22	; 0x16
    165a:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <uxTopReadyPriority>
    165e:	98 17       	cp	r25, r24
    1660:	10 f4       	brcc	.+4      	; 0x1666 <vTaskResume+0x44>
    1662:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxTopReadyPriority>
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 01       	movw	r18, r24
    166a:	22 0f       	add	r18, r18
    166c:	33 1f       	adc	r19, r19
    166e:	22 0f       	add	r18, r18
    1670:	33 1f       	adc	r19, r19
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	82 0f       	add	r24, r18
    1678:	93 1f       	adc	r25, r19
    167a:	b8 01       	movw	r22, r16
    167c:	86 5b       	subi	r24, 0xB6	; 182
    167e:	99 4f       	sbci	r25, 0xF9	; 249
    1680:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
    1684:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    1688:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

00001a68 <vTaskStartScheduler>:
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ef 92       	push	r14
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	0f 2e       	mov	r0, r31
    1a74:	f7 ed       	ldi	r31, 0xD7	; 215
    1a76:	cf 2e       	mov	r12, r31
    1a78:	f6 e0       	ldi	r31, 0x06	; 6
    1a7a:	df 2e       	mov	r13, r31
    1a7c:	f0 2d       	mov	r31, r0
    1a7e:	e1 2c       	mov	r14, r1
    1a80:	00 e0       	ldi	r16, 0x00	; 0
    1a82:	10 e0       	ldi	r17, 0x00	; 0
    1a84:	24 e6       	ldi	r18, 0x64	; 100
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	44 e0       	ldi	r20, 0x04	; 4
    1a8a:	51 e0       	ldi	r21, 0x01	; 1
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	8c ec       	ldi	r24, 0xCC	; 204
    1a90:	91 e1       	ldi	r25, 0x11	; 17
    1a92:	0e 94 1c 07 	call	0xe38	; 0xe38 <xTaskCreate>
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	81 f4       	brne	.+32     	; 0x1aba <vTaskStartScheduler+0x52>
    1a9a:	f8 94       	cli
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	9f ef       	ldi	r25, 0xFF	; 255
    1aa0:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <xNextTaskUnblockTime+0x1>
    1aa4:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <xNextTaskUnblockTime>
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xSchedulerRunning>
    1aae:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <xTickCount+0x1>
    1ab2:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <xTickCount>
    1ab6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <xPortStartScheduler>
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	08 95       	ret

Disassembly of section .text.vTaskEndScheduler:

0000235e <vTaskEndScheduler>:

void vTaskSuspendAll( void )
{
    /* A critical section is not required as the variable is of type
     * BaseType_t.  Please read Richard Barry's reply in the following link to a
     * post in the FreeRTOS support forum before reporting this as a bug! -
    235e:	f8 94       	cli
     * https://goo.gl/wu4acr */
    2360:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <xSchedulerRunning>

    2364:	0e 94 ef 11 	call	0x23de	; 0x23de <vPortEndScheduler>
    2368:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

0000236a <vTaskSuspendAll>:
    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    236a:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <uxSchedulerSuspended>
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <uxSchedulerSuspended>
    2374:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

000005e0 <xTaskIncrementTick>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <uxSchedulerSuspended>
 5f0:	81 11       	cpse	r24, r1
 5f2:	73 c0       	rjmp	.+230    	; 0x6da <xTaskIncrementTick+0xfa>
 5f4:	e0 90 db 06 	lds	r14, 0x06DB	; 0x8006db <xTickCount>
 5f8:	f0 90 dc 06 	lds	r15, 0x06DC	; 0x8006dc <xTickCount+0x1>
 5fc:	8f ef       	ldi	r24, 0xFF	; 255
 5fe:	e8 1a       	sub	r14, r24
 600:	f8 0a       	sbc	r15, r24
 602:	f0 92 dc 06 	sts	0x06DC, r15	; 0x8006dc <xTickCount+0x1>
 606:	e0 92 db 06 	sts	0x06DB, r14	; 0x8006db <xTickCount>
 60a:	e1 14       	cp	r14, r1
 60c:	f1 04       	cpc	r15, r1
 60e:	b9 f4       	brne	.+46     	; 0x63e <xTaskIncrementTick+0x5e>
 610:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxDelayedTaskList>
 614:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxDelayedTaskList+0x1>
 618:	20 91 dd 06 	lds	r18, 0x06DD	; 0x8006dd <pxOverflowDelayedTaskList>
 61c:	30 91 de 06 	lds	r19, 0x06DE	; 0x8006de <pxOverflowDelayedTaskList+0x1>
 620:	30 93 e0 06 	sts	0x06E0, r19	; 0x8006e0 <pxDelayedTaskList+0x1>
 624:	20 93 df 06 	sts	0x06DF, r18	; 0x8006df <pxDelayedTaskList>
 628:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <pxOverflowDelayedTaskList+0x1>
 62c:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <pxOverflowDelayedTaskList>
 630:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <xNumOfOverflows>
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xNumOfOverflows>
 63a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvResetNextTaskUnblockTime>
 63e:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <xNextTaskUnblockTime>
 642:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <xNextTaskUnblockTime+0x1>
 646:	e8 16       	cp	r14, r24
 648:	f9 06       	cpc	r15, r25
 64a:	08 f4       	brcc	.+2      	; 0x64e <xTaskIncrementTick+0x6e>
 64c:	4b c0       	rjmp	.+150    	; 0x6e4 <xTaskIncrementTick+0x104>
 64e:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxDelayedTaskList>
 652:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxDelayedTaskList+0x1>
 656:	80 81       	ld	r24, Z
 658:	81 11       	cpse	r24, r1
 65a:	07 c0       	rjmp	.+14     	; 0x66a <xTaskIncrementTick+0x8a>
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	9f ef       	ldi	r25, 0xFF	; 255
 660:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <xNextTaskUnblockTime+0x1>
 664:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <xNextTaskUnblockTime>
 668:	3d c0       	rjmp	.+122    	; 0x6e4 <xTaskIncrementTick+0x104>
 66a:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxDelayedTaskList>
 66e:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxDelayedTaskList+0x1>
 672:	05 80       	ldd	r0, Z+5	; 0x05
 674:	f6 81       	ldd	r31, Z+6	; 0x06
 676:	e0 2d       	mov	r30, r0
 678:	c6 81       	ldd	r28, Z+6	; 0x06
 67a:	d7 81       	ldd	r29, Z+7	; 0x07
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	9b 81       	ldd	r25, Y+3	; 0x03
 680:	e8 16       	cp	r14, r24
 682:	f9 06       	cpc	r15, r25
 684:	28 f4       	brcc	.+10     	; 0x690 <xTaskIncrementTick+0xb0>
 686:	90 93 da 06 	sts	0x06DA, r25	; 0x8006da <xNextTaskUnblockTime+0x1>
 68a:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <xNextTaskUnblockTime>
 68e:	2a c0       	rjmp	.+84     	; 0x6e4 <xTaskIncrementTick+0x104>
 690:	8e 01       	movw	r16, r28
 692:	0e 5f       	subi	r16, 0xFE	; 254
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	c8 01       	movw	r24, r16
 698:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
 69c:	8c 89       	ldd	r24, Y+20	; 0x14
 69e:	9d 89       	ldd	r25, Y+21	; 0x15
 6a0:	89 2b       	or	r24, r25
 6a2:	21 f0       	breq	.+8      	; 0x6ac <xTaskIncrementTick+0xcc>
 6a4:	ce 01       	movw	r24, r28
 6a6:	0c 96       	adiw	r24, 0x0c	; 12
 6a8:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
 6ac:	8e 89       	ldd	r24, Y+22	; 0x16
 6ae:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <uxTopReadyPriority>
 6b2:	98 17       	cp	r25, r24
 6b4:	10 f4       	brcc	.+4      	; 0x6ba <xTaskIncrementTick+0xda>
 6b6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxTopReadyPriority>
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	9c 01       	movw	r18, r24
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	22 0f       	add	r18, r18
 6c4:	33 1f       	adc	r19, r19
 6c6:	22 0f       	add	r18, r18
 6c8:	33 1f       	adc	r19, r19
 6ca:	82 0f       	add	r24, r18
 6cc:	93 1f       	adc	r25, r19
 6ce:	b8 01       	movw	r22, r16
 6d0:	86 5b       	subi	r24, 0xB6	; 182
 6d2:	99 4f       	sbci	r25, 0xF9	; 249
 6d4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
 6d8:	ba cf       	rjmp	.-140    	; 0x64e <xTaskIncrementTick+0x6e>
 6da:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxPendedTicks>
 6de:	8f 5f       	subi	r24, 0xFF	; 255
 6e0:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <uxPendedTicks>
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

00000c90 <xTaskResumeAll>:
 c90:	0f 93       	push	r16
 c92:	1f 93       	push	r17
 c94:	cf 93       	push	r28
 c96:	df 93       	push	r29
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	f8 94       	cli
 c9c:	0f 92       	push	r0
 c9e:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <uxSchedulerSuspended>
 ca2:	81 50       	subi	r24, 0x01	; 1
 ca4:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <uxSchedulerSuspended>
 ca8:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <uxSchedulerSuspended>
 cac:	81 11       	cpse	r24, r1
 cae:	52 c0       	rjmp	.+164    	; 0xd54 <xTaskResumeAll+0xc4>
 cb0:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxCurrentNumberOfTasks>
 cb4:	81 11       	cpse	r24, r1
 cb6:	33 c0       	rjmp	.+102    	; 0xd1e <xTaskResumeAll+0x8e>
 cb8:	4d c0       	rjmp	.+154    	; 0xd54 <xTaskResumeAll+0xc4>
 cba:	e0 91 bb 06 	lds	r30, 0x06BB	; 0x8006bb <xPendingReadyList+0x5>
 cbe:	f0 91 bc 06 	lds	r31, 0x06BC	; 0x8006bc <xPendingReadyList+0x6>
 cc2:	c6 81       	ldd	r28, Z+6	; 0x06
 cc4:	d7 81       	ldd	r29, Z+7	; 0x07
 cc6:	ce 01       	movw	r24, r28
 cc8:	0c 96       	adiw	r24, 0x0c	; 12
 cca:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
 cce:	8e 01       	movw	r16, r28
 cd0:	0e 5f       	subi	r16, 0xFE	; 254
 cd2:	1f 4f       	sbci	r17, 0xFF	; 255
 cd4:	c8 01       	movw	r24, r16
 cd6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
 cda:	8e 89       	ldd	r24, Y+22	; 0x16
 cdc:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <uxTopReadyPriority>
 ce0:	98 17       	cp	r25, r24
 ce2:	10 f4       	brcc	.+4      	; 0xce8 <xTaskResumeAll+0x58>
 ce4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxTopReadyPriority>
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	9c 01       	movw	r18, r24
 cec:	22 0f       	add	r18, r18
 cee:	33 1f       	adc	r19, r19
 cf0:	22 0f       	add	r18, r18
 cf2:	33 1f       	adc	r19, r19
 cf4:	22 0f       	add	r18, r18
 cf6:	33 1f       	adc	r19, r19
 cf8:	82 0f       	add	r24, r18
 cfa:	93 1f       	adc	r25, r19
 cfc:	b8 01       	movw	r22, r16
 cfe:	86 5b       	subi	r24, 0xB6	; 182
 d00:	99 4f       	sbci	r25, 0xF9	; 249
 d02:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
 d06:	9e 89       	ldd	r25, Y+22	; 0x16
 d08:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxCurrentTCB>
 d0c:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
 d10:	86 89       	ldd	r24, Z+22	; 0x16
 d12:	98 17       	cp	r25, r24
 d14:	30 f0       	brcs	.+12     	; 0xd22 <xTaskResumeAll+0x92>
 d16:	81 e0       	ldi	r24, 0x01	; 1
 d18:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xYieldPending>
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <xTaskResumeAll+0x92>
 d1e:	c0 e0       	ldi	r28, 0x00	; 0
 d20:	d0 e0       	ldi	r29, 0x00	; 0
 d22:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xPendingReadyList>
 d26:	81 11       	cpse	r24, r1
 d28:	c8 cf       	rjmp	.-112    	; 0xcba <xTaskResumeAll+0x2a>
 d2a:	cd 2b       	or	r28, r29
 d2c:	11 f0       	breq	.+4      	; 0xd32 <xTaskResumeAll+0xa2>
 d2e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvResetNextTaskUnblockTime>
 d32:	c0 91 f1 06 	lds	r28, 0x06F1	; 0x8006f1 <uxPendedTicks>
 d36:	cc 23       	and	r28, r28
 d38:	59 f0       	breq	.+22     	; 0xd50 <xTaskResumeAll+0xc0>
 d3a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <xTaskIncrementTick>
 d3e:	88 23       	and	r24, r24
 d40:	19 f0       	breq	.+6      	; 0xd48 <xTaskResumeAll+0xb8>
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xYieldPending>
 d48:	c1 50       	subi	r28, 0x01	; 1
 d4a:	b9 f7       	brne	.-18     	; 0xd3a <xTaskResumeAll+0xaa>
 d4c:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <uxPendedTicks>
 d50:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <xYieldPending>
 d54:	0f 90       	pop	r0
 d56:	0f be       	out	0x3f, r0	; 63
 d58:	80 e0       	ldi	r24, 0x00	; 0
 d5a:	df 91       	pop	r29
 d5c:	cf 91       	pop	r28
 d5e:	1f 91       	pop	r17
 d60:	0f 91       	pop	r16
 d62:	08 95       	ret

Disassembly of section .text.vTaskDelay:

00002036 <vTaskDelay>:
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	ec 01       	movw	r28, r24
    203c:	89 2b       	or	r24, r25
    203e:	49 f0       	breq	.+18     	; 0x2052 <vTaskDelay+0x1c>
    2040:	0e 94 b5 11 	call	0x236a	; 0x236a <vTaskSuspendAll>
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	ce 01       	movw	r24, r28
    2048:	0e 94 dd 07 	call	0xfba	; 0xfba <prvAddCurrentTaskToDelayedList>
    204c:	0e 94 48 06 	call	0xc90	; 0xc90 <xTaskResumeAll>
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <vTaskDelay+0x1e>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	81 11       	cpse	r24, r1
    2056:	02 c0       	rjmp	.+4      	; 0x205c <vTaskDelay+0x26>
    2058:	0e 94 84 07 	call	0xf08	; 0xf08 <vPortYield>
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

00001116 <vTaskSwitchContext>:
    1116:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <uxSchedulerSuspended>
    111a:	88 23       	and	r24, r24
    111c:	21 f0       	breq	.+8      	; 0x1126 <vTaskSwitchContext+0x10>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xYieldPending>
    1124:	08 95       	ret
    1126:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <xYieldPending>
    112a:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <uxTopReadyPriority>
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <vTaskSwitchContext+0x1c>
    1130:	21 50       	subi	r18, 0x01	; 1
    1132:	82 2f       	mov	r24, r18
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
    1148:	e6 5b       	subi	r30, 0xB6	; 182
    114a:	f9 4f       	sbci	r31, 0xF9	; 249
    114c:	30 81       	ld	r19, Z
    114e:	33 23       	and	r19, r19
    1150:	79 f3       	breq	.-34     	; 0x1130 <vTaskSwitchContext+0x1a>
    1152:	ac 01       	movw	r20, r24
    1154:	44 0f       	add	r20, r20
    1156:	55 1f       	adc	r21, r21
    1158:	44 0f       	add	r20, r20
    115a:	55 1f       	adc	r21, r21
    115c:	44 0f       	add	r20, r20
    115e:	55 1f       	adc	r21, r21
    1160:	48 0f       	add	r20, r24
    1162:	59 1f       	adc	r21, r25
    1164:	df 01       	movw	r26, r30
    1166:	01 80       	ldd	r0, Z+1	; 0x01
    1168:	f2 81       	ldd	r31, Z+2	; 0x02
    116a:	e0 2d       	mov	r30, r0
    116c:	02 80       	ldd	r0, Z+2	; 0x02
    116e:	f3 81       	ldd	r31, Z+3	; 0x03
    1170:	e0 2d       	mov	r30, r0
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	fc 93       	st	X, r31
    1176:	ee 93       	st	-X, r30
    1178:	11 97       	sbiw	r26, 0x01	; 1
    117a:	43 5b       	subi	r20, 0xB3	; 179
    117c:	59 4f       	sbci	r21, 0xF9	; 249
    117e:	e4 17       	cp	r30, r20
    1180:	f5 07       	cpc	r31, r21
    1182:	29 f4       	brne	.+10     	; 0x118e <vTaskSwitchContext+0x78>
    1184:	42 81       	ldd	r20, Z+2	; 0x02
    1186:	53 81       	ldd	r21, Z+3	; 0x03
    1188:	fd 01       	movw	r30, r26
    118a:	52 83       	std	Z+2, r21	; 0x02
    118c:	41 83       	std	Z+1, r20	; 0x01
    118e:	fc 01       	movw	r30, r24
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	8e 0f       	add	r24, r30
    119e:	9f 1f       	adc	r25, r31
    11a0:	fc 01       	movw	r30, r24
    11a2:	e6 5b       	subi	r30, 0xB6	; 182
    11a4:	f9 4f       	sbci	r31, 0xF9	; 249
    11a6:	01 80       	ldd	r0, Z+1	; 0x01
    11a8:	f2 81       	ldd	r31, Z+2	; 0x02
    11aa:	e0 2d       	mov	r30, r0
    11ac:	86 81       	ldd	r24, Z+6	; 0x06
    11ae:	97 81       	ldd	r25, Z+7	; 0x07
    11b0:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <pxCurrentTCB+0x1>
    11b4:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <pxCurrentTCB>
    11b8:	20 93 f3 06 	sts	0x06F3, r18	; 0x8006f3 <uxTopReadyPriority>
    11bc:	08 95       	ret

Disassembly of section .text.vTaskSuspend:

000011be <vTaskSuspend>:
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	0f 92       	push	r0
    11ce:	89 2b       	or	r24, r25
    11d0:	21 f4       	brne	.+8      	; 0x11da <vTaskSuspend+0x1c>
    11d2:	c0 91 e1 06 	lds	r28, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    11d6:	d0 91 e2 06 	lds	r29, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    11da:	8e 01       	movw	r16, r28
    11dc:	0e 5f       	subi	r16, 0xFE	; 254
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
    11e6:	8c 89       	ldd	r24, Y+20	; 0x14
    11e8:	9d 89       	ldd	r25, Y+21	; 0x15
    11ea:	89 2b       	or	r24, r25
    11ec:	21 f0       	breq	.+8      	; 0x11f6 <vTaskSuspend+0x38>
    11ee:	ce 01       	movw	r24, r28
    11f0:	0c 96       	adiw	r24, 0x0c	; 12
    11f2:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
    11f6:	b8 01       	movw	r22, r16
    11f8:	84 ea       	ldi	r24, 0xA4	; 164
    11fa:	96 e0       	ldi	r25, 0x06	; 6
    11fc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
    1200:	8d a1       	ldd	r24, Y+37	; 0x25
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	09 f4       	brne	.+2      	; 0x1208 <vTaskSuspend+0x4a>
    1206:	1d a2       	std	Y+37, r1	; 0x25
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xSchedulerRunning>
    1210:	88 23       	and	r24, r24
    1212:	39 f0       	breq	.+14     	; 0x1222 <vTaskSuspend+0x64>
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	0f 92       	push	r0
    121a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <prvResetNextTaskUnblockTime>
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    1226:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    122a:	c8 17       	cp	r28, r24
    122c:	d9 07       	cpc	r29, r25
    122e:	a1 f4       	brne	.+40     	; 0x1258 <vTaskSuspend+0x9a>
    1230:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xSchedulerRunning>
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <vTaskSuspend+0x80>
    1238:	0e 94 84 07 	call	0xf08	; 0xf08 <vPortYield>
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <vTaskSuspend+0x9a>
    123e:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <xSuspendedTaskList>
    1242:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxCurrentNumberOfTasks>
    1246:	98 13       	cpse	r25, r24
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <vTaskSuspend+0x96>
    124a:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <pxCurrentTCB+0x1>
    124e:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <pxCurrentTCB>
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <vTaskSuspend+0x9a>
    1254:	0e 94 8b 08 	call	0x1116	; 0x1116 <vTaskSwitchContext>
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

00002124 <vTaskPlaceOnEventList>:
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	eb 01       	movw	r28, r22
    212a:	60 91 e1 06 	lds	r22, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    212e:	70 91 e2 06 	lds	r23, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    2132:	64 5f       	subi	r22, 0xF4	; 244
    2134:	7f 4f       	sbci	r23, 0xFF	; 255
    2136:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <vListInsert>
    213a:	61 e0       	ldi	r22, 0x01	; 1
    213c:	ce 01       	movw	r24, r28
    213e:	0e 94 dd 07 	call	0xfba	; 0xfba <prvAddCurrentTaskToDelayedList>
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromEventList:

00001262 <xTaskRemoveFromEventList>:
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	a8 2f       	mov	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	05 96       	adiw	r24, 0x05	; 5
    1270:	a1 1d       	adc	r26, r1
    1272:	fc 01       	movw	r30, r24
    1274:	5a 2f       	mov	r21, r26
    1276:	0e 94 6d 11 	call	0x22da	; 0x22da <__xload_2>
    127a:	fb 01       	movw	r30, r22
    127c:	c6 81       	ldd	r28, Z+6	; 0x06
    127e:	d7 81       	ldd	r29, Z+7	; 0x07
    1280:	8e 01       	movw	r16, r28
    1282:	04 5f       	subi	r16, 0xF4	; 244
    1284:	1f 4f       	sbci	r17, 0xFF	; 255
    1286:	c8 01       	movw	r24, r16
    1288:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
    128c:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <uxSchedulerSuspended>
    1290:	81 11       	cpse	r24, r1
    1292:	1c c0       	rjmp	.+56     	; 0x12cc <xTaskRemoveFromEventList+0x6a>
    1294:	0a 50       	subi	r16, 0x0A	; 10
    1296:	11 09       	sbc	r17, r1
    1298:	c8 01       	movw	r24, r16
    129a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <uxListRemove>
    129e:	8e 89       	ldd	r24, Y+22	; 0x16
    12a0:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <uxTopReadyPriority>
    12a4:	98 17       	cp	r25, r24
    12a6:	10 f4       	brcc	.+4      	; 0x12ac <xTaskRemoveFromEventList+0x4a>
    12a8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxTopReadyPriority>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	b8 01       	movw	r22, r16
    12c2:	86 5b       	subi	r24, 0xB6	; 182
    12c4:	99 4f       	sbci	r25, 0xF9	; 249
    12c6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <xTaskRemoveFromEventList+0x74>
    12cc:	b8 01       	movw	r22, r16
    12ce:	86 eb       	ldi	r24, 0xB6	; 182
    12d0:	96 e0       	ldi	r25, 0x06	; 6
    12d2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <vListInsertEnd>
    12d6:	9e 89       	ldd	r25, Y+22	; 0x16
    12d8:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxCurrentTCB>
    12dc:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxCurrentTCB+0x1>
    12e0:	86 89       	ldd	r24, Z+22	; 0x16
    12e2:	89 17       	cp	r24, r25
    12e4:	20 f4       	brcc	.+8      	; 0x12ee <xTaskRemoveFromEventList+0x8c>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xYieldPending>
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <xTaskRemoveFromEventList+0x8e>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

Disassembly of section .text.vTaskInternalSetTimeOutState:

00002268 <vTaskInternalSetTimeOutState>:
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
        }
        #endif
    }
    else
    2268:	20 91 ef 06 	lds	r18, 0x06EF	; 0x8006ef <xNumOfOverflows>
    226c:	fc 01       	movw	r30, r24
    226e:	20 83       	st	Z, r18
    {
    2270:	20 91 db 06 	lds	r18, 0x06DB	; 0x8006db <xTickCount>
    2274:	30 91 dc 06 	lds	r19, 0x06DC	; 0x8006dc <xTickCount+0x1>
    2278:	32 83       	std	Z+2, r19	; 0x02
    227a:	21 83       	std	Z+1, r18	; 0x01
    227c:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

0000169a <xTaskCheckForTimeOut>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	0f 92       	push	r0
    16a6:	e0 91 db 06 	lds	r30, 0x06DB	; 0x8006db <xTickCount>
    16aa:	f0 91 dc 06 	lds	r31, 0x06DC	; 0x8006dc <xTickCount+0x1>
    16ae:	dc 01       	movw	r26, r24
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	4d 91       	ld	r20, X+
    16b4:	5c 91       	ld	r21, X
    16b6:	12 97       	sbiw	r26, 0x02	; 2
    16b8:	df 01       	movw	r26, r30
    16ba:	a4 1b       	sub	r26, r20
    16bc:	b5 0b       	sbc	r27, r21
    16be:	eb 01       	movw	r28, r22
    16c0:	28 81       	ld	r18, Y
    16c2:	39 81       	ldd	r19, Y+1	; 0x01
    16c4:	2f 3f       	cpi	r18, 0xFF	; 255
    16c6:	df ef       	ldi	r29, 0xFF	; 255
    16c8:	3d 07       	cpc	r19, r29
    16ca:	d1 f0       	breq	.+52     	; 0x1700 <xTaskCheckForTimeOut+0x66>
    16cc:	ec 01       	movw	r28, r24
    16ce:	18 81       	ld	r17, Y
    16d0:	c0 91 ef 06 	lds	r28, 0x06EF	; 0x8006ef <xNumOfOverflows>
    16d4:	1c 17       	cp	r17, r28
    16d6:	19 f0       	breq	.+6      	; 0x16de <xTaskCheckForTimeOut+0x44>
    16d8:	e4 17       	cp	r30, r20
    16da:	f5 07       	cpc	r31, r21
    16dc:	98 f4       	brcc	.+38     	; 0x1704 <xTaskCheckForTimeOut+0x6a>
    16de:	a2 17       	cp	r26, r18
    16e0:	b3 07       	cpc	r27, r19
    16e2:	48 f4       	brcc	.+18     	; 0x16f6 <xTaskCheckForTimeOut+0x5c>
    16e4:	fb 01       	movw	r30, r22
    16e6:	2a 1b       	sub	r18, r26
    16e8:	3b 0b       	sbc	r19, r27
    16ea:	31 83       	std	Z+1, r19	; 0x01
    16ec:	20 83       	st	Z, r18
    16ee:	0e 94 34 11 	call	0x2268	; 0x2268 <vTaskInternalSetTimeOutState>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <xTaskCheckForTimeOut+0x6c>
    16f6:	fb 01       	movw	r30, r22
    16f8:	11 82       	std	Z+1, r1	; 0x01
    16fa:	10 82       	st	Z, r1
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <xTaskCheckForTimeOut+0x6c>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <xTaskCheckForTimeOut+0x6c>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

000023be <vTaskMissedYield>:
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xYieldPending>
    23c4:	08 95       	ret

Disassembly of section .text:

000023a2 <__cmpsf2>:
    23a2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__fp_cmp>
    23a6:	08 f4       	brcc	.+2      	; 0x23aa <__cmpsf2+0x8>
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	08 95       	ret

Disassembly of section .text:

00001ac6 <__fixunssfsi>:
    1ac6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_splitA>
    1aca:	88 f0       	brcs	.+34     	; 0x1aee <__fixunssfsi+0x28>
    1acc:	9f 57       	subi	r25, 0x7F	; 127
    1ace:	98 f0       	brcs	.+38     	; 0x1af6 <__fixunssfsi+0x30>
    1ad0:	b9 2f       	mov	r27, r25
    1ad2:	99 27       	eor	r25, r25
    1ad4:	b7 51       	subi	r27, 0x17	; 23
    1ad6:	b0 f0       	brcs	.+44     	; 0x1b04 <__fixunssfsi+0x3e>
    1ad8:	e1 f0       	breq	.+56     	; 0x1b12 <__fixunssfsi+0x4c>
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	88 1f       	adc	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	1a f0       	brmi	.+6      	; 0x1aea <__fixunssfsi+0x24>
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__fixunssfsi+0x14>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <__fixunssfsi+0x4c>
    1aea:	b1 30       	cpi	r27, 0x01	; 1
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <__fixunssfsi+0x4c>
    1aee:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_zero>
    1af2:	b1 e0       	ldi	r27, 0x01	; 1
    1af4:	08 95       	ret
    1af6:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__fp_zero>
    1afa:	67 2f       	mov	r22, r23
    1afc:	78 2f       	mov	r23, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	b8 5f       	subi	r27, 0xF8	; 248
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <__fixunssfsi+0x4c>
    1b04:	b9 3f       	cpi	r27, 0xF9	; 249
    1b06:	cc f3       	brlt	.-14     	; 0x1afa <__fixunssfsi+0x34>
    1b08:	86 95       	lsr	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b3 95       	inc	r27
    1b10:	d9 f7       	brne	.-10     	; 0x1b08 <__fixunssfsi+0x42>
    1b12:	3e f4       	brtc	.+14     	; 0x1b22 <__fixunssfsi+0x5c>
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	61 95       	neg	r22
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	08 95       	ret

Disassembly of section .text:

000015a8 <__floatunsisf>:
    15a8:	e8 94       	clt
    15aa:	09 c0       	rjmp	.+18     	; 0x15be <__floatsisf+0x12>

000015ac <__floatsisf>:
    15ac:	97 fb       	bst	r25, 7
    15ae:	3e f4       	brtc	.+14     	; 0x15be <__floatsisf+0x12>
    15b0:	90 95       	com	r25
    15b2:	80 95       	com	r24
    15b4:	70 95       	com	r23
    15b6:	61 95       	neg	r22
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	99 23       	and	r25, r25
    15c0:	a9 f0       	breq	.+42     	; 0x15ec <__floatsisf+0x40>
    15c2:	f9 2f       	mov	r31, r25
    15c4:	96 e9       	ldi	r25, 0x96	; 150
    15c6:	bb 27       	eor	r27, r27
    15c8:	93 95       	inc	r25
    15ca:	f6 95       	lsr	r31
    15cc:	87 95       	ror	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	b7 95       	ror	r27
    15d4:	f1 11       	cpse	r31, r1
    15d6:	f8 cf       	rjmp	.-16     	; 0x15c8 <__floatsisf+0x1c>
    15d8:	fa f4       	brpl	.+62     	; 0x1618 <__floatsisf+0x6c>
    15da:	bb 0f       	add	r27, r27
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <__floatsisf+0x36>
    15de:	60 ff       	sbrs	r22, 0
    15e0:	1b c0       	rjmp	.+54     	; 0x1618 <__floatsisf+0x6c>
    15e2:	6f 5f       	subi	r22, 0xFF	; 255
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <__floatsisf+0x6c>
    15ec:	88 23       	and	r24, r24
    15ee:	11 f0       	breq	.+4      	; 0x15f4 <__floatsisf+0x48>
    15f0:	96 e9       	ldi	r25, 0x96	; 150
    15f2:	11 c0       	rjmp	.+34     	; 0x1616 <__floatsisf+0x6a>
    15f4:	77 23       	and	r23, r23
    15f6:	21 f0       	breq	.+8      	; 0x1600 <__floatsisf+0x54>
    15f8:	9e e8       	ldi	r25, 0x8E	; 142
    15fa:	87 2f       	mov	r24, r23
    15fc:	76 2f       	mov	r23, r22
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <__floatsisf+0x5e>
    1600:	66 23       	and	r22, r22
    1602:	71 f0       	breq	.+28     	; 0x1620 <__floatsisf+0x74>
    1604:	96 e8       	ldi	r25, 0x86	; 134
    1606:	86 2f       	mov	r24, r22
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	2a f0       	brmi	.+10     	; 0x1618 <__floatsisf+0x6c>
    160e:	9a 95       	dec	r25
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	da f7       	brpl	.-10     	; 0x160e <__floatsisf+0x62>
    1618:	88 0f       	add	r24, r24
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret

Disassembly of section .text:

00001d9c <__fp_cmp>:
    1d9c:	99 0f       	add	r25, r25
    1d9e:	00 08       	sbc	r0, r0
    1da0:	55 0f       	add	r21, r21
    1da2:	aa 0b       	sbc	r26, r26
    1da4:	e0 e8       	ldi	r30, 0x80	; 128
    1da6:	fe ef       	ldi	r31, 0xFE	; 254
    1da8:	16 16       	cp	r1, r22
    1daa:	17 06       	cpc	r1, r23
    1dac:	e8 07       	cpc	r30, r24
    1dae:	f9 07       	cpc	r31, r25
    1db0:	c0 f0       	brcs	.+48     	; 0x1de2 <__fp_cmp+0x46>
    1db2:	12 16       	cp	r1, r18
    1db4:	13 06       	cpc	r1, r19
    1db6:	e4 07       	cpc	r30, r20
    1db8:	f5 07       	cpc	r31, r21
    1dba:	98 f0       	brcs	.+38     	; 0x1de2 <__fp_cmp+0x46>
    1dbc:	62 1b       	sub	r22, r18
    1dbe:	73 0b       	sbc	r23, r19
    1dc0:	84 0b       	sbc	r24, r20
    1dc2:	95 0b       	sbc	r25, r21
    1dc4:	39 f4       	brne	.+14     	; 0x1dd4 <__fp_cmp+0x38>
    1dc6:	0a 26       	eor	r0, r26
    1dc8:	61 f0       	breq	.+24     	; 0x1de2 <__fp_cmp+0x46>
    1dca:	23 2b       	or	r18, r19
    1dcc:	24 2b       	or	r18, r20
    1dce:	25 2b       	or	r18, r21
    1dd0:	21 f4       	brne	.+8      	; 0x1dda <__fp_cmp+0x3e>
    1dd2:	08 95       	ret
    1dd4:	0a 26       	eor	r0, r26
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <__fp_cmp+0x3e>
    1dd8:	a1 40       	sbci	r26, 0x01	; 1
    1dda:	a6 95       	lsr	r26
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	81 1d       	adc	r24, r1
    1de0:	81 1d       	adc	r24, r1
    1de2:	08 95       	ret

Disassembly of section .text:

00001de4 <__fp_split3>:
    1de4:	57 fd       	sbrc	r21, 7
    1de6:	90 58       	subi	r25, 0x80	; 128
    1de8:	44 0f       	add	r20, r20
    1dea:	55 1f       	adc	r21, r21
    1dec:	59 f0       	breq	.+22     	; 0x1e04 <__fp_splitA+0x10>
    1dee:	5f 3f       	cpi	r21, 0xFF	; 255
    1df0:	71 f0       	breq	.+28     	; 0x1e0e <__fp_splitA+0x1a>
    1df2:	47 95       	ror	r20

00001df4 <__fp_splitA>:
    1df4:	88 0f       	add	r24, r24
    1df6:	97 fb       	bst	r25, 7
    1df8:	99 1f       	adc	r25, r25
    1dfa:	61 f0       	breq	.+24     	; 0x1e14 <__fp_splitA+0x20>
    1dfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfe:	79 f0       	breq	.+30     	; 0x1e1e <__fp_splitA+0x2a>
    1e00:	87 95       	ror	r24
    1e02:	08 95       	ret
    1e04:	12 16       	cp	r1, r18
    1e06:	13 06       	cpc	r1, r19
    1e08:	14 06       	cpc	r1, r20
    1e0a:	55 1f       	adc	r21, r21
    1e0c:	f2 cf       	rjmp	.-28     	; 0x1df2 <__fp_split3+0xe>
    1e0e:	46 95       	lsr	r20
    1e10:	f1 df       	rcall	.-30     	; 0x1df4 <__fp_splitA>
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <__fp_splitA+0x30>
    1e14:	16 16       	cp	r1, r22
    1e16:	17 06       	cpc	r1, r23
    1e18:	18 06       	cpc	r1, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	f1 cf       	rjmp	.-30     	; 0x1e00 <__fp_splitA+0xc>
    1e1e:	86 95       	lsr	r24
    1e20:	71 05       	cpc	r23, r1
    1e22:	61 05       	cpc	r22, r1
    1e24:	08 94       	sec
    1e26:	08 95       	ret

Disassembly of section .text:

000022f8 <__fp_zero>:
    22f8:	e8 94       	clt

000022fa <__fp_szero>:
    22fa:	bb 27       	eor	r27, r27
    22fc:	66 27       	eor	r22, r22
    22fe:	77 27       	eor	r23, r23
    2300:	cb 01       	movw	r24, r22
    2302:	97 f9       	bld	r25, 7
    2304:	08 95       	ret

Disassembly of section .text:

000023ac <__gesf2>:
    23ac:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__fp_cmp>
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <__gesf2+0x8>
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	08 95       	ret

Disassembly of section .text:

000023c6 <__mulsf3>:
    23c6:	0e 94 b2 06 	call	0xd64	; 0xd64 <__mulsf3x>
    23ca:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>

Disassembly of section .text:

00000d64 <__mulsf3x>:
 d64:	0f c0       	rjmp	.+30     	; 0xd84 <__mulsf3x+0x20>
 d66:	0e 94 83 11 	call	0x2306	; 0x2306 <__fp_pscA>
 d6a:	38 f0       	brcs	.+14     	; 0xd7a <__mulsf3x+0x16>
 d6c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__fp_pscB>
 d70:	20 f0       	brcs	.+8      	; 0xd7a <__mulsf3x+0x16>
 d72:	95 23       	and	r25, r21
 d74:	11 f0       	breq	.+4      	; 0xd7a <__mulsf3x+0x16>
 d76:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>
 d7a:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__fp_nan>
 d7e:	11 24       	eor	r1, r1
 d80:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_szero>
 d84:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__fp_split3>
 d88:	70 f3       	brcs	.-36     	; 0xd66 <__mulsf3x+0x2>

00000d8a <__mulsf3_pse>:
 d8a:	95 9f       	mul	r25, r21
 d8c:	c1 f3       	breq	.-16     	; 0xd7e <__mulsf3x+0x1a>
 d8e:	95 0f       	add	r25, r21
 d90:	50 e0       	ldi	r21, 0x00	; 0
 d92:	55 1f       	adc	r21, r21
 d94:	62 9f       	mul	r22, r18
 d96:	f0 01       	movw	r30, r0
 d98:	72 9f       	mul	r23, r18
 d9a:	bb 27       	eor	r27, r27
 d9c:	f0 0d       	add	r31, r0
 d9e:	b1 1d       	adc	r27, r1
 da0:	63 9f       	mul	r22, r19
 da2:	aa 27       	eor	r26, r26
 da4:	f0 0d       	add	r31, r0
 da6:	b1 1d       	adc	r27, r1
 da8:	aa 1f       	adc	r26, r26
 daa:	64 9f       	mul	r22, r20
 dac:	66 27       	eor	r22, r22
 dae:	b0 0d       	add	r27, r0
 db0:	a1 1d       	adc	r26, r1
 db2:	66 1f       	adc	r22, r22
 db4:	82 9f       	mul	r24, r18
 db6:	22 27       	eor	r18, r18
 db8:	b0 0d       	add	r27, r0
 dba:	a1 1d       	adc	r26, r1
 dbc:	62 1f       	adc	r22, r18
 dbe:	73 9f       	mul	r23, r19
 dc0:	b0 0d       	add	r27, r0
 dc2:	a1 1d       	adc	r26, r1
 dc4:	62 1f       	adc	r22, r18
 dc6:	83 9f       	mul	r24, r19
 dc8:	a0 0d       	add	r26, r0
 dca:	61 1d       	adc	r22, r1
 dcc:	22 1f       	adc	r18, r18
 dce:	74 9f       	mul	r23, r20
 dd0:	33 27       	eor	r19, r19
 dd2:	a0 0d       	add	r26, r0
 dd4:	61 1d       	adc	r22, r1
 dd6:	23 1f       	adc	r18, r19
 dd8:	84 9f       	mul	r24, r20
 dda:	60 0d       	add	r22, r0
 ddc:	21 1d       	adc	r18, r1
 dde:	82 2f       	mov	r24, r18
 de0:	76 2f       	mov	r23, r22
 de2:	6a 2f       	mov	r22, r26
 de4:	11 24       	eor	r1, r1
 de6:	9f 57       	subi	r25, 0x7F	; 127
 de8:	50 40       	sbci	r21, 0x00	; 0
 dea:	9a f0       	brmi	.+38     	; 0xe12 <__mulsf3_pse+0x88>
 dec:	f1 f0       	breq	.+60     	; 0xe2a <__mulsf3_pse+0xa0>
 dee:	88 23       	and	r24, r24
 df0:	4a f0       	brmi	.+18     	; 0xe04 <__mulsf3_pse+0x7a>
 df2:	ee 0f       	add	r30, r30
 df4:	ff 1f       	adc	r31, r31
 df6:	bb 1f       	adc	r27, r27
 df8:	66 1f       	adc	r22, r22
 dfa:	77 1f       	adc	r23, r23
 dfc:	88 1f       	adc	r24, r24
 dfe:	91 50       	subi	r25, 0x01	; 1
 e00:	50 40       	sbci	r21, 0x00	; 0
 e02:	a9 f7       	brne	.-22     	; 0xdee <__mulsf3_pse+0x64>
 e04:	9e 3f       	cpi	r25, 0xFE	; 254
 e06:	51 05       	cpc	r21, r1
 e08:	80 f0       	brcs	.+32     	; 0xe2a <__mulsf3_pse+0xa0>
 e0a:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>
 e0e:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__fp_szero>
 e12:	5f 3f       	cpi	r21, 0xFF	; 255
 e14:	e4 f3       	brlt	.-8      	; 0xe0e <__mulsf3_pse+0x84>
 e16:	98 3e       	cpi	r25, 0xE8	; 232
 e18:	d4 f3       	brlt	.-12     	; 0xe0e <__mulsf3_pse+0x84>
 e1a:	86 95       	lsr	r24
 e1c:	77 95       	ror	r23
 e1e:	67 95       	ror	r22
 e20:	b7 95       	ror	r27
 e22:	f7 95       	ror	r31
 e24:	e7 95       	ror	r30
 e26:	9f 5f       	subi	r25, 0xFF	; 255
 e28:	c1 f7       	brne	.-16     	; 0xe1a <__mulsf3_pse+0x90>
 e2a:	fe 2b       	or	r31, r30
 e2c:	88 0f       	add	r24, r24
 e2e:	91 1d       	adc	r25, r1
 e30:	96 95       	lsr	r25
 e32:	87 95       	ror	r24
 e34:	97 f9       	bld	r25, 7
 e36:	08 95       	ret

Disassembly of section .text:

00002376 <__fp_inf>:
    2376:	97 f9       	bld	r25, 7
    2378:	9f 67       	ori	r25, 0x7F	; 127
    237a:	80 e8       	ldi	r24, 0x80	; 128
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	08 95       	ret

Disassembly of section .text:

000023ce <__fp_nan>:
    23ce:	9f ef       	ldi	r25, 0xFF	; 255
    23d0:	80 ec       	ldi	r24, 0xC0	; 192
    23d2:	08 95       	ret

Disassembly of section .text:

00002306 <__fp_pscA>:
    2306:	00 24       	eor	r0, r0
    2308:	0a 94       	dec	r0
    230a:	16 16       	cp	r1, r22
    230c:	17 06       	cpc	r1, r23
    230e:	18 06       	cpc	r1, r24
    2310:	09 06       	cpc	r0, r25
    2312:	08 95       	ret

Disassembly of section .text:

00002314 <__fp_pscB>:
    2314:	00 24       	eor	r0, r0
    2316:	0a 94       	dec	r0
    2318:	12 16       	cp	r1, r18
    231a:	13 06       	cpc	r1, r19
    231c:	14 06       	cpc	r1, r20
    231e:	05 06       	cpc	r0, r21
    2320:	08 95       	ret

Disassembly of section .text:

00002148 <__fp_round>:
    2148:	09 2e       	mov	r0, r25
    214a:	03 94       	inc	r0
    214c:	00 0c       	add	r0, r0
    214e:	11 f4       	brne	.+4      	; 0x2154 <__fp_round+0xc>
    2150:	88 23       	and	r24, r24
    2152:	52 f0       	brmi	.+20     	; 0x2168 <__fp_round+0x20>
    2154:	bb 0f       	add	r27, r27
    2156:	40 f4       	brcc	.+16     	; 0x2168 <__fp_round+0x20>
    2158:	bf 2b       	or	r27, r31
    215a:	11 f4       	brne	.+4      	; 0x2160 <__fp_round+0x18>
    215c:	60 ff       	sbrs	r22, 0
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <__fp_round+0x20>
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002062 <__divmodhi4>:
    2062:	97 fb       	bst	r25, 7
    2064:	07 2e       	mov	r0, r23
    2066:	16 f4       	brtc	.+4      	; 0x206c <__divmodhi4+0xa>
    2068:	00 94       	com	r0
    206a:	07 d0       	rcall	.+14     	; 0x207a <__divmodhi4_neg1>
    206c:	77 fd       	sbrc	r23, 7
    206e:	09 d0       	rcall	.+18     	; 0x2082 <__divmodhi4_neg2>
    2070:	0e 94 45 10 	call	0x208a	; 0x208a <__udivmodhi4>
    2074:	07 fc       	sbrc	r0, 7
    2076:	05 d0       	rcall	.+10     	; 0x2082 <__divmodhi4_neg2>
    2078:	3e f4       	brtc	.+14     	; 0x2088 <__divmodhi4_exit>

0000207a <__divmodhi4_neg1>:
    207a:	90 95       	com	r25
    207c:	81 95       	neg	r24
    207e:	9f 4f       	sbci	r25, 0xFF	; 255
    2080:	08 95       	ret

00002082 <__divmodhi4_neg2>:
    2082:	70 95       	com	r23
    2084:	61 95       	neg	r22
    2086:	7f 4f       	sbci	r23, 0xFF	; 255

00002088 <__divmodhi4_exit>:
    2088:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001e28 <__udivmodsi4>:
    1e28:	a1 e2       	ldi	r26, 0x21	; 33
    1e2a:	1a 2e       	mov	r1, r26
    1e2c:	aa 1b       	sub	r26, r26
    1e2e:	bb 1b       	sub	r27, r27
    1e30:	fd 01       	movw	r30, r26
    1e32:	0d c0       	rjmp	.+26     	; 0x1e4e <__udivmodsi4_ep>

00001e34 <__udivmodsi4_loop>:
    1e34:	aa 1f       	adc	r26, r26
    1e36:	bb 1f       	adc	r27, r27
    1e38:	ee 1f       	adc	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	a2 17       	cp	r26, r18
    1e3e:	b3 07       	cpc	r27, r19
    1e40:	e4 07       	cpc	r30, r20
    1e42:	f5 07       	cpc	r31, r21
    1e44:	20 f0       	brcs	.+8      	; 0x1e4e <__udivmodsi4_ep>
    1e46:	a2 1b       	sub	r26, r18
    1e48:	b3 0b       	sbc	r27, r19
    1e4a:	e4 0b       	sbc	r30, r20
    1e4c:	f5 0b       	sbc	r31, r21

00001e4e <__udivmodsi4_ep>:
    1e4e:	66 1f       	adc	r22, r22
    1e50:	77 1f       	adc	r23, r23
    1e52:	88 1f       	adc	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	1a 94       	dec	r1
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <__udivmodsi4_loop>
    1e5a:	60 95       	com	r22
    1e5c:	70 95       	com	r23
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	9b 01       	movw	r18, r22
    1e64:	ac 01       	movw	r20, r24
    1e66:	bd 01       	movw	r22, r26
    1e68:	cf 01       	movw	r24, r30
    1e6a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002008 <__divmodsi4>:
    2008:	05 2e       	mov	r0, r21
    200a:	97 fb       	bst	r25, 7
    200c:	1e f4       	brtc	.+6      	; 0x2014 <__divmodsi4+0xc>
    200e:	00 94       	com	r0
    2010:	0e 94 65 11 	call	0x22ca	; 0x22ca <__negsi2>
    2014:	57 fd       	sbrc	r21, 7
    2016:	07 d0       	rcall	.+14     	; 0x2026 <__divmodsi4_neg2>
    2018:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodsi4>
    201c:	07 fc       	sbrc	r0, 7
    201e:	03 d0       	rcall	.+6      	; 0x2026 <__divmodsi4_neg2>
    2020:	4e f4       	brtc	.+18     	; 0x2034 <__divmodsi4_exit>
    2022:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__negsi2>

00002026 <__divmodsi4_neg2>:
    2026:	50 95       	com	r21
    2028:	40 95       	com	r20
    202a:	30 95       	com	r19
    202c:	21 95       	neg	r18
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	4f 4f       	sbci	r20, 0xFF	; 255
    2032:	5f 4f       	sbci	r21, 0xFF	; 255

00002034 <__divmodsi4_exit>:
    2034:	08 95       	ret

Disassembly of section .text.libgcc.div:

000022ca <__negsi2>:
    22ca:	90 95       	com	r25
    22cc:	80 95       	com	r24
    22ce:	70 95       	com	r23
    22d0:	61 95       	neg	r22
    22d2:	7f 4f       	sbci	r23, 0xFF	; 255
    22d4:	8f 4f       	sbci	r24, 0xFF	; 255
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	08 95       	ret

Disassembly of section .text.libgcc:

00002382 <__tablejump2__>:
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	05 90       	lpm	r0, Z+
    2388:	f4 91       	lpm	r31, Z
    238a:	e0 2d       	mov	r30, r0
    238c:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000021c8 <__umulhisi3>:
    21c8:	a2 9f       	mul	r26, r18
    21ca:	b0 01       	movw	r22, r0
    21cc:	b3 9f       	mul	r27, r19
    21ce:	c0 01       	movw	r24, r0
    21d0:	a3 9f       	mul	r26, r19
    21d2:	70 0d       	add	r23, r0
    21d4:	81 1d       	adc	r24, r1
    21d6:	11 24       	eor	r1, r1
    21d8:	91 1d       	adc	r25, r1
    21da:	b2 9f       	mul	r27, r18
    21dc:	70 0d       	add	r23, r0
    21de:	81 1d       	adc	r24, r1
    21e0:	11 24       	eor	r1, r1
    21e2:	91 1d       	adc	r25, r1
    21e4:	08 95       	ret

Disassembly of section .text.libgcc:

000022da <__xload_2>:
    22da:	57 fd       	sbrc	r21, 7
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__xload_2+0xa>
    22de:	65 91       	lpm	r22, Z+
    22e0:	75 91       	lpm	r23, Z+
    22e2:	08 95       	ret
    22e4:	61 91       	ld	r22, Z+
    22e6:	71 91       	ld	r23, Z+
    22e8:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000208a <__udivmodhi4>:
    208a:	aa 1b       	sub	r26, r26
    208c:	bb 1b       	sub	r27, r27
    208e:	51 e1       	ldi	r21, 0x11	; 17
    2090:	07 c0       	rjmp	.+14     	; 0x20a0 <__udivmodhi4_ep>

00002092 <__udivmodhi4_loop>:
    2092:	aa 1f       	adc	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	a6 17       	cp	r26, r22
    2098:	b7 07       	cpc	r27, r23
    209a:	10 f0       	brcs	.+4      	; 0x20a0 <__udivmodhi4_ep>
    209c:	a6 1b       	sub	r26, r22
    209e:	b7 0b       	sbc	r27, r23

000020a0 <__udivmodhi4_ep>:
    20a0:	88 1f       	adc	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	5a 95       	dec	r21
    20a6:	a9 f7       	brne	.-22     	; 0x2092 <__udivmodhi4_loop>
    20a8:	80 95       	com	r24
    20aa:	90 95       	com	r25
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000023e0 <_fini>:
    23e0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000023e2 <__funcs_on_exit>:
    23e2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000023e4 <__simulator_exit>:
    23e4:	08 95       	ret

Disassembly of section .text.exit:

0000227e <exit>:
    227e:	ec 01       	movw	r28, r24
    2280:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__funcs_on_exit>
    2284:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_fini>
    2288:	ce 01       	movw	r24, r28
    228a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__simulator_exit>
    228e:	ce 01       	movw	r24, r28
    2290:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_Exit>

Disassembly of section .text.memcpy:

00001fa6 <memcpy>:
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	6a 01       	movw	r12, r20
    1fae:	e6 2e       	mov	r14, r22
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	28 0f       	add	r18, r24
    1fb4:	39 1f       	adc	r19, r25
    1fb6:	a2 17       	cp	r26, r18
    1fb8:	b3 07       	cpc	r27, r19
    1fba:	51 f0       	breq	.+20     	; 0x1fd0 <memcpy+0x2a>
    1fbc:	f6 01       	movw	r30, r12
    1fbe:	44 91       	lpm	r20, Z
    1fc0:	e7 fc       	sbrc	r14, 7
    1fc2:	40 81       	ld	r20, Z
    1fc4:	4d 93       	st	X+, r20
    1fc6:	4f ef       	ldi	r20, 0xFF	; 255
    1fc8:	c4 1a       	sub	r12, r20
    1fca:	d4 0a       	sbc	r13, r20
    1fcc:	e4 0a       	sbc	r14, r20
    1fce:	f3 cf       	rjmp	.-26     	; 0x1fb6 <memcpy+0x10>
    1fd0:	ef 90       	pop	r14
    1fd2:	df 90       	pop	r13
    1fd4:	cf 90       	pop	r12
    1fd6:	08 95       	ret

Disassembly of section .text._Exit:

000023d8 <_Exit>:
    23d8:	0e 94 66 00 	call	0xcc	; 0xcc <_exit>

Disassembly of section .text.avrlibc:

000022b8 <eeprom_read_byte>:
    22b8:	cb 01       	movw	r24, r22
    22ba:	e1 99       	sbic	0x1c, 1	; 28
    22bc:	fe cf       	rjmp	.-4      	; 0x22ba <eeprom_read_byte+0x2>
    22be:	9f bb       	out	0x1f, r25	; 31
    22c0:	8e bb       	out	0x1e, r24	; 30
    22c2:	e0 9a       	sbi	0x1c, 0	; 28
    22c4:	99 27       	eor	r25, r25
    22c6:	8d b3       	in	r24, 0x1d	; 29
    22c8:	08 95       	ret

Disassembly of section .text.avrlibc:

0000216a <eeprom_update_byte>:
    216a:	26 2f       	mov	r18, r22

0000216c <eeprom_update_r18>:
    216c:	e1 99       	sbic	0x1c, 1	; 28
    216e:	fe cf       	rjmp	.-4      	; 0x216c <eeprom_update_r18>
    2170:	9f bb       	out	0x1f, r25	; 31
    2172:	8e bb       	out	0x1e, r24	; 30
    2174:	e0 9a       	sbi	0x1c, 0	; 28
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	0d b2       	in	r0, 0x1d	; 29
    217a:	02 16       	cp	r0, r18
    217c:	31 f0       	breq	.+12     	; 0x218a <eeprom_update_r18+0x1e>
    217e:	2d bb       	out	0x1d, r18	; 29
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	e2 9a       	sbi	0x1c, 2	; 28
    2186:	e1 9a       	sbi	0x1c, 1	; 28
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	08 95       	ret

Disassembly of section .text.avrlibc:

00002238 <eeprom_write_byte>:
    2238:	26 2f       	mov	r18, r22

0000223a <eeprom_write_r18>:
    223a:	e1 99       	sbic	0x1c, 1	; 28
    223c:	fe cf       	rjmp	.-4      	; 0x223a <eeprom_write_r18>
    223e:	9f bb       	out	0x1f, r25	; 31
    2240:	8e bb       	out	0x1e, r24	; 30
    2242:	2d bb       	out	0x1d, r18	; 29
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	e2 9a       	sbi	0x1c, 2	; 28
    224a:	e1 9a       	sbi	0x1c, 1	; 28
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	08 95       	ret
