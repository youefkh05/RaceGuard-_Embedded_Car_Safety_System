
MCU1_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d0  0000026a  2**0
                  ALLOC
  2 .bss          00000010  00800060  00800060  0000289d  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000289d  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000016c  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00002a38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a121  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000189b  00000000  00000000  0000d199  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c5b  00000000  00000000  0000ea34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010ac  00000000  00000000  00012690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ff  00000000  00000000  0001373c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005704  00000000  00000000  0001403b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0001973f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00002736  00002736  0000288a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00019c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .progmemx.data 00000046  000000d0  000000d0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.tmp     000000e2  00000a28  00000a28  00000b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Free_RTOS_Init 00000120  000003b4  000003b4  00000508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Initialize_E2PROM_State 00000016  000025b4  000025b4  00002708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Read_E2PROM_State 0000000c  00002684  00002684  000027d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.App_Init 0000006c  00001b58  00001b58  00001cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.check_State 00000084  0000171a  0000171a  0000186e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.eestate 0000001e  000024be  000024be  00002612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.handle_State 00000142  00000272  00000272  000003c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.fan1    000000aa  000012e4  000012e4  00001438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.emergency 00000156  0000011c  0000011c  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_Transmit_State 0000004a  00001ff8  00001ff8  0000214c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.uart    00000040  000021de  000021de  00002332  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_1 00000082  0000179e  0000179e  000018f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .data.EEPROM_State_Add 00000001  008006e5  0000011b  0000026f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .data.Speed_Scale 00000001  008006e6  00002748  0000289c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .bss.temperature 00000002  008006d3  008006d3  0000289d  2**0
                  ALLOC
 32 .bss.temp_counter 00000001  008006e7  008006e7  0000289d  2**0
                  ALLOC
 33 .bss.bot1_intur 00000001  008006e8  008006e8  0000289d  2**0
                  ALLOC
 34 .bss.reset    00000001  008006e9  008006e9  0000289d  2**0
                  ALLOC
 35 .bss.DC_fan1  00000001  008006ea  008006ea  0000289d  2**0
                  ALLOC
 36 .bss.emergency_counter 00000001  008006eb  008006eb  0000289d  2**0
                  ALLOC
 37 .bss.emergency_flag 00000001  008006ec  008006ec  0000289d  2**0
                  ALLOC
 38 .bss.buttonPressed 00000001  008006ed  008006ed  0000289d  2**0
                  ALLOC
 39 .bss.currentState 00000001  008006ee  008006ee  0000289d  2**0
                  ALLOC
 40 .text.LCD_voidWriteBitsToSend 000000b8  0000101e  0000101e  00001172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.LCD_voidWriteData 00000018  00002584  00002584  000026d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.LCD_voidWriteCommand 00000018  0000259c  0000259c  000026f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.LCD_voidInit 00000068  00001c2e  00001c2e  00001d82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.LCD_voidWriteString 0000002c  00002362  00002362  000024b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.LCD_voidGoToXY 0000003e  0000221e  0000221e  00002372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.LCD_voidWriteNumber 0000007c  00001820  00001820  00001974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.LED1_Initialize 0000000c  00002690  00002690  000027e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.LED1_ON 0000000c  0000269c  0000269c  000027f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.LED1_OFF 0000000c  000026a8  000026a8  000027fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.Initialize_TEMP_SENSOR 0000000c  000026b4  000026b4  00002808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.Read_TEMP_SENSOR 00000030  00002304  00002304  00002458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.DC_Initialize 00000052  00001ebe  00001ebe  00002012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.DC_Start 00000090  00001604  00001604  00001758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.DC_Stop 0000004e  00001f10  00001f10  00002064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.DC_Change_Speed 0000001e  000024dc  000024dc  00002630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.main    00000012  000025f6  000025f6  0000274a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.ADC_Initialize 0000000e  0000264c  0000264c  000027a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.ADC_Read 00000074  00001a06  00001a06  00001b5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.DIO_SetPinDirection 000000e2  00000b0a  00000b0a  00000c5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.DIO_SetPinValue 000000e2  00000bec  00000bec  00000d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.External_Interrupt0_Initalize 00000058  00001e12  00001e12  00001f66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.UART_Initialize_WithoutInterrupt 00000120  000004d4  000004d4  00000628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.UART_Transmit_Character 0000000a  000026f0  000026f0  00002844  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.UART_Transmit_Word 0000001c  00002518  00002518  0000266c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.pvPortMalloc 0000006a  00001bc4  00001bc4  00001d18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.vPortFree 00000002  0000273e  0000273e  00002892  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .bss.pucAlignedHeap.2045 00000002  008006d5  008006d5  0000289d  2**0
                  ALLOC
 68 .bss.xNextFreeByte 00000002  008006d7  008006d7  0000289d  2**0
                  ALLOC
 69 .bss.ucHeap   000005dc  00800070  00800070  0000289d  2**0
                  ALLOC
 70 .text.vListInitialise 0000001c  00002534  00002534  00002688  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.vListInitialiseItem 00000008  00002718  00002718  0000286c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.vListInsertEnd 00000042  0000215a  0000215a  000022ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.vListInsert 00000062  00001c96  00001c96  00001dea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uxListRemove 0000004e  00001f5e  00001f5e  000020b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.prvSetupTimerInterrupt 00000012  00002608  00002608  0000275c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.pxPortInitialiseStack 000000d8  00000cce  00000cce  00000e22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.xPortStartScheduler 0000005e  00001cf8  00001cf8  00001e4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.vPortEndScheduler 00000002  00002740  00002740  00002894  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.vPortYield 000000b2  000010d6  000010d6  0000122a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_7 00000048  00002042  00002042  00002196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.prvIsQueueEmpty 00000026  0000240a  0000240a  0000255e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.prvIsQueueFull 00000038  0000229a  0000229a  000023ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.prvCopyDataToQueue 00000092  00001572  00001572  000016c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.prvUnlockQueue 00000070  00001a7a  00001a7a  00001bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.xQueueGenericReset 00000086  00001694  00001694  000017e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.prvInitialiseNewQueue 00000026  00002430  00002430  00002584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.xQueueGenericCreate 00000054  00001e6a  00001e6a  00001fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.xQueueGenericSend 0000011e  000005f4  000005f4  00000748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.xQueueSemaphoreTake 00000108  00000826  00000826  0000097a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.prvTaskIsTaskSuspended 00000042  0000219c  0000219c  000022f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.prvResetNextTaskUnblockTime 0000003e  0000225c  0000225c  000023b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.prvDeleteTCB 0000001a  00002550  00002550  000026a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.prvInitialiseNewTask 000000fa  0000092e  0000092e  00000a82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.prvInitialiseTaskLists 0000006e  00001aea  00001aea  00001c3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.prvAddNewTaskToReadyList 000000ac  00001238  00001238  0000138c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.prvCheckTasksWaitingTermination 0000004c  00001fac  00001fac  00002100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.prvIdleTask 0000000a  000026fa  000026fa  0000284e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.prvAddCurrentTaskToDelayedList 000000b0  00001188  00001188  000012dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.xTaskCreate 000000d0  00000f4e  00000f4e  000010a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vTaskResume 00000078  00001916  00001916  00001a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data 00000005  00000116  00000116  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.vTaskStartScheduler 0000005e  00001d56  00001d56  00001eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.vTaskEndScheduler 0000000c  000026c0  000026c0  00002814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.vTaskSuspendAll 0000000c  000026cc  000026cc  00002820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.xTaskIncrementTick 00000114  00000712  00000712  00000866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.xTaskResumeAll 000000d4  00000da6  00000da6  00000efa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vTaskDelay 0000002c  0000238e  0000238e  000024e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vTaskSwitchContext 000000a8  0000138e  0000138e  000014e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vTaskSuspend 000000a4  00001436  00001436  0000158a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.vTaskPlaceOnEventList 00000024  00002456  00002456  000025aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.xTaskRemoveFromEventList 00000098  000014da  000014da  0000162e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.vTaskInternalSetTimeOutState 00000016  000025ca  000025ca  0000271e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.xTaskCheckForTimeOut 00000078  0000198e  0000198e  00001ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.vTaskMissedYield 00000008  00002720  00002720  00002874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.uxSchedulerSuspended 00000001  008006ef  008006ef  0000289d  2**0
                  ALLOC
116 .bss.xIdleTaskHandle 00000002  008006d9  008006d9  0000289d  2**0
                  ALLOC
117 .bss.xNextTaskUnblockTime 00000002  008006db  008006db  0000289d  2**0
                  ALLOC
118 .bss.uxTaskNumber 00000001  008006f0  008006f0  0000289d  2**0
                  ALLOC
119 .bss.xNumOfOverflows 00000001  008006f1  008006f1  0000289d  2**0
                  ALLOC
120 .bss.xYieldPending 00000001  008006f2  008006f2  0000289d  2**0
                  ALLOC
121 .bss.uxPendedTicks 00000001  008006f3  008006f3  0000289d  2**0
                  ALLOC
122 .bss.xSchedulerRunning 00000001  008006f4  008006f4  0000289d  2**0
                  ALLOC
123 .bss.uxTopReadyPriority 00000001  008006f5  008006f5  0000289d  2**0
                  ALLOC
124 .bss.xTickCount 00000002  008006dd  008006dd  0000289d  2**0
                  ALLOC
125 .bss.uxCurrentNumberOfTasks 00000001  008006f6  008006f6  0000289d  2**0
                  ALLOC
126 .bss.xSuspendedTaskList 00000009  008006a6  008006a6  0000289d  2**0
                  ALLOC
127 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006f7  008006f7  0000289d  2**0
                  ALLOC
128 .bss.xTasksWaitingTermination 00000009  008006af  008006af  0000289d  2**0
                  ALLOC
129 .bss.xPendingReadyList 00000009  008006b8  008006b8  0000289d  2**0
                  ALLOC
130 .bss.pxOverflowDelayedTaskList 00000002  008006df  008006df  0000289d  2**0
                  ALLOC
131 .bss.pxDelayedTaskList 00000002  008006e1  008006e1  0000289d  2**0
                  ALLOC
132 .bss.xDelayedTaskList2 00000009  008006c1  008006c1  0000289d  2**0
                  ALLOC
133 .bss.xDelayedTaskList1 00000009  008006ca  008006ca  0000289d  2**0
                  ALLOC
134 .bss.pxReadyTasksLists 0000005a  0080064c  0080064c  0000289d  2**0
                  ALLOC
135 .bss.pxCurrentTCB 00000002  008006e3  008006e3  0000289d  2**0
                  ALLOC
136 .text         0000000a  00002704  00002704  00002858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text         0000005e  00001db4  00001db4  00001f08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text         0000007a  0000189c  0000189c  000019f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text         00000048  0000208a  0000208a  000021de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text         00000044  000020d2  000020d2  00002226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text         0000000e  0000265a  0000265a  000027ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text         0000000a  0000270e  0000270e  00002862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text         00000008  00002728  00002728  0000287c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text         000000d4  00000e7a  00000e7a  00000fce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text         0000000c  000026d8  000026d8  0000282c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text         00000006  00002730  00002730  00002884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text         0000000e  00002668  00002668  000027bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text         0000000e  00002676  00002676  000027ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text         00000022  0000247a  0000247a  000025ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.libgcc.div 00000028  000023ba  000023ba  0000250e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.libgcc.div 00000044  00002116  00002116  0000226a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.libgcc.div 0000002e  00002334  00002334  00002488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.libgcc.div 00000010  0000262c  0000262c  00002780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.libgcc  0000000c  000026e4  000026e4  00002838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.libgcc.mul 0000001e  000024fa  000024fa  0000264e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.libgcc  00000010  0000263c  0000263c  00002790  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.libgcc.div 00000028  000023e2  000023e2  00002536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.__dummy_fini 00000002  00002742  00002742  00002896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.__dummy_funcs_on_exit 00000002  00002744  00002744  00002898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.__dummy_simulator_exit 00000002  00002746  00002746  0000289a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.exit    00000016  000025e0  000025e0  00002734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.memcpy  00000032  000022d2  000022d2  00002426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text._Exit   00000004  0000273a  0000273a  0000288e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.avrlibc 00000012  0000261a  0000261a  0000276e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.avrlibc 00000022  0000249c  0000249c  000025f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.avrlibc 0000001a  0000256a  0000256a  000026be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_1>
   8:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
   c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  10:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  14:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  18:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  1c:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_7>
  20:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  24:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  28:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  2c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  30:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  34:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  38:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  3c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  40:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  44:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  48:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  4c:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  50:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__bad_interrupt>
  54:	10 0d       	add	r17, r0
  56:	14 0d       	add	r17, r4
  58:	19 0d       	add	r17, r9
  5a:	1e 0d       	add	r17, r14
  5c:	23 0d       	add	r18, r3
  5e:	28 0d       	add	r18, r8
  60:	2d 0d       	add	r18, r13
  62:	32 0d       	add	r19, r2

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	06 e5       	ldi	r16, 0x56	; 86
  68:	80 06       	cpc	r8, r16
  6a:	e5 06       	cpc	r14, r21
  6c:	e6 00       	.word	0x00e6	; ????
  6e:	01 1b       	sub	r16, r17
  70:	06 e6       	ldi	r16, 0x66	; 102
  72:	06 e7       	ldi	r16, 0x76	; 118
  74:	00 27       	eor	r16, r16
  76:	48 06       	cpc	r4, r24
  78:	e7 06       	cpc	r14, r23
  7a:	f8 80       	ld	r15, Y

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	e4 e6       	ldi	r30, 0x64	; 100
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	17 c0       	rjmp	.+46     	; 0xbe <__do_clear_bss+0x8>
  90:	b5 91       	lpm	r27, Z+
  92:	a5 91       	lpm	r26, Z+
  94:	35 91       	lpm	r19, Z+
  96:	25 91       	lpm	r18, Z+
  98:	05 91       	lpm	r16, Z+
  9a:	07 fd       	sbrc	r16, 7
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <__do_clear_bss>
  9e:	95 91       	lpm	r25, Z+
  a0:	85 91       	lpm	r24, Z+
  a2:	ef 01       	movw	r28, r30
  a4:	f9 2f       	mov	r31, r25
  a6:	e8 2f       	mov	r30, r24
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x20>
  b2:	fe 01       	movw	r30, r28
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_clear_bss+0x8>

000000b6 <__do_clear_bss>:
  b6:	1d 92       	st	X+, r1
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__do_clear_bss>
  be:	ec 37       	cpi	r30, 0x7C	; 124
  c0:	f4 07       	cpc	r31, r20
  c2:	31 f7       	brne	.-52     	; 0x90 <__do_copy_data+0x8>
  c4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <main>
  c8:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <exit>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>

Disassembly of section .text:

00002736 <__bad_interrupt>:
    2736:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.tmp:

00000a28 <tmp>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
 a28:	0e 94 82 11 	call	0x2304	; 0x2304 <Read_TEMP_SENSOR>
 a2c:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <temperature+0x1>
 a30:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <temperature>
 a34:	6a e0       	ldi	r22, 0x0A	; 10
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
 a3c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
 a40:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
 a44:	81 30       	cpi	r24, 0x01	; 1
 a46:	71 f5       	brne	.+92     	; 0xaa4 <tmp+0x7c>
 a48:	60 e0       	ldi	r22, 0x00	; 0
 a4a:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_voidGoToXY>
 a4e:	80 ed       	ldi	r24, 0xD0	; 208
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	a0 e0       	ldi	r26, 0x00	; 0
 a54:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_voidWriteString>
 a58:	64 e0       	ldi	r22, 0x04	; 4
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_voidGoToXY>
 a60:	85 ed       	ldi	r24, 0xD5	; 213
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	a0 e0       	ldi	r26, 0x00	; 0
 a66:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_voidWriteString>
 a6a:	64 e0       	ldi	r22, 0x04	; 4
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_voidGoToXY>
 a72:	60 91 d3 06 	lds	r22, 0x06D3	; 0x8006d3 <temperature>
 a76:	70 91 d4 06 	lds	r23, 0x06D4	; 0x8006d4 <temperature+0x1>
 a7a:	80 e0       	ldi	r24, 0x00	; 0
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 10 0c 	call	0x1820	; 0x1820 <LCD_voidWriteNumber>
 a82:	80 ee       	ldi	r24, 0xE0	; 224
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	a0 e0       	ldi	r26, 0x00	; 0
 a88:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_voidWriteString>
 a8c:	00 e0       	ldi	r16, 0x00	; 0
 a8e:	20 e0       	ldi	r18, 0x00	; 0
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	40 e0       	ldi	r20, 0x00	; 0
 a94:	50 e0       	ldi	r21, 0x00	; 0
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
 a9c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
 aa0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xQueueGenericSend>
 aa4:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 aa8:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 aac:	c2 97       	sbiw	r24, 0x32	; 50
 aae:	c0 f0       	brcs	.+48     	; 0xae0 <tmp+0xb8>
 ab0:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <emergency_flag>
 ab4:	81 11       	cpse	r24, r1
 ab6:	0f c0       	rjmp	.+30     	; 0xad6 <tmp+0xae>
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <emergency_flag>
 abe:	00 e0       	ldi	r16, 0x00	; 0
 ac0:	20 e0       	ldi	r18, 0x00	; 0
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	40 e0       	ldi	r20, 0x00	; 0
 ac6:	50 e0       	ldi	r21, 0x00	; 0
 ac8:	60 e0       	ldi	r22, 0x00	; 0
 aca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 ace:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 ad2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xQueueGenericSend>
 ad6:	84 e0       	ldi	r24, 0x04	; 4
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 c7 11 	call	0x238e	; 0x238e <vTaskDelay>
 ade:	a4 cf       	rjmp	.-184    	; 0xa28 <tmp>
 ae0:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <emergency_flag>
 ae4:	81 30       	cpi	r24, 0x01	; 1
 ae6:	61 f4       	brne	.+24     	; 0xb00 <tmp+0xd8>
 ae8:	00 e0       	ldi	r16, 0x00	; 0
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	40 e0       	ldi	r20, 0x00	; 0
 af0:	50 e0       	ldi	r21, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 af8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 afc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xQueueGenericSend>
 b00:	82 e1       	ldi	r24, 0x12	; 18
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 c7 11 	call	0x238e	; 0x238e <vTaskDelay>
 b08:	8f cf       	rjmp	.-226    	; 0xa28 <tmp>

Disassembly of section .text.Free_RTOS_Init:

000003b4 <Free_RTOS_Init>:
 3b4:	cf 92       	push	r12
 3b6:	df 92       	push	r13
 3b8:	ef 92       	push	r14
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	43 e0       	ldi	r20, 0x03	; 3
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <xQueueGenericCreate>
 3c8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Bot1_Semaphore+0x1>
 3cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Bot1_Semaphore>
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
 3d8:	43 e0       	ldi	r20, 0x03	; 3
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <xQueueGenericCreate>
 3e2:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LCD_Semaphore+0x1>
 3e6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LCD_Semaphore>
 3ea:	00 e0       	ldi	r16, 0x00	; 0
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xQueueGenericSend>
 3fa:	43 e0       	ldi	r20, 0x03	; 3
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <xQueueGenericCreate>
 404:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Emer_Semaphore+0x1>
 408:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Emer_Semaphore>
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
 414:	0f 2e       	mov	r0, r31
 416:	fe e6       	ldi	r31, 0x6E	; 110
 418:	cf 2e       	mov	r12, r31
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	df 2e       	mov	r13, r31
 41e:	f0 2d       	mov	r31, r0
 420:	e1 2c       	mov	r14, r1
 422:	00 e0       	ldi	r16, 0x00	; 0
 424:	10 e0       	ldi	r17, 0x00	; 0
 426:	24 e6       	ldi	r18, 0x64	; 100
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	42 ee       	ldi	r20, 0xE2	; 226
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	84 e1       	ldi	r24, 0x14	; 20
 432:	95 e0       	ldi	r25, 0x05	; 5
 434:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xTaskCreate>
 438:	0f 2e       	mov	r0, r31
 43a:	f6 e6       	ldi	r31, 0x66	; 102
 43c:	cf 2e       	mov	r12, r31
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	df 2e       	mov	r13, r31
 442:	f0 2d       	mov	r31, r0
 444:	0f 2e       	mov	r0, r31
 446:	f3 e0       	ldi	r31, 0x03	; 3
 448:	ef 2e       	mov	r14, r31
 44a:	f0 2d       	mov	r31, r0
 44c:	24 e6       	ldi	r18, 0x64	; 100
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	4b ee       	ldi	r20, 0xEB	; 235
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	8f ee       	ldi	r24, 0xEF	; 239
 458:	90 e1       	ldi	r25, 0x10	; 16
 45a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xTaskCreate>
 45e:	0f 2e       	mov	r0, r31
 460:	f0 e6       	ldi	r31, 0x60	; 96
 462:	cf 2e       	mov	r12, r31
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	df 2e       	mov	r13, r31
 468:	f0 2d       	mov	r31, r0
 46a:	e1 2c       	mov	r14, r1
 46c:	24 e6       	ldi	r18, 0x64	; 100
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	45 ef       	ldi	r20, 0xF5	; 245
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	8f e5       	ldi	r24, 0x5F	; 95
 478:	92 e1       	ldi	r25, 0x12	; 18
 47a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xTaskCreate>
 47e:	0f 2e       	mov	r0, r31
 480:	f4 e6       	ldi	r31, 0x64	; 100
 482:	cf 2e       	mov	r12, r31
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	df 2e       	mov	r13, r31
 488:	f0 2d       	mov	r31, r0
 48a:	68 94       	set
 48c:	ee 24       	eor	r14, r14
 48e:	e1 f8       	bld	r14, 1
 490:	24 e6       	ldi	r18, 0x64	; 100
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	42 e0       	ldi	r20, 0x02	; 2
 496:	51 e0       	ldi	r21, 0x01	; 1
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	82 e7       	ldi	r24, 0x72	; 114
 49c:	99 e0       	ldi	r25, 0x09	; 9
 49e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xTaskCreate>
 4a2:	0f 2e       	mov	r0, r31
 4a4:	fc e6       	ldi	r31, 0x6C	; 108
 4a6:	cf 2e       	mov	r12, r31
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	df 2e       	mov	r13, r31
 4ac:	f0 2d       	mov	r31, r0
 4ae:	0f 2e       	mov	r0, r31
 4b0:	f5 e0       	ldi	r31, 0x05	; 5
 4b2:	ef 2e       	mov	r14, r31
 4b4:	f0 2d       	mov	r31, r0
 4b6:	24 e6       	ldi	r18, 0x64	; 100
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	4c e0       	ldi	r20, 0x0C	; 12
 4bc:	51 e0       	ldi	r21, 0x01	; 1
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	8e e8       	ldi	r24, 0x8E	; 142
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xTaskCreate>
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	08 95       	ret

Disassembly of section .text.Initialize_E2PROM_State:

000025b4 <Initialize_E2PROM_State>:
}

void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	85 ee       	ldi	r24, 0xE5	; 229
    25b8:	96 e0       	ldi	r25, 0x06	; 6
    25ba:	0e 94 4e 12 	call	0x249c	; 0x249c <eeprom_update_byte>
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	85 ee       	ldi	r24, 0xE5	; 229
    25c2:	96 e0       	ldi	r25, 0x06	; 6
    25c4:	0e 94 4e 12 	call	0x249c	; 0x249c <eeprom_update_byte>
    25c8:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

00002684 <Read_E2PROM_State>:
}

uint8_t Read_E2PROM_State (void){
	
	/*	read the state	*/
	uint8_t x= eeprom_read_byte (&EEPROM_State_Add); 		
    2684:	65 ee       	ldi	r22, 0xE5	; 229
    2686:	76 e0       	ldi	r23, 0x06	; 6
    2688:	80 e8       	ldi	r24, 0x80	; 128
    268a:	0e 94 0d 13 	call	0x261a	; 0x261a <eeprom_read_byte>
	return x;
}
    268e:	08 95       	ret

Disassembly of section .text.App_Init:

00001b58 <App_Init>:
TaskHandle_t xHanleFan1;
TaskHandle_t xHanleEmergency;

uint8_t EEPROM_State_Add=0b01000000;	//any place

void App_Init(void){
    1b58:	0f 93       	push	r16
	/*		Initializations		*/
	DC_Initialize(DC_fan1);
    1b5a:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <DC_fan1>
    1b5e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <DC_Initialize>
	Initialize_E2PROM_State();
    1b62:	0e 94 da 12 	call	0x25b4	; 0x25b4 <Initialize_E2PROM_State>
	Initialize_TEMP_SENSOR();
    1b66:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <Initialize_TEMP_SENSOR>
	ADC_Initialize(AVCC,ADC_PRE0);
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 26 13 	call	0x264c	; 0x264c <ADC_Initialize>
	LCD_voidInit();
    1b72:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <LCD_voidInit>
	LED1_Initialize();
    1b76:	0e 94 48 13 	call	0x2690	; 0x2690 <LED1_Initialize>
	LED1_OFF();
    1b7a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LED1_OFF>
	
	DIO_SetPinDirection(BOT1_PORT,BOT1_PIN,DIO_INPUT); //push button
    1b7e:	8b b3       	in	r24, 0x1b	; 27
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
	//Timer0_OVF_WithInterrupt_Initialize();
	
	uart_status UART_State= UART_Initialize_WithoutInterrupt(UART_9600,Synchronous, Disable , Bits_8, Bit_1);
    1b88:	00 e0       	ldi	r16, 0x00	; 0
    1b8a:	23 e0       	ldi	r18, 0x03	; 3
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	80 e6       	ldi	r24, 0x60	; 96
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <UART_Initialize_WithoutInterrupt>
	if(UART_State==UART_NOK){
    1b98:	88 23       	and	r24, r24
    1b9a:	91 f0       	breq	.+36     	; 0x1bc0 <App_Init+0x68>
		return ;
	}

	External_Interrupt0_Initalize(INT0_RISING);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <External_Interrupt0_Initalize>

	// Read initial state from EEPROM
	uint8_t x= Read_E2PROM_State();
    1ba2:	0e 94 42 13 	call	0x2684	; 0x2684 <Read_E2PROM_State>
	if (x==0)
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	05 c0       	rjmp	.+10     	; 0x1bb4 <App_Init+0x5c>
	{
		DC_Start(DC_fan1,DC_CW);
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <DC_fan1>
    1bb0:	0e 94 02 0b 	call	0x1604	; 0x1604 <DC_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bb4:	8f e1       	ldi	r24, 0x1F	; 31
    1bb6:	9e e4       	ldi	r25, 0x4E	; 78
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <App_Init+0x60>
    1bbc:	00 c0       	rjmp	.+0      	; 0x1bbe <App_Init+0x66>
    1bbe:	00 00       	nop
	}
	_delay_ms(10);
	
}
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret

Disassembly of section .text.check_State:

0000171a <check_State>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	8b 01       	movw	r16, r22
    172c:	ea 01       	movw	r28, r20
    172e:	bc 01       	movw	r22, r24
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatunsisf>
    1738:	6b 01       	movw	r12, r22
    173a:	7c 01       	movw	r14, r24
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	48 e4       	ldi	r20, 0x48	; 72
    1742:	52 e4       	ldi	r21, 0x42	; 66
    1744:	0e 94 82 13 	call	0x2704	; 0x2704 <__cmpsf2>
    1748:	88 23       	and	r24, r24
    174a:	64 f4       	brge	.+24     	; 0x1764 <check_State+0x4a>
    174c:	88 81       	ld	r24, Y
    174e:	88 23       	and	r24, r24
    1750:	49 f0       	breq	.+18     	; 0x1764 <check_State+0x4a>
    1752:	f8 01       	movw	r30, r16
    1754:	10 82       	st	Z, r1
    1756:	18 82       	st	Y, r1
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	85 ee       	ldi	r24, 0xE5	; 229
    175c:	96 e0       	ldi	r25, 0x06	; 6
    175e:	0e 94 b5 12 	call	0x256a	; 0x256a <eeprom_write_byte>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <check_State+0x72>
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	48 e4       	ldi	r20, 0x48	; 72
    176a:	52 e4       	ldi	r21, 0x42	; 66
    176c:	c7 01       	movw	r24, r14
    176e:	b6 01       	movw	r22, r12
    1770:	0e 94 87 13 	call	0x270e	; 0x270e <__gesf2>
    1774:	88 23       	and	r24, r24
    1776:	54 f0       	brlt	.+20     	; 0x178c <check_State+0x72>
    1778:	88 81       	ld	r24, Y
    177a:	81 11       	cpse	r24, r1
    177c:	07 c0       	rjmp	.+14     	; 0x178c <check_State+0x72>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	88 83       	st	Y, r24
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	85 ee       	ldi	r24, 0xE5	; 229
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	0e 94 b5 12 	call	0x256a	; 0x256a <eeprom_write_byte>
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	08 95       	ret

Disassembly of section .text.eestate:

000024be <eestate>:
}

void eestate(void *par){
	
	while(1){
		check_State(temperature,&temp_counter,&currentState);
    24be:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    24c2:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    24c6:	4e ee       	ldi	r20, 0xEE	; 238
    24c8:	56 e0       	ldi	r21, 0x06	; 6
    24ca:	67 ee       	ldi	r22, 0xE7	; 231
    24cc:	76 e0       	ldi	r23, 0x06	; 6
    24ce:	0e 94 8d 0b 	call	0x171a	; 0x171a <check_State>
		vTaskDelay(pdMS_TO_TICKS(500));
    24d2:	89 e2       	ldi	r24, 0x29	; 41
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 c7 11 	call	0x238e	; 0x238e <vTaskDelay>
    24da:	f1 cf       	rjmp	.-30     	; 0x24be <eestate>

Disassembly of section .text.handle_State:

00000272 <handle_State>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
 272:	8f 92       	push	r8
 274:	9f 92       	push	r9
 276:	af 92       	push	r10
 278:	bf 92       	push	r11
 27a:	ef 92       	push	r14
 27c:	ff 92       	push	r15
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	7c 01       	movw	r14, r24
 288:	c6 2f       	mov	r28, r22
 28a:	d4 2f       	mov	r29, r20
 28c:	f9 01       	movw	r30, r18
 28e:	90 81       	ld	r25, Z
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	09 f4       	brne	.+2      	; 0x296 <handle_State+0x24>
 294:	62 c0       	rjmp	.+196    	; 0x35a <handle_State+0xe8>
 296:	20 f0       	brcs	.+8      	; 0x2a0 <handle_State+0x2e>
 298:	92 30       	cpi	r25, 0x02	; 2
 29a:	09 f4       	brne	.+2      	; 0x29e <handle_State+0x2c>
 29c:	6e c0       	rjmp	.+220    	; 0x37a <handle_State+0x108>
 29e:	7f c0       	rjmp	.+254    	; 0x39e <handle_State+0x12c>
 2a0:	b7 01       	movw	r22, r14
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatunsisf>
 2aa:	4b 01       	movw	r8, r22
 2ac:	5c 01       	movw	r10, r24
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 ea       	ldi	r20, 0xA0	; 160
 2b4:	51 e4       	ldi	r21, 0x41	; 65
 2b6:	0e 94 82 13 	call	0x2704	; 0x2704 <__cmpsf2>
 2ba:	18 16       	cp	r1, r24
 2bc:	24 f0       	brlt	.+8      	; 0x2c6 <handle_State+0x54>
 2be:	8c 2f       	mov	r24, r28
 2c0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <DC_Stop>
 2c4:	6c c0       	rjmp	.+216    	; 0x39e <handle_State+0x12c>
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 ea       	ldi	r20, 0xA0	; 160
 2cc:	51 e4       	ldi	r21, 0x41	; 65
 2ce:	c5 01       	movw	r24, r10
 2d0:	b4 01       	movw	r22, r8
 2d2:	0e 94 87 13 	call	0x270e	; 0x270e <__gesf2>
 2d6:	18 16       	cp	r1, r24
 2d8:	4c f5       	brge	.+82     	; 0x32c <handle_State+0xba>
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	40 e2       	ldi	r20, 0x20	; 32
 2e0:	52 e4       	ldi	r21, 0x42	; 66
 2e2:	c5 01       	movw	r24, r10
 2e4:	b4 01       	movw	r22, r8
 2e6:	0e 94 82 13 	call	0x2704	; 0x2704 <__cmpsf2>
 2ea:	18 16       	cp	r1, r24
 2ec:	fc f0       	brlt	.+62     	; 0x32c <handle_State+0xba>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8c 2f       	mov	r24, r28
 2f2:	0e 94 02 0b 	call	0x1604	; 0x1604 <DC_Start>
 2f6:	de 9d       	mul	r29, r14
 2f8:	c0 01       	movw	r24, r0
 2fa:	df 9d       	mul	r29, r15
 2fc:	90 0d       	add	r25, r0
 2fe:	11 24       	eor	r1, r1
 300:	9c 01       	movw	r18, r24
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	28 0f       	add	r18, r24
 30c:	39 1f       	adc	r19, r25
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	36 95       	lsr	r19
 314:	27 95       	ror	r18
 316:	ab e7       	ldi	r26, 0x7B	; 123
 318:	b4 e1       	ldi	r27, 0x14	; 20
 31a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__umulhisi3>
 31e:	bc 01       	movw	r22, r24
 320:	76 95       	lsr	r23
 322:	67 95       	ror	r22
 324:	8c 2f       	mov	r24, r28
 326:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DC_Change_Speed>
 32a:	39 c0       	rjmp	.+114    	; 0x39e <handle_State+0x12c>
 32c:	f9 e2       	ldi	r31, 0x29	; 41
 32e:	ef 1a       	sub	r14, r31
 330:	f1 08       	sbc	r15, r1
 332:	2a e0       	ldi	r18, 0x0A	; 10
 334:	e2 16       	cp	r14, r18
 336:	f1 04       	cpc	r15, r1
 338:	90 f5       	brcc	.+100    	; 0x39e <handle_State+0x12c>
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	8c 2f       	mov	r24, r28
 33e:	0e 94 02 0b 	call	0x1604	; 0x1604 <DC_Start>
 342:	ea ef       	ldi	r30, 0xFA	; 250
 344:	de 9f       	mul	r29, r30
 346:	c0 01       	movw	r24, r0
 348:	11 24       	eor	r1, r1
 34a:	64 e6       	ldi	r22, 0x64	; 100
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__divmodhi4>
 352:	8c 2f       	mov	r24, r28
 354:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DC_Change_Speed>
 358:	22 c0       	rjmp	.+68     	; 0x39e <handle_State+0x12c>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 02 0b 	call	0x1604	; 0x1604 <DC_Start>
 362:	fa ef       	ldi	r31, 0xFA	; 250
 364:	df 9f       	mul	r29, r31
 366:	c0 01       	movw	r24, r0
 368:	11 24       	eor	r1, r1
 36a:	64 e6       	ldi	r22, 0x64	; 100
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__divmodhi4>
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DC_Change_Speed>
 378:	12 c0       	rjmp	.+36     	; 0x39e <handle_State+0x12c>
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	8c 2f       	mov	r24, r28
 37e:	0e 94 02 0b 	call	0x1604	; 0x1604 <DC_Start>
 382:	2a ef       	ldi	r18, 0xFA	; 250
 384:	d2 9f       	mul	r29, r18
 386:	c0 01       	movw	r24, r0
 388:	11 24       	eor	r1, r1
 38a:	64 e6       	ldi	r22, 0x64	; 100
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__divmodhi4>
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 6e 12 	call	0x24dc	; 0x24dc <DC_Change_Speed>
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	f8 01       	movw	r30, r16
 39c:	80 83       	st	Z, r24
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	9f 90       	pop	r9
 3b0:	8f 90       	pop	r8
 3b2:	08 95       	ret

Disassembly of section .text.fan1:

000012e4 <fan1>:
    12e4:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    12e8:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    12ec:	09 ee       	ldi	r16, 0xE9	; 233
    12ee:	16 e0       	ldi	r17, 0x06	; 6
    12f0:	2e ee       	ldi	r18, 0xEE	; 238
    12f2:	36 e0       	ldi	r19, 0x06	; 6
    12f4:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <Speed_Scale>
    12f8:	60 91 ea 06 	lds	r22, 0x06EA	; 0x8006ea <DC_fan1>
    12fc:	0e 94 39 01 	call	0x272	; 0x272 <handle_State>
    1300:	6a e0       	ldi	r22, 0x0A	; 10
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
    1308:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
    130c:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	c1 f5       	brne	.+112    	; 0x1384 <fan1+0xa0>
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_voidGoToXY>
    131c:	64 e0       	ldi	r22, 0x04	; 4
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_voidGoToXY>
    1324:	85 ed       	ldi	r24, 0xD5	; 213
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	0e 94 b1 11 	call	0x2362	; 0x2362 <LCD_voidWriteString>
    132e:	64 e0       	ldi	r22, 0x04	; 4
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_voidGoToXY>
    1336:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    133a:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    133e:	44 e6       	ldi	r20, 0x64	; 100
    1340:	48 9f       	mul	r20, r24
    1342:	90 01       	movw	r18, r0
    1344:	49 9f       	mul	r20, r25
    1346:	30 0d       	add	r19, r0
    1348:	11 24       	eor	r1, r1
    134a:	a9 e8       	ldi	r26, 0x89	; 137
    134c:	b8 e8       	ldi	r27, 0x88	; 136
    134e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__umulhisi3>
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	92 95       	swap	r25
    1358:	82 95       	swap	r24
    135a:	8f 70       	andi	r24, 0x0F	; 15
    135c:	89 27       	eor	r24, r25
    135e:	9f 70       	andi	r25, 0x0F	; 15
    1360:	89 27       	eor	r24, r25
    1362:	bc 01       	movw	r22, r24
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 10 0c 	call	0x1820	; 0x1820 <LCD_voidWriteNumber>
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
    137c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
    1380:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xQueueGenericSend>
    1384:	8e e0       	ldi	r24, 0x0E	; 14
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 c7 11 	call	0x238e	; 0x238e <vTaskDelay>
    138c:	ab cf       	rjmp	.-170    	; 0x12e4 <fan1>

Disassembly of section .text.emergency:

0000011c <emergency>:
 11c:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <emergency_flag>
 120:	88 23       	and	r24, r24
 122:	21 f0       	breq	.+8      	; 0x12c <emergency+0x10>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	09 f4       	brne	.+2      	; 0x12a <emergency+0xe>
 128:	4a c0       	rjmp	.+148    	; 0x1be <emergency+0xa2>
 12a:	f8 cf       	rjmp	.-16     	; 0x11c <emergency>
 12c:	60 e1       	ldi	r22, 0x10	; 16
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 134:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 138:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	61 f5       	brne	.+88     	; 0x198 <emergency+0x7c>
 140:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 144:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 148:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vTaskSuspend>
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vTaskSuspend>
 158:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 15c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 160:	0e 94 1b 0a 	call	0x1436	; 0x1436 <vTaskSuspend>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <currentState>
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <Speed_Scale>
 170:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 174:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 178:	09 ee       	ldi	r16, 0xE9	; 233
 17a:	16 e0       	ldi	r17, 0x06	; 6
 17c:	2e ee       	ldi	r18, 0xEE	; 238
 17e:	36 e0       	ldi	r19, 0x06	; 6
 180:	44 e6       	ldi	r20, 0x64	; 100
 182:	60 91 ea 06 	lds	r22, 0x06EA	; 0x8006ea <DC_fan1>
 186:	0e 94 39 01 	call	0x272	; 0x272 <handle_State>
 18a:	60 91 ee 06 	lds	r22, 0x06EE	; 0x8006ee <currentState>
 18e:	85 ee       	ldi	r24, 0xE5	; 229
 190:	96 e0       	ldi	r25, 0x06	; 6
 192:	0e 94 b5 12 	call	0x256a	; 0x256a <eeprom_write_byte>
 196:	c2 cf       	rjmp	.-124    	; 0x11c <emergency>
 198:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 19c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 1a0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskResume>
 1a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskResume>
 1b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 1b4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 1b8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskResume>
 1bc:	af cf       	rjmp	.-162    	; 0x11c <emergency>
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 1c6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 1ca:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	79 f5       	brne	.+94     	; 0x230 <emergency+0x114>
 1d2:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <emergency_counter>
 1d6:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <emergency_flag>
 1da:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <currentState>
 1de:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 1e2:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 1e6:	09 ee       	ldi	r16, 0xE9	; 233
 1e8:	16 e0       	ldi	r17, 0x06	; 6
 1ea:	2e ee       	ldi	r18, 0xEE	; 238
 1ec:	36 e0       	ldi	r19, 0x06	; 6
 1ee:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <Speed_Scale>
 1f2:	60 91 ea 06 	lds	r22, 0x06EA	; 0x8006ea <DC_fan1>
 1f6:	0e 94 39 01 	call	0x272	; 0x272 <handle_State>
 1fa:	60 91 ee 06 	lds	r22, 0x06EE	; 0x8006ee <currentState>
 1fe:	85 ee       	ldi	r24, 0xE5	; 229
 200:	96 e0       	ldi	r25, 0x06	; 6
 202:	0e 94 b5 12 	call	0x256a	; 0x256a <eeprom_write_byte>
 206:	0e 94 54 13 	call	0x26a8	; 0x26a8 <LED1_OFF>
 20a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 20e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 212:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskResume>
 216:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 21e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskResume>
 222:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 226:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 22a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vTaskResume>
 22e:	1c c0       	rjmp	.+56     	; 0x268 <emergency+0x14c>
 230:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <emergency_counter>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <emergency_counter>
 23a:	8e 36       	cpi	r24, 0x6E	; 110
 23c:	a8 f0       	brcs	.+42     	; 0x268 <emergency+0x14c>
 23e:	f8 94       	cli
 240:	0e 94 4e 13 	call	0x269c	; 0x269c <LED1_ON>
 244:	0e 94 60 13 	call	0x26c0	; 0x26c0 <vTaskEndScheduler>
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <currentState>
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	85 ee       	ldi	r24, 0xE5	; 229
 252:	96 e0       	ldi	r25, 0x06	; 6
 254:	0e 94 b5 12 	call	0x256a	; 0x256a <eeprom_write_byte>
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	81 bd       	out	0x21, r24	; 33
 25c:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <emergency_counter>
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <emergency_counter>
 266:	fa cf       	rjmp	.-12     	; 0x25c <emergency+0x140>
 268:	8c e2       	ldi	r24, 0x2C	; 44
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 c7 11 	call	0x238e	; 0x238e <vTaskDelay>
 270:	55 cf       	rjmp	.-342    	; 0x11c <emergency>

Disassembly of section .text.UART_Transmit_State:

00001ff8 <UART_Transmit_State>:
	}

}

void UART_Transmit_State(const temp T,uint8_t counter,uint8_t *bot1f){
	if (T>=50)
    1ff8:	82 33       	cpi	r24, 0x32	; 50
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	70 f0       	brcs	.+28     	; 0x201a <UART_Transmit_State+0x22>
	{	
		if (counter<Emergency_counter_max)
    1ffe:	6e 36       	cpi	r22, 0x6E	; 110
    2000:	38 f4       	brcc	.+14     	; 0x2010 <UART_Transmit_State+0x18>
		{	//Emergency
			/* Reset the flag	*/
			*bot1f=0;
    2002:	fa 01       	movw	r30, r20
    2004:	10 82       	st	Z, r1
			//send the emergency signal
			UART_Transmit_Word(Emergency_Mes);
    2006:	8c e2       	ldi	r24, 0x2C	; 44
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	0e 94 8c 12 	call	0x2518	; 0x2518 <UART_Transmit_Word>
    200e:	08 95       	ret
		} 
		else
		{
			//Abnormal
			UART_Transmit_Word(Abnormal_Mes);
    2010:	8e e5       	ldi	r24, 0x5E	; 94
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	0e 94 8c 12 	call	0x2518	; 0x2518 <UART_Transmit_Word>
    2018:	08 95       	ret
		}

	}
	else if (T>40 && T<=50 && *bot1f==1)
    201a:	9c 01       	movw	r18, r24
    201c:	29 52       	subi	r18, 0x29	; 41
    201e:	31 09       	sbc	r19, r1
    2020:	2a 30       	cpi	r18, 0x0A	; 10
    2022:	31 05       	cpc	r19, r1
    2024:	48 f4       	brcc	.+18     	; 0x2038 <UART_Transmit_State+0x40>
    2026:	fa 01       	movw	r30, r20
    2028:	20 81       	ld	r18, Z
    202a:	21 30       	cpi	r18, 0x01	; 1
    202c:	29 f4       	brne	.+10     	; 0x2038 <UART_Transmit_State+0x40>
	{	
		//send the off signal
		UART_Transmit_Word(Off_Mes);
    202e:	8f ef       	ldi	r24, 0xFF	; 255
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 8c 12 	call	0x2518	; 0x2518 <UART_Transmit_Word>
    2036:	08 95       	ret
	}
	else{
		/* Reset the flag	*/
		*bot1f=0;
    2038:	fa 01       	movw	r30, r20
    203a:	10 82       	st	Z, r1
		UART_Transmit_Word(T);
    203c:	0e 94 8c 12 	call	0x2518	; 0x2518 <UART_Transmit_Word>
    2040:	08 95       	ret

Disassembly of section .text.uart:

000021de <uart>:
}

void uart(void *par){
	
	while(1){
		if(xSemaphoreTake(Bot1_Semaphore, pdMS_TO_TICKS(70)) == pdTRUE){//if the mcu2 motor will be off or not
    21de:	64 e0       	ldi	r22, 0x04	; 4
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Bot1_Semaphore>
    21e6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Bot1_Semaphore+0x1>
    21ea:	0e 94 13 04 	call	0x826	; 0x826 <xQueueSemaphoreTake>
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	59 f4       	brne	.+22     	; 0x2208 <uart+0x2a>
			UART_Transmit_State(temperature,temp_counter,&buttonPressed);
    21f2:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <temp_counter>
    21f6:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    21fa:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    21fe:	4d ee       	ldi	r20, 0xED	; 237
    2200:	56 e0       	ldi	r21, 0x06	; 6
    2202:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <UART_Transmit_State>
    2206:	eb cf       	rjmp	.-42     	; 0x21de <uart>
		}
		else{
			UART_Transmit_State(temperature,temp_counter,&buttonPressed);
    2208:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <temp_counter>
    220c:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    2210:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    2214:	4d ee       	ldi	r20, 0xED	; 237
    2216:	56 e0       	ldi	r21, 0x06	; 6
    2218:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <UART_Transmit_State>
    221c:	e0 cf       	rjmp	.-64     	; 0x21de <uart>

Disassembly of section .text.__vector_1:

0000179e <__vector_1>:
	
}

/*	Interrupt Service Routine for INT0 (bot1)	 */
ISR(INT0_vect)
{
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0f 93       	push	r16
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
	bot1_intur++;
    17c2:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <bot1_intur>
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <bot1_intur>
	buttonPressed = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <buttonPressed>
	xSemaphoreGive(Bot1_Semaphore);		/* Set the semaphore */
    17d2:	00 e0       	ldi	r16, 0x00	; 0
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Bot1_Semaphore>
    17e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Bot1_Semaphore+0x1>
    17e6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xQueueGenericSend>
    17ea:	2f e7       	ldi	r18, 0x7F	; 127
    17ec:	88 e3       	ldi	r24, 0x38	; 56
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	21 50       	subi	r18, 0x01	; 1
    17f2:	80 40       	sbci	r24, 0x00	; 0
    17f4:	90 40       	sbci	r25, 0x00	; 0
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <__vector_1+0x52>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <__vector_1+0x5c>
    17fa:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
}
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	bf 91       	pop	r27
    1802:	af 91       	pop	r26
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	7f 91       	pop	r23
    180a:	6f 91       	pop	r22
    180c:	5f 91       	pop	r21
    180e:	4f 91       	pop	r20
    1810:	3f 91       	pop	r19
    1812:	2f 91       	pop	r18
    1814:	0f 91       	pop	r16
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

Disassembly of section .text.LCD_voidWriteBitsToSend:

0000101e <LCD_voidWriteBitsToSend>:
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    101e:	cf 93       	push	r28
    1020:	c8 2f       	mov	r28, r24
    1022:	48 2f       	mov	r20, r24
    1024:	44 1f       	adc	r20, r20
    1026:	44 27       	eor	r20, r20
    1028:	44 1f       	adc	r20, r20
    102a:	64 e0       	ldi	r22, 0x04	; 4
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    1032:	c6 fb       	bst	r28, 6
    1034:	44 27       	eor	r20, r20
    1036:	40 f9       	bld	r20, 0
    1038:	63 e0       	ldi	r22, 0x03	; 3
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    1040:	c5 fb       	bst	r28, 5
    1042:	44 27       	eor	r20, r20
    1044:	40 f9       	bld	r20, 0
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    104e:	c4 fb       	bst	r28, 4
    1050:	44 27       	eor	r20, r20
    1052:	40 f9       	bld	r20, 0
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	63 e0       	ldi	r22, 0x03	; 3
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    1066:	83 ef       	ldi	r24, 0xF3	; 243
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_voidWriteBitsToSend+0x4c>
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <LCD_voidWriteBitsToSend+0x52>
    1070:	00 00       	nop
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	63 e0       	ldi	r22, 0x03	; 3
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    107c:	c3 fb       	bst	r28, 3
    107e:	44 27       	eor	r20, r20
    1080:	40 f9       	bld	r20, 0
    1082:	64 e0       	ldi	r22, 0x04	; 4
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    108a:	c2 fb       	bst	r28, 2
    108c:	44 27       	eor	r20, r20
    108e:	40 f9       	bld	r20, 0
    1090:	63 e0       	ldi	r22, 0x03	; 3
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    1098:	c1 fb       	bst	r28, 1
    109a:	44 27       	eor	r20, r20
    109c:	40 f9       	bld	r20, 0
    109e:	62 e0       	ldi	r22, 0x02	; 2
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    10a6:	4c 2f       	mov	r20, r28
    10a8:	41 70       	andi	r20, 0x01	; 1
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    10bc:	83 ef       	ldi	r24, 0xF3	; 243
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <LCD_voidWriteBitsToSend+0xa2>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <LCD_voidWriteBitsToSend+0xa8>
    10c6:	00 00       	nop
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	63 e0       	ldi	r22, 0x03	; 3
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

Disassembly of section .text.LCD_voidWriteData:

00002584 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    2584:	cf 93       	push	r28
    2586:	c8 2f       	mov	r28, r24
	/*Set RS to HIGH */
	DIO_SetPinValue(RS_PORT,RS_PIN,DIO_HIGH);
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    2592:	8c 2f       	mov	r24, r28
    2594:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_voidWriteBitsToSend>
}
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

Disassembly of section .text.LCD_voidWriteCommand:

0000259c <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    259c:	cf 93       	push	r28
    259e:	c8 2f       	mov	r28, r24
	/*Set RS to low */
	DIO_SetPinValue(RS_PORT,RS_PIN,DIO_LOW);
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    25aa:	8c 2f       	mov	r24, r28
    25ac:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_voidWriteBitsToSend>
}
    25b0:	cf 91       	pop	r28
    25b2:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

00001c2e <LCD_voidInit>:
    1c2e:	8b e4       	ldi	r24, 0x4B	; 75
    1c30:	9d e1       	ldi	r25, 0x1D	; 29
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_voidInit+0x4>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <LCD_voidInit+0xa>
    1c38:	00 00       	nop
{
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_SetPinDirection(RS_PORT,RS_PIN,DIO_OUTPUT);
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
	// DIO_SetPinDirection(RW_PORT,RW_PIN,DIO_OUTPUT);
	DIO_SetPinDirection(EN_PORT, EN_PIN,DIO_OUTPUT);
    1c44:	41 e0       	ldi	r20, 0x01	; 1
    1c46:	63 e0       	ldi	r22, 0x03	; 3
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>

	/* Set Data Port Direction as output */
	DIO_SetPinDirection(D4_PORT,D4_PIN,DIO_OUTPUT);
    1c4e:	41 e0       	ldi	r20, 0x01	; 1
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
	DIO_SetPinDirection(D5_PORT,D5_PIN,DIO_OUTPUT);
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
	DIO_SetPinDirection(D6_PORT,D6_PIN,DIO_OUTPUT);
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	63 e0       	ldi	r22, 0x03	; 3
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
	DIO_SetPinDirection(D7_PORT,D7_PIN,DIO_OUTPUT);
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    1c7c:	88 e2       	ldi	r24, 0x28	; 40
    1c7e:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    1c82:	8c e0       	ldi	r24, 0x0C	; 12
    1c84:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    1c8e:	86 e0       	ldi	r24, 0x06	; 6
    1c90:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_voidWriteCommand>
    1c94:	08 95       	ret

Disassembly of section .text.LCD_voidWriteString:

00002362 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    2362:	0f 93       	push	r16
    2364:	1f 93       	push	r17
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	8c 01       	movw	r16, r24

	u16 i= ZERO;
    236c:	c0 e0       	ldi	r28, 0x00	; 0
    236e:	d0 e0       	ldi	r29, 0x00	; 0
	while(copy_str[i] != '\0')
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
    2372:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_voidWriteData>
		i++;
    2376:	21 96       	adiw	r28, 0x01	; 1

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    2378:	f8 01       	movw	r30, r16
    237a:	ec 0f       	add	r30, r28
    237c:	fd 1f       	adc	r31, r29
    237e:	80 81       	ld	r24, Z
    2380:	81 11       	cpse	r24, r1
    2382:	f7 cf       	rjmp	.-18     	; 0x2372 <LCD_voidWriteString+0x10>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    2384:	df 91       	pop	r29
    2386:	cf 91       	pop	r28
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

0000221e <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	00 d0       	rcall	.+0      	; 0x2224 <LCD_voidGoToXY+0x6>
    2224:	00 d0       	rcall	.+0      	; 0x2226 <LCD_voidGoToXY+0x8>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    222a:	19 82       	std	Y+1, r1	; 0x01
    222c:	90 e4       	ldi	r25, 0x40	; 64
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	94 e1       	ldi	r25, 0x14	; 20
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	94 e5       	ldi	r25, 0x54	; 84
    2236:	9c 83       	std	Y+4, r25	; 0x04

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    2238:	e1 e0       	ldi	r30, 0x01	; 1
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	ec 0f       	add	r30, r28
    223e:	fd 1f       	adc	r31, r29
    2240:	e8 0f       	add	r30, r24
    2242:	f1 1d       	adc	r31, r1
    2244:	80 81       	ld	r24, Z
    2246:	86 0f       	add	r24, r22

	LCD_voidWriteCommand(local_address) ;
    2248:	80 58       	subi	r24, 0x80	; 128
    224a:	0e 94 ce 12 	call	0x259c	; 0x259c <LCD_voidWriteCommand>

}
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

Disassembly of section .text.LCD_voidWriteNumber:

00001820 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	2a 97       	sbiw	r28, 0x0a	; 10
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
	u32 LOCAL_NUMBER=Copy_u8num ;
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1836:	10 e0       	ldi	r17, 0x00	; 0


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1838:	2a e0       	ldi	r18, 0x0A	; 10
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	0e 94 8b 10 	call	0x2116	; 0x2116 <__udivmodsi4>
    1844:	e1 e0       	ldi	r30, 0x01	; 1
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	ec 0f       	add	r30, r28
    184a:	fd 1f       	adc	r31, r29
    184c:	e1 0f       	add	r30, r17
    184e:	f1 1d       	adc	r31, r1
    1850:	60 5d       	subi	r22, 0xD0	; 208
    1852:	60 83       	st	Z, r22
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    1854:	62 2f       	mov	r22, r18
    1856:	73 2f       	mov	r23, r19
    1858:	84 2f       	mov	r24, r20
    185a:	95 2f       	mov	r25, r21
		i++ ;
    185c:	1f 5f       	subi	r17, 0xFF	; 255
	}
	while(LOCAL_NUMBER!=ZERO);
    185e:	61 15       	cp	r22, r1
    1860:	71 05       	cpc	r23, r1
    1862:	81 05       	cpc	r24, r1
    1864:	91 05       	cpc	r25, r1
    1866:	41 f7       	brne	.-48     	; 0x1838 <LCD_voidWriteNumber+0x18>
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <LCD_voidWriteNumber+0x64>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    186a:	e1 2f       	mov	r30, r17
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	31 97       	sbiw	r30, 0x01	; 1
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	8c 0f       	add	r24, r28
    1876:	9d 1f       	adc	r25, r29
    1878:	e8 0f       	add	r30, r24
    187a:	f9 1f       	adc	r31, r25
    187c:	80 81       	ld	r24, Z
    187e:	0e 94 c2 12 	call	0x2584	; 0x2584 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    1882:	11 50       	subi	r17, 0x01	; 1
    1884:	11 11       	cpse	r17, r1
    1886:	f1 cf       	rjmp	.-30     	; 0x186a <LCD_voidWriteNumber+0x4a>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    1888:	2a 96       	adiw	r28, 0x0a	; 10
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	08 95       	ret

Disassembly of section .text.LED1_Initialize:

00002690 <LED1_Initialize>:

static char num_arr[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void LED1_Initialize(void)
{
	DIO_SetPinDirection(LED1_PORT, LED1_PIN, LED1_OUTPUT);
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
    269a:	08 95       	ret

Disassembly of section .text.LED1_ON:

0000269c <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_HIGH);
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    26a6:	08 95       	ret

Disassembly of section .text.LED1_OFF:

000026a8 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_LOW);
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    26b2:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

000026b4 <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
    26be:	08 95       	ret

Disassembly of section .text.Read_TEMP_SENSOR:

00002304 <Read_TEMP_SENSOR>:
}

temp Read_TEMP_SENSOR(void){
	uint16_t temp_volt=ADC_Read(TEMP_SEN_PIN);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <ADC_Read>
	temp temp_read = temp_volt*500.0/1024.0 ;
    230a:	bc 01       	movw	r22, r24
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatunsisf>
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	53 e4       	ldi	r21, 0x43	; 67
    231c:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5a e3       	ldi	r21, 0x3A	; 58
    2328:	0e 94 94 13 	call	0x2728	; 0x2728 <__mulsf3>
    232c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__fixunssfsi>
	return temp_read;
    2330:	cb 01       	movw	r24, r22
    2332:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00001ebe <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{	
	switch(motor)
    1ebe:	88 23       	and	r24, r24
    1ec0:	19 f0       	breq	.+6      	; 0x1ec8 <DC_Initialize+0xa>
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	a9 f0       	breq	.+42     	; 0x1ef0 <DC_Initialize+0x32>
    1ec6:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	65 e0       	ldi	r22, 0x05	; 5
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	62 e0       	ldi	r22, 0x02	; 2
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
		// Set Timer1 to Fast PWM mode with 8-bit resolution
		TCCR1A = (1 << WGM10) | (1 << WGM12) | (1 << COM1A1); // Fast PWM, Clear OC1A on Compare Match
    1ee6:	89 e8       	ldi	r24, 0x89	; 137
    1ee8:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);    // Prescaler = 64, start the timer
    1eea:	8b e0       	ldi	r24, 0x0B	; 11
    1eec:	8e bd       	out	0x2e, r24	; 46
		break;
    1eee:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	62 e0       	ldi	r22, 0x02	; 2
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_SetPinDirection>
    1f0e:	08 95       	ret

Disassembly of section .text.DC_Start:

00001604 <DC_Start>:
	}
	
}

void DC_Start(dc_motor motor, dc_motor_direction direction)
{	
    1604:	cf 93       	push	r28
    1606:	c6 2f       	mov	r28, r22
	switch(motor)
    1608:	88 23       	and	r24, r24
    160a:	19 f0       	breq	.+6      	; 0x1612 <DC_Start+0xe>
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	09 f1       	breq	.+66     	; 0x1652 <DC_Start+0x4e>
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <DC_Start+0x8c>
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_HIGH);
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	65 e0       	ldi	r22, 0x05	; 5
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		switch(direction)
    161c:	cc 23       	and	r28, r28
    161e:	19 f0       	breq	.+6      	; 0x1626 <DC_Start+0x22>
    1620:	c1 30       	cpi	r28, 0x01	; 1
    1622:	61 f0       	breq	.+24     	; 0x163c <DC_Start+0x38>
    1624:	35 c0       	rjmp	.+106    	; 0x1690 <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_HIGH);
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	62 e0       	ldi	r22, 0x02	; 2
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			break;
    163a:	2a c0       	rjmp	.+84     	; 0x1690 <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_HIGH);
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	62 e0       	ldi	r22, 0x02	; 2
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			break;
    1650:	1f c0       	rjmp	.+62     	; 0x1690 <DC_Start+0x8c>
		}
		break;
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_HIGH);
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	62 e0       	ldi	r22, 0x02	; 2
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		switch(direction)
    165c:	cc 23       	and	r28, r28
    165e:	19 f0       	breq	.+6      	; 0x1666 <DC_Start+0x62>
    1660:	c1 30       	cpi	r28, 0x01	; 1
    1662:	61 f0       	breq	.+24     	; 0x167c <DC_Start+0x78>
    1664:	15 c0       	rjmp	.+42     	; 0x1690 <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_HIGH);
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	62 e0       	ldi	r22, 0x02	; 2
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			break;
    167a:	0a c0       	rjmp	.+20     	; 0x1690 <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
    167c:	40 e0       	ldi	r20, 0x00	; 0
    167e:	62 e0       	ldi	r22, 0x02	; 2
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_HIGH);
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
			break;
		}
		break;
	}
}
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

Disassembly of section .text.DC_Stop:

00001f10 <DC_Stop>:

void DC_Stop(dc_motor motor)
{
	switch(motor)
    1f10:	88 23       	and	r24, r24
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <DC_Stop+0xa>
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	99 f0       	breq	.+38     	; 0x1f3e <DC_Stop+0x2e>
    1f18:	08 95       	ret
	{
		case DC_Motor1:
		// Stop the pulse
		OCR1A=0;
    1f1a:	1b bc       	out	0x2b, r1	; 43
    1f1c:	1a bc       	out	0x2a, r1	; 42
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_LOW);
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	65 e0       	ldi	r22, 0x05	; 5
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	62 e0       	ldi	r22, 0x02	; 2
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		break;
    1f3c:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_LOW);
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	62 e0       	ldi	r22, 0x02	; 2
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	62 e0       	ldi	r22, 0x02	; 2
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	62 e0       	ldi	r22, 0x02	; 2
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	0e 94 f6 05 	call	0xbec	; 0xbec <DIO_SetPinValue>
    1f5c:	08 95       	ret

Disassembly of section .text.DC_Change_Speed:

000024dc <DC_Change_Speed>:
		break;
	}
}

void DC_Change_Speed(dc_motor motor,uint16_t speed)
{	switch (motor){
    24dc:	88 23       	and	r24, r24
    24de:	19 f0       	breq	.+6      	; 0x24e6 <DC_Change_Speed+0xa>
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	21 f0       	breq	.+8      	; 0x24ec <DC_Change_Speed+0x10>
    24e4:	08 95       	ret
		case DC_Motor1:
			OCR1A = speed;
    24e6:	7b bd       	out	0x2b, r23	; 43
    24e8:	6a bd       	out	0x2a, r22	; 42
		break;
    24ea:	08 95       	ret
		case DC_Motor2:
			OCR1B = speed/4;
    24ec:	76 95       	lsr	r23
    24ee:	67 95       	ror	r22
    24f0:	76 95       	lsr	r23
    24f2:	67 95       	ror	r22
    24f4:	79 bd       	out	0x29, r23	; 41
    24f6:	68 bd       	out	0x28, r22	; 40
    24f8:	08 95       	ret

Disassembly of section .text.main:

000025f6 <main>:


int main(void)
{	
	
	App_Init();
    25f6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <App_Init>
	Free_RTOS_Init();
    25fa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Free_RTOS_Init>
	

		
	vTaskStartScheduler();
    25fe:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <vTaskStartScheduler>
	//Recieve the message (Speed)
	UART_Receive_Speed(&Speed_Scale);
	*/
	

}
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	08 95       	ret

Disassembly of section .text.ADC_Initialize:

0000264c <ADC_Initialize>:

#include "ADC_Private.h"

void ADC_Initialize(adc_vref voltage , adc_prescaler prescaler)
{
	ADMUX |= 0x40;
    264c:	87 b1       	in	r24, 0x07	; 7
    264e:	80 64       	ori	r24, 0x40	; 64
    2650:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xA7;
    2652:	86 b1       	in	r24, 0x06	; 6
    2654:	87 6a       	ori	r24, 0xA7	; 167
    2656:	86 b9       	out	0x06, r24	; 6
    2658:	08 95       	ret

Disassembly of section .text.ADC_Read:

00001a06 <ADC_Read>:
}

uint16_t ADC_Read(adc_channel channel)
{
    1a06:	e8 2f       	mov	r30, r24
	uint16_t val = 0;

	// Clear the ADC result register by reading it once
	uint16_t dummy = ADC_VAL;
    1a08:	84 b1       	in	r24, 0x04	; 4
    1a0a:	95 b1       	in	r25, 0x05	; 5

	// Select the ADC channel
	switch (channel)
    1a0c:	8e 2f       	mov	r24, r30
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	88 30       	cpi	r24, 0x08	; 8
    1a12:	91 05       	cpc	r25, r1
    1a14:	50 f5       	brcc	.+84     	; 0x1a6a <ADC_Read+0x64>
    1a16:	fc 01       	movw	r30, r24
    1a18:	e6 5d       	subi	r30, 0xD6	; 214
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__tablejump2__>
	{
		case ADC_0:
		ADMUX = (ADMUX & 0xF8) | 0x00; // Clear the channel bits and set ADC0
    1a20:	87 b1       	in	r24, 0x07	; 7
    1a22:	88 7f       	andi	r24, 0xF8	; 248
    1a24:	87 b9       	out	0x07, r24	; 7
		break;
    1a26:	21 c0       	rjmp	.+66     	; 0x1a6a <ADC_Read+0x64>
		case ADC_1:
		ADMUX = (ADMUX & 0xF8) | 0x01; // Clear the channel bits and set ADC1
    1a28:	87 b1       	in	r24, 0x07	; 7
    1a2a:	88 7f       	andi	r24, 0xF8	; 248
    1a2c:	81 60       	ori	r24, 0x01	; 1
    1a2e:	87 b9       	out	0x07, r24	; 7
		break;
    1a30:	1c c0       	rjmp	.+56     	; 0x1a6a <ADC_Read+0x64>
		case ADC_2:
		ADMUX = (ADMUX & 0xF8) | 0x02; // Clear the channel bits and set ADC2
    1a32:	87 b1       	in	r24, 0x07	; 7
    1a34:	88 7f       	andi	r24, 0xF8	; 248
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	87 b9       	out	0x07, r24	; 7
		break;
    1a3a:	17 c0       	rjmp	.+46     	; 0x1a6a <ADC_Read+0x64>
		case ADC_3:
		ADMUX = (ADMUX & 0xF8) | 0x03; // Clear the channel bits and set ADC3
    1a3c:	87 b1       	in	r24, 0x07	; 7
    1a3e:	88 7f       	andi	r24, 0xF8	; 248
    1a40:	83 60       	ori	r24, 0x03	; 3
    1a42:	87 b9       	out	0x07, r24	; 7
		break;
    1a44:	12 c0       	rjmp	.+36     	; 0x1a6a <ADC_Read+0x64>
		case ADC_4:
		ADMUX = (ADMUX & 0xF8) | 0x04; // Clear the channel bits and set ADC4
    1a46:	87 b1       	in	r24, 0x07	; 7
    1a48:	88 7f       	andi	r24, 0xF8	; 248
    1a4a:	84 60       	ori	r24, 0x04	; 4
    1a4c:	87 b9       	out	0x07, r24	; 7
		break;
    1a4e:	0d c0       	rjmp	.+26     	; 0x1a6a <ADC_Read+0x64>
		case ADC_5:
		ADMUX = (ADMUX & 0xF8) | 0x05; // Clear the channel bits and set ADC5
    1a50:	87 b1       	in	r24, 0x07	; 7
    1a52:	88 7f       	andi	r24, 0xF8	; 248
    1a54:	85 60       	ori	r24, 0x05	; 5
    1a56:	87 b9       	out	0x07, r24	; 7
		break;
    1a58:	08 c0       	rjmp	.+16     	; 0x1a6a <ADC_Read+0x64>
		case ADC_6:
		ADMUX = (ADMUX & 0xF8) | 0x06; // Clear the channel bits and set ADC6
    1a5a:	87 b1       	in	r24, 0x07	; 7
    1a5c:	88 7f       	andi	r24, 0xF8	; 248
    1a5e:	86 60       	ori	r24, 0x06	; 6
    1a60:	87 b9       	out	0x07, r24	; 7
		break;
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <ADC_Read+0x64>
		case ADC_7:
		ADMUX = (ADMUX & 0xF8) | 0x07; // Clear the channel bits and set ADC7
    1a64:	87 b1       	in	r24, 0x07	; 7
    1a66:	87 60       	ori	r24, 0x07	; 7
    1a68:	87 b9       	out	0x07, r24	; 7
		break;
	}

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
    1a6a:	86 b1       	in	r24, 0x06	; 6
    1a6c:	80 64       	ori	r24, 0x40	; 64
    1a6e:	86 b9       	out	0x06, r24	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
    1a70:	36 99       	sbic	0x06, 6	; 6
    1a72:	fe cf       	rjmp	.-4      	; 0x1a70 <ADC_Read+0x6a>

	// Read the converted value
	val = ADC_VAL;
    1a74:	84 b1       	in	r24, 0x04	; 4
    1a76:	95 b1       	in	r25, 0x05	; 5

	return val;
}
    1a78:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

00000b0a <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 b0a:	44 23       	and	r20, r20
 b0c:	19 f0       	breq	.+6      	; 0xb14 <DIO_SetPinDirection+0xa>
 b0e:	41 30       	cpi	r20, 0x01	; 1
 b10:	c9 f1       	breq	.+114    	; 0xb84 <DIO_SetPinDirection+0x7a>
 b12:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 b14:	81 30       	cpi	r24, 0x01	; 1
 b16:	91 f0       	breq	.+36     	; 0xb3c <DIO_SetPinDirection+0x32>
 b18:	28 f0       	brcs	.+10     	; 0xb24 <DIO_SetPinDirection+0x1a>
 b1a:	82 30       	cpi	r24, 0x02	; 2
 b1c:	d9 f0       	breq	.+54     	; 0xb54 <DIO_SetPinDirection+0x4a>
 b1e:	83 30       	cpi	r24, 0x03	; 3
 b20:	29 f1       	breq	.+74     	; 0xb6c <DIO_SetPinDirection+0x62>
 b22:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 b24:	2a b3       	in	r18, 0x1a	; 26
 b26:	81 e0       	ldi	r24, 0x01	; 1
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_SetPinDirection+0x26>
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	6a 95       	dec	r22
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_SetPinDirection+0x22>
 b34:	80 95       	com	r24
 b36:	82 23       	and	r24, r18
 b38:	8a bb       	out	0x1a, r24	; 26
			break;
 b3a:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 b3c:	27 b3       	in	r18, 0x17	; 23
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_SetPinDirection+0x3e>
 b44:	88 0f       	add	r24, r24
 b46:	99 1f       	adc	r25, r25
 b48:	6a 95       	dec	r22
 b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_SetPinDirection+0x3a>
 b4c:	80 95       	com	r24
 b4e:	82 23       	and	r24, r18
 b50:	87 bb       	out	0x17, r24	; 23
			break;
 b52:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 b54:	24 b3       	in	r18, 0x14	; 20
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_SetPinDirection+0x56>
 b5c:	88 0f       	add	r24, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	6a 95       	dec	r22
 b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_SetPinDirection+0x52>
 b64:	80 95       	com	r24
 b66:	82 23       	and	r24, r18
 b68:	84 bb       	out	0x14, r24	; 20
			break;
 b6a:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 b6c:	21 b3       	in	r18, 0x11	; 17
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <DIO_SetPinDirection+0x6e>
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	6a 95       	dec	r22
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <DIO_SetPinDirection+0x6a>
 b7c:	80 95       	com	r24
 b7e:	82 23       	and	r24, r18
 b80:	81 bb       	out	0x11, r24	; 17
			break;
 b82:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 b84:	81 30       	cpi	r24, 0x01	; 1
 b86:	89 f0       	breq	.+34     	; 0xbaa <DIO_SetPinDirection+0xa0>
 b88:	28 f0       	brcs	.+10     	; 0xb94 <DIO_SetPinDirection+0x8a>
 b8a:	82 30       	cpi	r24, 0x02	; 2
 b8c:	c9 f0       	breq	.+50     	; 0xbc0 <DIO_SetPinDirection+0xb6>
 b8e:	83 30       	cpi	r24, 0x03	; 3
 b90:	11 f1       	breq	.+68     	; 0xbd6 <DIO_SetPinDirection+0xcc>
 b92:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 b94:	2a b3       	in	r18, 0x1a	; 26
 b96:	81 e0       	ldi	r24, 0x01	; 1
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_SetPinDirection+0x96>
 b9c:	88 0f       	add	r24, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	6a 95       	dec	r22
 ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_SetPinDirection+0x92>
 ba4:	82 2b       	or	r24, r18
 ba6:	8a bb       	out	0x1a, r24	; 26
			break;
 ba8:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 baa:	27 b3       	in	r18, 0x17	; 23
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_SetPinDirection+0xac>
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	6a 95       	dec	r22
 bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_SetPinDirection+0xa8>
 bba:	82 2b       	or	r24, r18
 bbc:	87 bb       	out	0x17, r24	; 23
			break;
 bbe:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 bc0:	24 b3       	in	r18, 0x14	; 20
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <DIO_SetPinDirection+0xc2>
 bc8:	88 0f       	add	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	6a 95       	dec	r22
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <DIO_SetPinDirection+0xbe>
 bd0:	82 2b       	or	r24, r18
 bd2:	84 bb       	out	0x14, r24	; 20
			break;
 bd4:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 bd6:	21 b3       	in	r18, 0x11	; 17
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_SetPinDirection+0xd8>
 bde:	88 0f       	add	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	6a 95       	dec	r22
 be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_SetPinDirection+0xd4>
 be6:	82 2b       	or	r24, r18
 be8:	81 bb       	out	0x11, r24	; 17
 bea:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

00000bec <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 bec:	44 23       	and	r20, r20
 bee:	19 f0       	breq	.+6      	; 0xbf6 <DIO_SetPinValue+0xa>
 bf0:	41 30       	cpi	r20, 0x01	; 1
 bf2:	c9 f1       	breq	.+114    	; 0xc66 <DIO_SetPinValue+0x7a>
 bf4:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 bf6:	81 30       	cpi	r24, 0x01	; 1
 bf8:	91 f0       	breq	.+36     	; 0xc1e <DIO_SetPinValue+0x32>
 bfa:	28 f0       	brcs	.+10     	; 0xc06 <DIO_SetPinValue+0x1a>
 bfc:	82 30       	cpi	r24, 0x02	; 2
 bfe:	d9 f0       	breq	.+54     	; 0xc36 <DIO_SetPinValue+0x4a>
 c00:	83 30       	cpi	r24, 0x03	; 3
 c02:	29 f1       	breq	.+74     	; 0xc4e <DIO_SetPinValue+0x62>
 c04:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 c06:	2b b3       	in	r18, 0x1b	; 27
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_SetPinValue+0x26>
 c0e:	88 0f       	add	r24, r24
 c10:	99 1f       	adc	r25, r25
 c12:	6a 95       	dec	r22
 c14:	e2 f7       	brpl	.-8      	; 0xc0e <DIO_SetPinValue+0x22>
 c16:	80 95       	com	r24
 c18:	82 23       	and	r24, r18
 c1a:	8b bb       	out	0x1b, r24	; 27
			break;
 c1c:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 c1e:	28 b3       	in	r18, 0x18	; 24
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_SetPinValue+0x3e>
 c26:	88 0f       	add	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	6a 95       	dec	r22
 c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_SetPinValue+0x3a>
 c2e:	80 95       	com	r24
 c30:	82 23       	and	r24, r18
 c32:	88 bb       	out	0x18, r24	; 24
			break;
 c34:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 c36:	25 b3       	in	r18, 0x15	; 21
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_SetPinValue+0x56>
 c3e:	88 0f       	add	r24, r24
 c40:	99 1f       	adc	r25, r25
 c42:	6a 95       	dec	r22
 c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_SetPinValue+0x52>
 c46:	80 95       	com	r24
 c48:	82 23       	and	r24, r18
 c4a:	85 bb       	out	0x15, r24	; 21
			break;
 c4c:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 c4e:	22 b3       	in	r18, 0x12	; 18
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_SetPinValue+0x6e>
 c56:	88 0f       	add	r24, r24
 c58:	99 1f       	adc	r25, r25
 c5a:	6a 95       	dec	r22
 c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_SetPinValue+0x6a>
 c5e:	80 95       	com	r24
 c60:	82 23       	and	r24, r18
 c62:	82 bb       	out	0x12, r24	; 18
			break;
 c64:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 c66:	81 30       	cpi	r24, 0x01	; 1
 c68:	89 f0       	breq	.+34     	; 0xc8c <DIO_SetPinValue+0xa0>
 c6a:	28 f0       	brcs	.+10     	; 0xc76 <DIO_SetPinValue+0x8a>
 c6c:	82 30       	cpi	r24, 0x02	; 2
 c6e:	c9 f0       	breq	.+50     	; 0xca2 <DIO_SetPinValue+0xb6>
 c70:	83 30       	cpi	r24, 0x03	; 3
 c72:	11 f1       	breq	.+68     	; 0xcb8 <DIO_SetPinValue+0xcc>
 c74:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 c76:	2b b3       	in	r18, 0x1b	; 27
 c78:	81 e0       	ldi	r24, 0x01	; 1
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_SetPinValue+0x96>
 c7e:	88 0f       	add	r24, r24
 c80:	99 1f       	adc	r25, r25
 c82:	6a 95       	dec	r22
 c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_SetPinValue+0x92>
 c86:	82 2b       	or	r24, r18
 c88:	8b bb       	out	0x1b, r24	; 27
			break;
 c8a:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 c8c:	28 b3       	in	r18, 0x18	; 24
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_SetPinValue+0xac>
 c94:	88 0f       	add	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	6a 95       	dec	r22
 c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_SetPinValue+0xa8>
 c9c:	82 2b       	or	r24, r18
 c9e:	88 bb       	out	0x18, r24	; 24
			break;
 ca0:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 ca2:	25 b3       	in	r18, 0x15	; 21
 ca4:	81 e0       	ldi	r24, 0x01	; 1
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_SetPinValue+0xc2>
 caa:	88 0f       	add	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	6a 95       	dec	r22
 cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_SetPinValue+0xbe>
 cb2:	82 2b       	or	r24, r18
 cb4:	85 bb       	out	0x15, r24	; 21
			break;
 cb6:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 cb8:	22 b3       	in	r18, 0x12	; 18
 cba:	81 e0       	ldi	r24, 0x01	; 1
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_SetPinValue+0xd8>
 cc0:	88 0f       	add	r24, r24
 cc2:	99 1f       	adc	r25, r25
 cc4:	6a 95       	dec	r22
 cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_SetPinValue+0xd4>
 cc8:	82 2b       	or	r24, r18
 cca:	82 bb       	out	0x12, r24	; 18
 ccc:	08 95       	ret

Disassembly of section .text.External_Interrupt0_Initalize:

00001e12 <External_Interrupt0_Initalize>:
#include "Interrupt_Private.h"

void External_Interrupt0_Initalize(int0_sense sense)
{
	// Define interrupt pin INT0 as input 
	CLR_BIT(DDRD,2);	
    1e12:	91 b3       	in	r25, 0x11	; 17
    1e14:	9b 7f       	andi	r25, 0xFB	; 251
    1e16:	91 bb       	out	0x11, r25	; 17
	// Disable global interrupt while initialization 
	cli();//Clear interrupt, CLR_BIT(SREG,7);
    1e18:	f8 94       	cli
	// Choose sensing method
	switch(sense)
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	69 f0       	breq	.+26     	; 0x1e38 <External_Interrupt0_Initalize+0x26>
    1e1e:	28 f0       	brcs	.+10     	; 0x1e2a <External_Interrupt0_Initalize+0x18>
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	c1 f0       	breq	.+48     	; 0x1e54 <External_Interrupt0_Initalize+0x42>
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	79 f0       	breq	.+30     	; 0x1e46 <External_Interrupt0_Initalize+0x34>
    1e28:	1b c0       	rjmp	.+54     	; 0x1e60 <External_Interrupt0_Initalize+0x4e>
	{
		case INT0_LOW:
		CLR_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 0 0
    1e2a:	85 b7       	in	r24, 0x35	; 53
    1e2c:	8d 7f       	andi	r24, 0xFD	; 253
    1e2e:	85 bf       	out	0x35, r24	; 53
    1e30:	85 b7       	in	r24, 0x35	; 53
    1e32:	8e 7f       	andi	r24, 0xFE	; 254
    1e34:	85 bf       	out	0x35, r24	; 53
		break;
    1e36:	14 c0       	rjmp	.+40     	; 0x1e60 <External_Interrupt0_Initalize+0x4e>
		case INT0_HIGH:
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 0 1
    1e38:	85 b7       	in	r24, 0x35	; 53
    1e3a:	8d 7f       	andi	r24, 0xFD	; 253
    1e3c:	85 bf       	out	0x35, r24	; 53
    1e3e:	85 b7       	in	r24, 0x35	; 53
    1e40:	81 60       	ori	r24, 0x01	; 1
    1e42:	85 bf       	out	0x35, r24	; 53
		break;
    1e44:	0d c0       	rjmp	.+26     	; 0x1e60 <External_Interrupt0_Initalize+0x4e>
		case INT0_FALLING:
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 1 0
    1e46:	85 b7       	in	r24, 0x35	; 53
    1e48:	82 60       	ori	r24, 0x02	; 2
    1e4a:	85 bf       	out	0x35, r24	; 53
    1e4c:	85 b7       	in	r24, 0x35	; 53
    1e4e:	8e 7f       	andi	r24, 0xFE	; 254
    1e50:	85 bf       	out	0x35, r24	; 53
		break;
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <External_Interrupt0_Initalize+0x4e>
		case INT0_RISING:
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 1 1
    1e54:	85 b7       	in	r24, 0x35	; 53
    1e56:	82 60       	ori	r24, 0x02	; 2
    1e58:	85 bf       	out	0x35, r24	; 53
    1e5a:	85 b7       	in	r24, 0x35	; 53
    1e5c:	81 60       	ori	r24, 0x01	; 1
    1e5e:	85 bf       	out	0x35, r24	; 53
		break;
		
	}
	// Enable peripheral interrupt 
	SET_BIT(GICR, INT0);
    1e60:	8b b7       	in	r24, 0x3b	; 59
    1e62:	80 64       	ori	r24, 0x40	; 64
    1e64:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupt after initialization 
	sei();//Set interrupt, SET_BIT(SREG,7);
    1e66:	78 94       	sei
    1e68:	08 95       	ret

Disassembly of section .text.UART_Initialize_WithoutInterrupt:

000004d4 <UART_Initialize_WithoutInterrupt>:
uart_status UART_Receive_Character(uint8_t* data)
{
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}
 4d4:	0f 93       	push	r16
 4d6:	31 b3       	in	r19, 0x11	; 17
 4d8:	32 60       	ori	r19, 0x02	; 2
 4da:	31 bb       	out	0x11, r19	; 17
 4dc:	31 b3       	in	r19, 0x11	; 17
 4de:	3e 7f       	andi	r19, 0xFE	; 254
 4e0:	31 bb       	out	0x11, r19	; 17
 4e2:	3a b1       	in	r19, 0x0a	; 10
 4e4:	38 61       	ori	r19, 0x18	; 24
 4e6:	3a b9       	out	0x0a, r19	; 10
 4e8:	66 23       	and	r22, r22
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <UART_Initialize_WithoutInterrupt+0x1e>
 4ec:	61 30       	cpi	r22, 0x01	; 1
 4ee:	29 f0       	breq	.+10     	; 0x4fa <UART_Initialize_WithoutInterrupt+0x26>
 4f0:	07 c0       	rjmp	.+14     	; 0x500 <UART_Initialize_WithoutInterrupt+0x2c>
 4f2:	30 b5       	in	r19, 0x20	; 32
 4f4:	3f 77       	andi	r19, 0x7F	; 127
 4f6:	30 bd       	out	0x20, r19	; 32
 4f8:	03 c0       	rjmp	.+6      	; 0x500 <UART_Initialize_WithoutInterrupt+0x2c>
 4fa:	30 b5       	in	r19, 0x20	; 32
 4fc:	30 68       	ori	r19, 0x80	; 128
 4fe:	30 bd       	out	0x20, r19	; 32
 500:	22 30       	cpi	r18, 0x02	; 2
 502:	f9 f0       	breq	.+62     	; 0x542 <UART_Initialize_WithoutInterrupt+0x6e>
 504:	28 f4       	brcc	.+10     	; 0x510 <UART_Initialize_WithoutInterrupt+0x3c>
 506:	22 23       	and	r18, r18
 508:	41 f0       	breq	.+16     	; 0x51a <UART_Initialize_WithoutInterrupt+0x46>
 50a:	21 30       	cpi	r18, 0x01	; 1
 50c:	81 f0       	breq	.+32     	; 0x52e <UART_Initialize_WithoutInterrupt+0x5a>
 50e:	36 c0       	rjmp	.+108    	; 0x57c <UART_Initialize_WithoutInterrupt+0xa8>
 510:	23 30       	cpi	r18, 0x03	; 3
 512:	09 f1       	breq	.+66     	; 0x556 <UART_Initialize_WithoutInterrupt+0x82>
 514:	24 30       	cpi	r18, 0x04	; 4
 516:	49 f1       	breq	.+82     	; 0x56a <UART_Initialize_WithoutInterrupt+0x96>
 518:	31 c0       	rjmp	.+98     	; 0x57c <UART_Initialize_WithoutInterrupt+0xa8>
 51a:	2a b1       	in	r18, 0x0a	; 10
 51c:	2b 7f       	andi	r18, 0xFB	; 251
 51e:	2a b9       	out	0x0a, r18	; 10
 520:	20 b5       	in	r18, 0x20	; 32
 522:	2b 7f       	andi	r18, 0xFB	; 251
 524:	20 bd       	out	0x20, r18	; 32
 526:	20 b5       	in	r18, 0x20	; 32
 528:	2d 7f       	andi	r18, 0xFD	; 253
 52a:	20 bd       	out	0x20, r18	; 32
 52c:	27 c0       	rjmp	.+78     	; 0x57c <UART_Initialize_WithoutInterrupt+0xa8>
 52e:	2a b1       	in	r18, 0x0a	; 10
 530:	2b 7f       	andi	r18, 0xFB	; 251
 532:	2a b9       	out	0x0a, r18	; 10
 534:	20 b5       	in	r18, 0x20	; 32
 536:	2b 7f       	andi	r18, 0xFB	; 251
 538:	20 bd       	out	0x20, r18	; 32
 53a:	20 b5       	in	r18, 0x20	; 32
 53c:	22 60       	ori	r18, 0x02	; 2
 53e:	20 bd       	out	0x20, r18	; 32
 540:	1d c0       	rjmp	.+58     	; 0x57c <UART_Initialize_WithoutInterrupt+0xa8>
 542:	2a b1       	in	r18, 0x0a	; 10
 544:	2b 7f       	andi	r18, 0xFB	; 251
 546:	2a b9       	out	0x0a, r18	; 10
 548:	20 b5       	in	r18, 0x20	; 32
 54a:	24 60       	ori	r18, 0x04	; 4
 54c:	20 bd       	out	0x20, r18	; 32
 54e:	20 b5       	in	r18, 0x20	; 32
 550:	2d 7f       	andi	r18, 0xFD	; 253
 552:	20 bd       	out	0x20, r18	; 32
 554:	13 c0       	rjmp	.+38     	; 0x57c <UART_Initialize_WithoutInterrupt+0xa8>
 556:	2a b1       	in	r18, 0x0a	; 10
 558:	2b 7f       	andi	r18, 0xFB	; 251
 55a:	2a b9       	out	0x0a, r18	; 10
 55c:	20 b5       	in	r18, 0x20	; 32
 55e:	24 60       	ori	r18, 0x04	; 4
 560:	20 bd       	out	0x20, r18	; 32
 562:	20 b5       	in	r18, 0x20	; 32
 564:	22 60       	ori	r18, 0x02	; 2
 566:	20 bd       	out	0x20, r18	; 32
 568:	09 c0       	rjmp	.+18     	; 0x57c <UART_Initialize_WithoutInterrupt+0xa8>
 56a:	2a b1       	in	r18, 0x0a	; 10
 56c:	24 60       	ori	r18, 0x04	; 4
 56e:	2a b9       	out	0x0a, r18	; 10
 570:	20 b5       	in	r18, 0x20	; 32
 572:	24 60       	ori	r18, 0x04	; 4
 574:	20 bd       	out	0x20, r18	; 32
 576:	20 b5       	in	r18, 0x20	; 32
 578:	22 60       	ori	r18, 0x02	; 2
 57a:	20 bd       	out	0x20, r18	; 32
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	59 f0       	breq	.+22     	; 0x596 <UART_Initialize_WithoutInterrupt+0xc2>
 580:	18 f0       	brcs	.+6      	; 0x588 <UART_Initialize_WithoutInterrupt+0xb4>
 582:	42 30       	cpi	r20, 0x02	; 2
 584:	79 f0       	breq	.+30     	; 0x5a4 <UART_Initialize_WithoutInterrupt+0xd0>
 586:	14 c0       	rjmp	.+40     	; 0x5b0 <UART_Initialize_WithoutInterrupt+0xdc>
 588:	20 b5       	in	r18, 0x20	; 32
 58a:	2f 7d       	andi	r18, 0xDF	; 223
 58c:	20 bd       	out	0x20, r18	; 32
 58e:	20 b5       	in	r18, 0x20	; 32
 590:	2f 7e       	andi	r18, 0xEF	; 239
 592:	20 bd       	out	0x20, r18	; 32
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <UART_Initialize_WithoutInterrupt+0xdc>
 596:	20 b5       	in	r18, 0x20	; 32
 598:	20 62       	ori	r18, 0x20	; 32
 59a:	20 bd       	out	0x20, r18	; 32
 59c:	20 b5       	in	r18, 0x20	; 32
 59e:	2f 7e       	andi	r18, 0xEF	; 239
 5a0:	20 bd       	out	0x20, r18	; 32
 5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <UART_Initialize_WithoutInterrupt+0xdc>
 5a4:	20 b5       	in	r18, 0x20	; 32
 5a6:	20 62       	ori	r18, 0x20	; 32
 5a8:	20 bd       	out	0x20, r18	; 32
 5aa:	20 b5       	in	r18, 0x20	; 32
 5ac:	20 61       	ori	r18, 0x10	; 16
 5ae:	20 bd       	out	0x20, r18	; 32
 5b0:	00 23       	and	r16, r16
 5b2:	19 f0       	breq	.+6      	; 0x5ba <UART_Initialize_WithoutInterrupt+0xe6>
 5b4:	01 30       	cpi	r16, 0x01	; 1
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <UART_Initialize_WithoutInterrupt+0xee>
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <UART_Initialize_WithoutInterrupt+0xf4>
 5ba:	20 b5       	in	r18, 0x20	; 32
 5bc:	27 7f       	andi	r18, 0xF7	; 247
 5be:	20 bd       	out	0x20, r18	; 32
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <UART_Initialize_WithoutInterrupt+0xf4>
 5c2:	20 b5       	in	r18, 0x20	; 32
 5c4:	28 60       	ori	r18, 0x08	; 8
 5c6:	20 bd       	out	0x20, r18	; 32
 5c8:	9c 01       	movw	r18, r24
 5ca:	22 95       	swap	r18
 5cc:	32 95       	swap	r19
 5ce:	30 7f       	andi	r19, 0xF0	; 240
 5d0:	32 27       	eor	r19, r18
 5d2:	20 7f       	andi	r18, 0xF0	; 240
 5d4:	32 27       	eor	r19, r18
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	71 e7       	ldi	r23, 0x71	; 113
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 9a 11 	call	0x2334	; 0x2334 <__divmodsi4>
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	31 09       	sbc	r19, r1
 5ea:	29 b9       	out	0x09, r18	; 9
 5ec:	30 bd       	out	0x20, r19	; 32
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	0f 91       	pop	r16
 5f2:	08 95       	ret

Disassembly of section .text.UART_Transmit_Character:

000026f0 <UART_Transmit_Character>:

}
uart_status UART_Transmit_Character(uint8_t data)
{

	while ((!(UCSRA & (1 << UDRE))) ) {
    26f0:	5d 9b       	sbis	0x0b, 5	; 11
    26f2:	fe cf       	rjmp	.-4      	; 0x26f0 <UART_Transmit_Character>
		// Wait until the transmit buffer is empty
	}
	
	UDR = data;
    26f4:	8c b9       	out	0x0c, r24	; 12
	//while (((UCSRA>>TXC)&0x01) != 1);//Wait until flag of transmitting received
	return UART_OK;
}
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	08 95       	ret

Disassembly of section .text.UART_Transmit_Word:

00002518 <UART_Transmit_Word>:
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}

uart_status UART_Transmit_Word(uint16_t data){
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	d8 2f       	mov	r29, r24
	uint8_t high_byte = (data >> 8) & 0xFF;
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
    251e:	89 2f       	mov	r24, r25
    2520:	0e 94 78 13 	call	0x26f0	; 0x26f0 <UART_Transmit_Character>
    2524:	c8 2f       	mov	r28, r24
	s|= UART_Transmit_Character(low_byte);
    2526:	8d 2f       	mov	r24, r29
    2528:	0e 94 78 13 	call	0x26f0	; 0x26f0 <UART_Transmit_Character>
	return s;

}
    252c:	8c 2b       	or	r24, r28
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

00001bc4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1bca:	0e 94 66 13 	call	0x26cc	; 0x26cc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1bce:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <pucAlignedHeap.2045>
    1bd2:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <pucAlignedHeap.2045+0x1>
    1bd6:	89 2b       	or	r24, r25
    1bd8:	31 f4       	brne	.+12     	; 0x1be6 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1bda:	81 e7       	ldi	r24, 0x71	; 113
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <pucAlignedHeap.2045+0x1>
    1be2:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <pucAlignedHeap.2045>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1be6:	20 91 d7 06 	lds	r18, 0x06D7	; 0x8006d7 <xNextFreeByte>
    1bea:	30 91 d8 06 	lds	r19, 0x06D8	; 0x8006d8 <xNextFreeByte+0x1>
    1bee:	c9 01       	movw	r24, r18
    1bf0:	8c 0f       	add	r24, r28
    1bf2:	9d 1f       	adc	r25, r29
    1bf4:	8b 3d       	cpi	r24, 0xDB	; 219
    1bf6:	45 e0       	ldi	r20, 0x05	; 5
    1bf8:	94 07       	cpc	r25, r20
    1bfa:	70 f4       	brcc	.+28     	; 0x1c18 <pvPortMalloc+0x54>
    1bfc:	28 17       	cp	r18, r24
    1bfe:	39 07       	cpc	r19, r25
    1c00:	70 f4       	brcc	.+28     	; 0x1c1e <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1c02:	c0 91 d5 06 	lds	r28, 0x06D5	; 0x8006d5 <pucAlignedHeap.2045>
    1c06:	d0 91 d6 06 	lds	r29, 0x06D6	; 0x8006d6 <pucAlignedHeap.2045+0x1>
    1c0a:	c2 0f       	add	r28, r18
    1c0c:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    1c0e:	90 93 d8 06 	sts	0x06D8, r25	; 0x8006d8 <xNextFreeByte+0x1>
    1c12:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <xNextFreeByte>
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1c18:	c0 e0       	ldi	r28, 0x00	; 0
    1c1a:	d0 e0       	ldi	r29, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <pvPortMalloc+0x5e>
    1c1e:	c0 e0       	ldi	r28, 0x00	; 0
    1c20:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1c22:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1c26:	ce 01       	movw	r24, r28
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	08 95       	ret

Disassembly of section .text.vPortFree:

0000273e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    273e:	08 95       	ret

Disassembly of section .text.vListInitialise:

00002534 <vListInitialise>:
 * all the API functions to use the MPU wrappers.  That should only be done when
 * task.h is included from an application file. */
#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE

#include "FreeRTOS.h"
#include "list.h"
    2534:	fc 01       	movw	r30, r24

/* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
 * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
 * defined for the header files above, but not in this file, in order to
    2536:	03 96       	adiw	r24, 0x03	; 3
    2538:	92 83       	std	Z+2, r25	; 0x02
    253a:	81 83       	std	Z+1, r24	; 0x01
 * generate the correct privileged Vs unprivileged linkage and placement. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */

/*-----------------------------------------------------------
    253c:	2f ef       	ldi	r18, 0xFF	; 255
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	34 83       	std	Z+4, r19	; 0x04
    2542:	23 83       	std	Z+3, r18	; 0x03
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
    2544:	96 83       	std	Z+6, r25	; 0x06
    2546:	85 83       	std	Z+5, r24	; 0x05
{
    2548:	90 87       	std	Z+8, r25	; 0x08
    254a:	87 83       	std	Z+7, r24	; 0x07
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
    254c:	10 82       	st	Z, r1
    254e:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

00002718 <vListInitialiseItem>:
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2718:	fc 01       	movw	r30, r24
    271a:	11 86       	std	Z+9, r1	; 0x09
    271c:	10 86       	std	Z+8, r1	; 0x08
    271e:	08 95       	ret

Disassembly of section .text.vListInsertEnd:

0000215a <vListInsertEnd>:
    {
        pxList->xListEnd.pvOwner = NULL;
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	9c 01       	movw	r18, r24
    2160:	fb 01       	movw	r30, r22

    2162:	dc 01       	movw	r26, r24
    2164:	11 96       	adiw	r26, 0x01	; 1
    2166:	cd 91       	ld	r28, X+
    2168:	dc 91       	ld	r29, X
    216a:	12 97       	sbiw	r26, 0x02	; 2
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    216c:	d3 83       	std	Z+3, r29	; 0x03
    216e:	c2 83       	std	Z+2, r28	; 0x02
    /* Make sure the list item is not recorded as being on a list. */
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	95 83       	std	Z+5, r25	; 0x05
    2176:	84 83       	std	Z+4, r24	; 0x04
    pxItem->pxContainer = NULL;

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	9d 81       	ldd	r25, Y+5	; 0x05
    217c:	dc 01       	movw	r26, r24
    217e:	13 96       	adiw	r26, 0x03	; 3
    2180:	7c 93       	st	X, r23
    2182:	6e 93       	st	-X, r22
    2184:	12 97       	sbiw	r26, 0x02	; 2
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    2186:	7d 83       	std	Y+5, r23	; 0x05
    2188:	6c 83       	std	Y+4, r22	; 0x04
}
/*-----------------------------------------------------------*/

    218a:	31 87       	std	Z+9, r19	; 0x09
    218c:	20 87       	std	Z+8, r18	; 0x08
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
    218e:	f9 01       	movw	r30, r18
    2190:	80 81       	ld	r24, Z
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	80 83       	st	Z, r24
{
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

Disassembly of section .text.vListInsert:

00001c96 <vListInsert>:
    ListItem_t * const pxIndex = pxList->pxIndex;

    /* Only effective when configASSERT() is also defined, these tests may catch
     * the list data structures being overwritten in memory.  They will not catch
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	eb 01       	movw	r28, r22
     * data errors caused by incorrect configuration or use of FreeRTOS. */
    listTEST_LIST_INTEGRITY( pxList );
    1c9c:	48 81       	ld	r20, Y
    1c9e:	59 81       	ldd	r21, Y+1	; 0x01

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    pxIndex->pxPrevious = pxNewListItem;

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1ca0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ca2:	2f ef       	ldi	r18, 0xFF	; 255
    1ca4:	52 07       	cpc	r21, r18
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <vListInsert+0x1a>

    ( pxList->uxNumberOfItems )++;
    1ca8:	fc 01       	movw	r30, r24
    1caa:	a7 81       	ldd	r26, Z+7	; 0x07
    1cac:	b0 85       	ldd	r27, Z+8	; 0x08
    1cae:	0d c0       	rjmp	.+26     	; 0x1cca <vListInsert+0x34>
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	13 96       	adiw	r26, 0x03	; 3
    1cb4:	01 c0       	rjmp	.+2      	; 0x1cb8 <vListInsert+0x22>
    1cb6:	df 01       	movw	r26, r30
    1cb8:	12 96       	adiw	r26, 0x02	; 2
    1cba:	ed 91       	ld	r30, X+
    1cbc:	fc 91       	ld	r31, X
    1cbe:	13 97       	sbiw	r26, 0x03	; 3
    1cc0:	20 81       	ld	r18, Z
    1cc2:	31 81       	ldd	r19, Z+1	; 0x01
    1cc4:	42 17       	cp	r20, r18
    1cc6:	53 07       	cpc	r21, r19
    1cc8:	b0 f7       	brcc	.-20     	; 0x1cb6 <vListInsert+0x20>
    else
    {
        /* *** NOTE ***********************************************************
        *  If you find your application is crashing here then likely causes are
        *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
        *  more tips, and ensure configASSERT() is defined!
    1cca:	12 96       	adiw	r26, 0x02	; 2
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	13 97       	sbiw	r26, 0x03	; 3
    1cd2:	fb 83       	std	Y+3, r31	; 0x03
    1cd4:	ea 83       	std	Y+2, r30	; 0x02
        *  https://www.FreeRTOS.org/a00110.html#configASSERT
    1cd6:	d5 83       	std	Z+5, r29	; 0x05
    1cd8:	c4 83       	std	Z+4, r28	; 0x04
        *
    1cda:	bd 83       	std	Y+5, r27	; 0x05
    1cdc:	ac 83       	std	Y+4, r26	; 0x04
        *   1) Stack overflow -
    1cde:	13 96       	adiw	r26, 0x03	; 3
    1ce0:	dc 93       	st	X, r29
    1ce2:	ce 93       	st	-X, r28
    1ce4:	12 97       	sbiw	r26, 0x02	; 2
        *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
        *   2) Incorrect interrupt priority assignment, especially on Cortex-M
        *      parts where numerically high priority values denote low actual
        *      interrupt priorities, which can seem counter intuitive.  See
    1ce6:	99 87       	std	Y+9, r25	; 0x09
    1ce8:	88 87       	std	Y+8, r24	; 0x08
        *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
        *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
    1cea:	fc 01       	movw	r30, r24
    1cec:	20 81       	ld	r18, Z
    1cee:	2f 5f       	subi	r18, 0xFF	; 255
    1cf0:	20 83       	st	Z, r18
        *      https://www.FreeRTOS.org/a00110.html
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

Disassembly of section .text.uxListRemove:

00001f5e <uxListRemove>:
        *   3) Calling an API function from within a critical section or when
        *      the scheduler is suspended, or calling an API function that does
        *      not end in "FromISR" from an interrupt.
        *   4) Using a queue or semaphore before it has been initialised or
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	fc 01       	movw	r30, r24
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
    1f64:	a0 85       	ldd	r26, Z+8	; 0x08
    1f66:	b1 85       	ldd	r27, Z+9	; 0x09
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
    1f68:	c2 81       	ldd	r28, Z+2	; 0x02
    1f6a:	d3 81       	ldd	r29, Z+3	; 0x03
    1f6c:	84 81       	ldd	r24, Z+4	; 0x04
    1f6e:	95 81       	ldd	r25, Z+5	; 0x05
    1f70:	9d 83       	std	Y+5, r25	; 0x05
    1f72:	8c 83       	std	Y+4, r24	; 0x04
        **********************************************************************/
    1f74:	c4 81       	ldd	r28, Z+4	; 0x04
    1f76:	d5 81       	ldd	r29, Z+5	; 0x05
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
        {
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    1f80:	11 96       	adiw	r26, 0x01	; 1
    1f82:	8d 91       	ld	r24, X+
    1f84:	9c 91       	ld	r25, X
    1f86:	12 97       	sbiw	r26, 0x02	; 2
    1f88:	e8 17       	cp	r30, r24
    1f8a:	f9 07       	cpc	r31, r25
    1f8c:	31 f4       	brne	.+12     	; 0x1f9a <uxListRemove+0x3c>
    }

    1f8e:	84 81       	ldd	r24, Z+4	; 0x04
    1f90:	95 81       	ldd	r25, Z+5	; 0x05
    1f92:	12 96       	adiw	r26, 0x02	; 2
    1f94:	9c 93       	st	X, r25
    1f96:	8e 93       	st	-X, r24
    1f98:	11 97       	sbiw	r26, 0x01	; 1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    pxNewListItem->pxPrevious = pxIterator;
    pxIterator->pxNext = pxNewListItem;

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    1f9a:	11 86       	std	Z+9, r1	; 0x09
    1f9c:	10 86       	std	Z+8, r1	; 0x08
    pxNewListItem->pxContainer = pxList;
    1f9e:	8c 91       	ld	r24, X
    1fa0:	81 50       	subi	r24, 0x01	; 1
    1fa2:	8c 93       	st	X, r24

    ( pxList->uxNumberOfItems )++;
    1fa4:	8c 91       	ld	r24, X
}
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

00002608 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    2608:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    260a:	89 ef       	ldi	r24, 0xF9	; 249
    260c:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    260e:	8b e0       	ldi	r24, 0x0B	; 11
    2610:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2612:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2614:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    2616:	89 bf       	out	0x39, r24	; 57
    2618:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000cce <pxPortInitialiseStack>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
 cce:	31 e1       	ldi	r19, 0x11	; 17
 cd0:	fc 01       	movw	r30, r24
 cd2:	30 83       	st	Z, r19
 cd4:	31 97       	sbiw	r30, 0x01	; 1
 cd6:	22 e2       	ldi	r18, 0x22	; 34
 cd8:	20 83       	st	Z, r18
 cda:	31 97       	sbiw	r30, 0x01	; 1
 cdc:	a3 e3       	ldi	r26, 0x33	; 51
 cde:	a0 83       	st	Z, r26
 ce0:	31 97       	sbiw	r30, 0x01	; 1
 ce2:	60 83       	st	Z, r22
 ce4:	31 97       	sbiw	r30, 0x01	; 1
 ce6:	70 83       	st	Z, r23
 ce8:	31 97       	sbiw	r30, 0x01	; 1
 cea:	10 82       	st	Z, r1
 cec:	31 97       	sbiw	r30, 0x01	; 1
 cee:	60 e8       	ldi	r22, 0x80	; 128
 cf0:	60 83       	st	Z, r22
 cf2:	31 97       	sbiw	r30, 0x01	; 1
 cf4:	10 82       	st	Z, r1
 cf6:	31 97       	sbiw	r30, 0x01	; 1
 cf8:	62 e0       	ldi	r22, 0x02	; 2
 cfa:	60 83       	st	Z, r22
 cfc:	31 97       	sbiw	r30, 0x01	; 1
 cfe:	63 e0       	ldi	r22, 0x03	; 3
 d00:	60 83       	st	Z, r22
 d02:	31 97       	sbiw	r30, 0x01	; 1
 d04:	64 e0       	ldi	r22, 0x04	; 4
 d06:	60 83       	st	Z, r22
 d08:	31 97       	sbiw	r30, 0x01	; 1
 d0a:	65 e0       	ldi	r22, 0x05	; 5
 d0c:	60 83       	st	Z, r22
 d0e:	31 97       	sbiw	r30, 0x01	; 1
 d10:	66 e0       	ldi	r22, 0x06	; 6
 d12:	60 83       	st	Z, r22
 d14:	31 97       	sbiw	r30, 0x01	; 1
 d16:	67 e0       	ldi	r22, 0x07	; 7
 d18:	60 83       	st	Z, r22
 d1a:	31 97       	sbiw	r30, 0x01	; 1
 d1c:	68 e0       	ldi	r22, 0x08	; 8
 d1e:	60 83       	st	Z, r22
 d20:	31 97       	sbiw	r30, 0x01	; 1
 d22:	69 e0       	ldi	r22, 0x09	; 9
 d24:	60 83       	st	Z, r22
 d26:	31 97       	sbiw	r30, 0x01	; 1
 d28:	60 e1       	ldi	r22, 0x10	; 16
 d2a:	60 83       	st	Z, r22
 d2c:	31 97       	sbiw	r30, 0x01	; 1
 d2e:	30 83       	st	Z, r19
 d30:	31 97       	sbiw	r30, 0x01	; 1
 d32:	32 e1       	ldi	r19, 0x12	; 18
 d34:	30 83       	st	Z, r19
 d36:	31 97       	sbiw	r30, 0x01	; 1
 d38:	33 e1       	ldi	r19, 0x13	; 19
 d3a:	30 83       	st	Z, r19
 d3c:	31 97       	sbiw	r30, 0x01	; 1
 d3e:	34 e1       	ldi	r19, 0x14	; 20
 d40:	30 83       	st	Z, r19
 d42:	31 97       	sbiw	r30, 0x01	; 1
 d44:	35 e1       	ldi	r19, 0x15	; 21
 d46:	30 83       	st	Z, r19
 d48:	31 97       	sbiw	r30, 0x01	; 1
 d4a:	36 e1       	ldi	r19, 0x16	; 22
 d4c:	30 83       	st	Z, r19
 d4e:	31 97       	sbiw	r30, 0x01	; 1
 d50:	37 e1       	ldi	r19, 0x17	; 23
 d52:	30 83       	st	Z, r19
 d54:	31 97       	sbiw	r30, 0x01	; 1
 d56:	38 e1       	ldi	r19, 0x18	; 24
 d58:	30 83       	st	Z, r19
 d5a:	31 97       	sbiw	r30, 0x01	; 1
 d5c:	39 e1       	ldi	r19, 0x19	; 25
 d5e:	30 83       	st	Z, r19
 d60:	31 97       	sbiw	r30, 0x01	; 1
 d62:	30 e2       	ldi	r19, 0x20	; 32
 d64:	30 83       	st	Z, r19
 d66:	31 97       	sbiw	r30, 0x01	; 1
 d68:	31 e2       	ldi	r19, 0x21	; 33
 d6a:	30 83       	st	Z, r19
 d6c:	31 97       	sbiw	r30, 0x01	; 1
 d6e:	20 83       	st	Z, r18
 d70:	31 97       	sbiw	r30, 0x01	; 1
 d72:	23 e2       	ldi	r18, 0x23	; 35
 d74:	20 83       	st	Z, r18
 d76:	31 97       	sbiw	r30, 0x01	; 1
 d78:	40 83       	st	Z, r20
 d7a:	31 97       	sbiw	r30, 0x01	; 1
 d7c:	50 83       	st	Z, r21
 d7e:	31 97       	sbiw	r30, 0x01	; 1
 d80:	26 e2       	ldi	r18, 0x26	; 38
 d82:	20 83       	st	Z, r18
 d84:	31 97       	sbiw	r30, 0x01	; 1
 d86:	27 e2       	ldi	r18, 0x27	; 39
 d88:	20 83       	st	Z, r18
 d8a:	31 97       	sbiw	r30, 0x01	; 1
 d8c:	28 e2       	ldi	r18, 0x28	; 40
 d8e:	20 83       	st	Z, r18
 d90:	31 97       	sbiw	r30, 0x01	; 1
 d92:	29 e2       	ldi	r18, 0x29	; 41
 d94:	20 83       	st	Z, r18
 d96:	31 97       	sbiw	r30, 0x01	; 1
 d98:	20 e3       	ldi	r18, 0x30	; 48
 d9a:	20 83       	st	Z, r18
 d9c:	31 97       	sbiw	r30, 0x01	; 1
 d9e:	21 e3       	ldi	r18, 0x31	; 49
 da0:	20 83       	st	Z, r18
 da2:	86 97       	sbiw	r24, 0x26	; 38
 da4:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00001cf8 <xPortStartScheduler>:
    1cf8:	0e 94 04 13 	call	0x2608	; 0x2608 <prvSetupTimerInterrupt>
    1cfc:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1d00:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1d04:	cd 91       	ld	r28, X+
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	dd 91       	ld	r29, X+
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	bf 91       	pop	r27
    1d16:	af 91       	pop	r26
    1d18:	9f 91       	pop	r25
    1d1a:	8f 91       	pop	r24
    1d1c:	7f 91       	pop	r23
    1d1e:	6f 91       	pop	r22
    1d20:	5f 91       	pop	r21
    1d22:	4f 91       	pop	r20
    1d24:	3f 91       	pop	r19
    1d26:	2f 91       	pop	r18
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	7f 90       	pop	r7
    1d3e:	6f 90       	pop	r6
    1d40:	5f 90       	pop	r5
    1d42:	4f 90       	pop	r4
    1d44:	3f 90       	pop	r3
    1d46:	2f 90       	pop	r2
    1d48:	1f 90       	pop	r1
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	0f 90       	pop	r0
    1d50:	08 95       	ret
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	08 95       	ret

Disassembly of section .text.vPortEndScheduler:

00002740 <vPortEndScheduler>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2740:	08 95       	ret

Disassembly of section .text.vPortYield:

000010d6 <vPortYield>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	0f 92       	push	r0
    10de:	1f 92       	push	r1
    10e0:	11 24       	eor	r1, r1
    10e2:	2f 92       	push	r2
    10e4:	3f 92       	push	r3
    10e6:	4f 92       	push	r4
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
    111e:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1122:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1126:	0d b6       	in	r0, 0x3d	; 61
    1128:	0d 92       	st	X+, r0
    112a:	0e b6       	in	r0, 0x3e	; 62
    112c:	0d 92       	st	X+, r0
    112e:	0e 94 c7 09 	call	0x138e	; 0x138e <vTaskSwitchContext>
    1132:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1136:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    113a:	cd 91       	ld	r28, X+
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	dd 91       	ld	r29, X+
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	bf 91       	pop	r27
    114c:	af 91       	pop	r26
    114e:	9f 91       	pop	r25
    1150:	8f 91       	pop	r24
    1152:	7f 91       	pop	r23
    1154:	6f 91       	pop	r22
    1156:	5f 91       	pop	r21
    1158:	4f 91       	pop	r20
    115a:	3f 91       	pop	r19
    115c:	2f 91       	pop	r18
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	9f 90       	pop	r9
    1170:	8f 90       	pop	r8
    1172:	7f 90       	pop	r7
    1174:	6f 90       	pop	r6
    1176:	5f 90       	pop	r5
    1178:	4f 90       	pop	r4
    117a:	3f 90       	pop	r3
    117c:	2f 90       	pop	r2
    117e:	1f 90       	pop	r1
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	08 95       	ret

Disassembly of section .text.__vector_7:

00002042 <__vector_7>:
	 * manual calls to taskYIELD();
	 */
	// Correct interrupt vector name for Timer1 Output Compare A
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
    2042:	1f 92       	push	r1
    2044:	0f 92       	push	r0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	0f 92       	push	r0
    204a:	11 24       	eor	r1, r1
    204c:	2f 93       	push	r18
    204e:	3f 93       	push	r19
    2050:	4f 93       	push	r20
    2052:	5f 93       	push	r21
    2054:	6f 93       	push	r22
    2056:	7f 93       	push	r23
    2058:	8f 93       	push	r24
    205a:	9f 93       	push	r25
    205c:	af 93       	push	r26
    205e:	bf 93       	push	r27
    2060:	ef 93       	push	r30
    2062:	ff 93       	push	r31
		xTaskIncrementTick();
    2064:	0e 94 89 03 	call	0x712	; 0x712 <xTaskIncrementTick>
	}
    2068:	ff 91       	pop	r31
    206a:	ef 91       	pop	r30
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

Disassembly of section .text.prvIsQueueEmpty:

0000240a <prvIsQueueEmpty>:
     * updated. */
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	0f 92       	push	r0
        while( cTxLock > queueLOCKED_UNMODIFIED )
        {
    2410:	a8 2f       	mov	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	4a 96       	adiw	r24, 0x1a	; 26
    2416:	a1 1d       	adc	r26, r1
    2418:	fc 01       	movw	r30, r24
    241a:	84 91       	lpm	r24, Z
    241c:	a7 fd       	sbrc	r26, 7
    241e:	80 81       	ld	r24, Z
    2420:	81 11       	cpse	r24, r1
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <prvIsQueueEmpty+0x1e>
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	01 c0       	rjmp	.+2      	; 0x242a <prvIsQueueEmpty+0x20>
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
                {
    2428:	80 e0       	ldi	r24, 0x00	; 0
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
                    {
                        /* The queue is a member of a queue set, and posting to
    242a:	0f 90       	pop	r0
    242c:	0f be       	out	0x3f, r0	; 63
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
    242e:	08 95       	ret

Disassembly of section .text.prvIsQueueFull:

0000229a <prvIsQueueFull>:
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else
                    {
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	0f 92       	push	r0
                        break;
                    }
    22a0:	9b 01       	movw	r18, r22
    22a2:	48 2f       	mov	r20, r24
    22a4:	26 5e       	subi	r18, 0xE6	; 230
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	4f 4f       	sbci	r20, 0xFF	; 255
    22aa:	f9 01       	movw	r30, r18
    22ac:	24 91       	lpm	r18, Z
    22ae:	47 fd       	sbrc	r20, 7
    22b0:	20 81       	ld	r18, Z
    22b2:	a8 2f       	mov	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	4b 96       	adiw	r24, 0x1b	; 27
    22b8:	a1 1d       	adc	r26, r1
    22ba:	fc 01       	movw	r30, r24
    22bc:	84 91       	lpm	r24, Z
    22be:	a7 fd       	sbrc	r26, 7
    22c0:	80 81       	ld	r24, Z
    22c2:	28 13       	cpse	r18, r24
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <prvIsQueueFull+0x30>
                }
            }
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <prvIsQueueFull+0x32>
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
    22ca:	80 e0       	ldi	r24, 0x00	; 0
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22cc:	0f 90       	pop	r0
    22ce:	0f be       	out	0x3f, r0	; 63
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
    22d0:	08 95       	ret

Disassembly of section .text.prvCopyDataToQueue:

00001572 <prvCopyDataToQueue>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
    157c:	02 2f       	mov	r16, r18
    157e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1580:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1582:	22 23       	and	r18, r18
    1584:	b9 f1       	breq	.+110    	; 0x15f4 <prvCopyDataToQueue+0x82>
    1586:	01 11       	cpse	r16, r1
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <prvCopyDataToQueue+0x44>
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	0e 94 69 11 	call	0x22d2	; 0x22d2 <memcpy>
    1594:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	9b 81       	ldd	r25, Y+3	; 0x03
    159a:	82 0f       	add	r24, r18
    159c:	91 1d       	adc	r25, r1
    159e:	9b 83       	std	Y+3, r25	; 0x03
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	2c 81       	ldd	r18, Y+4	; 0x04
    15a4:	3d 81       	ldd	r19, Y+5	; 0x05
    15a6:	82 17       	cp	r24, r18
    15a8:	93 07       	cpc	r25, r19
    15aa:	20 f1       	brcs	.+72     	; 0x15f4 <prvCopyDataToQueue+0x82>
    15ac:	88 81       	ld	r24, Y
    15ae:	99 81       	ldd	r25, Y+1	; 0x01
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02
    15b4:	1f c0       	rjmp	.+62     	; 0x15f4 <prvCopyDataToQueue+0x82>
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ba:	9f 81       	ldd	r25, Y+7	; 0x07
    15bc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <memcpy>
    15c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	91 95       	neg	r25
    15c6:	81 95       	neg	r24
    15c8:	91 09       	sbc	r25, r1
    15ca:	2e 81       	ldd	r18, Y+6	; 0x06
    15cc:	3f 81       	ldd	r19, Y+7	; 0x07
    15ce:	28 0f       	add	r18, r24
    15d0:	39 1f       	adc	r19, r25
    15d2:	3f 83       	std	Y+7, r19	; 0x07
    15d4:	2e 83       	std	Y+6, r18	; 0x06
    15d6:	48 81       	ld	r20, Y
    15d8:	59 81       	ldd	r21, Y+1	; 0x01
    15da:	24 17       	cp	r18, r20
    15dc:	35 07       	cpc	r19, r21
    15de:	30 f4       	brcc	.+12     	; 0x15ec <prvCopyDataToQueue+0x7a>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	82 0f       	add	r24, r18
    15e6:	93 1f       	adc	r25, r19
    15e8:	9f 83       	std	Y+7, r25	; 0x07
    15ea:	8e 83       	std	Y+6, r24	; 0x06
    15ec:	02 30       	cpi	r16, 0x02	; 2
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <prvCopyDataToQueue+0x82>
    15f0:	11 11       	cpse	r17, r1
    15f2:	11 50       	subi	r17, 0x01	; 1
    15f4:	1f 5f       	subi	r17, 0xFF	; 255
    15f6:	1a 8f       	std	Y+26, r17	; 0x1a
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

00001a7a <prvUnlockQueue>:
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
        }

    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	ec 01       	movw	r28, r24
    }

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	0f 92       	push	r0
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
    1a88:	1e 8d       	ldd	r17, Y+30	; 0x1e
{
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <prvUnlockQueue+0x2c>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
    1a8c:	89 89       	ldd	r24, Y+17	; 0x11
    1a8e:	88 23       	and	r24, r24
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <prvUnlockQueue+0x30>
        }

    1a92:	be 01       	movw	r22, r28
    1a94:	6f 5e       	subi	r22, 0xEF	; 239
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	80 e8       	ldi	r24, 0x80	; 128
    1a9a:	0e 94 6d 0a 	call	0x14da	; 0x14da <xTaskRemoveFromEventList>
    1a9e:	81 11       	cpse	r24, r1
        if( xPosition == queueOVERWRITE )
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
            {
    1aa0:	0e 94 90 13 	call	0x2720	; 0x2720 <vTaskMissedYield>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
    1aa4:	11 50       	subi	r17, 0x01	; 1
static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;
    1aa6:	11 16       	cp	r1, r17
    1aa8:	8c f3       	brlt	.-30     	; 0x1a8c <prvUnlockQueue+0x12>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	8e 8f       	std	Y+30, r24	; 0x1e
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;

    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    return xReturn;
}
/*-----------------------------------------------------------*/
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	0f 92       	push	r0

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
    1ab8:	1d 8d       	ldd	r17, Y+29	; 0x1d
                                  void * const pvBuffer )
{
    1aba:	0d c0       	rjmp	.+26     	; 0x1ad6 <prvUnlockQueue+0x5c>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    {
    1abc:	88 85       	ldd	r24, Y+8	; 0x08
    1abe:	88 23       	and	r24, r24
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <prvUnlockQueue+0x60>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */

    1ac2:	be 01       	movw	r22, r28
    1ac4:	68 5f       	subi	r22, 0xF8	; 248
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	80 e8       	ldi	r24, 0x80	; 128
    1aca:	0e 94 6d 0a 	call	0x14da	; 0x14da <xTaskRemoveFromEventList>
    1ace:	81 11       	cpse	r24, r1
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
        {
    1ad0:	0e 94 90 13 	call	0x2720	; 0x2720 <vTaskMissedYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

    1ad4:	11 50       	subi	r17, 0x01	; 1
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1ad6:	11 16       	cp	r1, r17
    1ad8:	8c f3       	brlt	.-30     	; 0x1abc <prvUnlockQueue+0x42>
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	8d 8f       	std	Y+29, r24	; 0x1d

    /* The lock counts contains the number of extra data items placed or
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
     * removed from the queue while the queue was locked.  When a queue is
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

00001694 <xQueueGenericReset>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	0f 92       	push	r0
    16a0:	e8 81       	ld	r30, Y
    16a2:	f9 81       	ldd	r31, Y+1	; 0x01
    16a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	82 9f       	mul	r24, r18
    16ae:	a0 01       	movw	r20, r0
    16b0:	83 9f       	mul	r24, r19
    16b2:	50 0d       	add	r21, r0
    16b4:	92 9f       	mul	r25, r18
    16b6:	50 0d       	add	r21, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	4e 0f       	add	r20, r30
    16bc:	5f 1f       	adc	r21, r31
    16be:	5d 83       	std	Y+5, r21	; 0x05
    16c0:	4c 83       	std	Y+4, r20	; 0x04
    16c2:	1a 8e       	std	Y+26, r1	; 0x1a
    16c4:	fb 83       	std	Y+3, r31	; 0x03
    16c6:	ea 83       	std	Y+2, r30	; 0x02
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	28 9f       	mul	r18, r24
    16cc:	a0 01       	movw	r20, r0
    16ce:	29 9f       	mul	r18, r25
    16d0:	50 0d       	add	r21, r0
    16d2:	38 9f       	mul	r19, r24
    16d4:	50 0d       	add	r21, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	cf 01       	movw	r24, r30
    16da:	84 0f       	add	r24, r20
    16dc:	95 1f       	adc	r25, r21
    16de:	9f 83       	std	Y+7, r25	; 0x07
    16e0:	8e 83       	std	Y+6, r24	; 0x06
    16e2:	8f ef       	ldi	r24, 0xFF	; 255
    16e4:	8d 8f       	std	Y+29, r24	; 0x1d
    16e6:	8e 8f       	std	Y+30, r24	; 0x1e
    16e8:	61 11       	cpse	r22, r1
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <xQueueGenericReset+0x6a>
    16ec:	88 85       	ldd	r24, Y+8	; 0x08
    16ee:	88 23       	and	r24, r24
    16f0:	71 f0       	breq	.+28     	; 0x170e <xQueueGenericReset+0x7a>
    16f2:	28 96       	adiw	r28, 0x08	; 8
    16f4:	be 01       	movw	r22, r28
    16f6:	80 e8       	ldi	r24, 0x80	; 128
    16f8:	0e 94 6d 0a 	call	0x14da	; 0x14da <xTaskRemoveFromEventList>
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <xQueueGenericReset+0x7a>
    16fe:	ce 01       	movw	r24, r28
    1700:	08 96       	adiw	r24, 0x08	; 8
    1702:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1706:	ce 01       	movw	r24, r28
    1708:	41 96       	adiw	r24, 0x11	; 17
    170a:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

Disassembly of section .text.prvInitialiseNewQueue:

00002430 <prvInitialiseNewQueue>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	f8 01       	movw	r30, r16
    {
        Queue_t * pxNewQueue = NULL;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

    2436:	61 11       	cpse	r22, r1
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <prvInitialiseNewQueue+0x10>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
        {
    243a:	11 83       	std	Z+1, r17	; 0x01
    243c:	00 83       	st	Z, r16
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <prvInitialiseNewQueue+0x14>
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    2440:	51 83       	std	Z+1, r21	; 0x01
    2442:	40 83       	st	Z, r20
            /* Allocate the queue and storage area.  Justification for MISRA
             * deviation as follows:  pvPortMalloc() always ensures returned memory
             * blocks are aligned per the requirements of the MCU stack.  In this case
             * pvPortMalloc() must return a pointer that is guaranteed to meet the
             * alignment requirements of the Queue_t structure - which in this case
    2444:	83 8f       	std	Z+27, r24	; 0x1b
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
    2446:	64 8f       	std	Z+28, r22	; 0x1c
             * are greater than or equal to the pointer to char requirements the cast
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	cf 01       	movw	r24, r30
    244c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <xQueueGenericReset>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */

                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

00001e6a <xQueueGenericCreate>:

    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	e8 2e       	mov	r14, r24
    1e7a:	f6 2e       	mov	r15, r22
    1e7c:	d4 2e       	mov	r13, r20
        Queue_t * pxNewQueue = NULL;

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );

    1e7e:	66 23       	and	r22, r22
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <xQueueGenericCreate+0x20>
            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
        {
            #if ( configASSERT_DEFINED == 1 )
    1e82:	86 9f       	mul	r24, r22
    1e84:	c0 01       	movw	r24, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <xQueueGenericCreate+0x24>
         * supplied. */
        configASSERT( pxStaticQueue );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            ( pxStaticQueue != NULL ) &&

    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
            }
            #endif /* configASSERT_DEFINED */

    1e8e:	4f 96       	adiw	r24, 0x1f	; 31
    1e90:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <pvPortMalloc>
    1e94:	ec 01       	movw	r28, r24
            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	49 f0       	breq	.+18     	; 0x1eac <xQueueGenericCreate+0x42>
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
        }
        else
        {
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	2d 2d       	mov	r18, r13
    1e9e:	ac 01       	movw	r20, r24
    1ea0:	41 5e       	subi	r20, 0xE1	; 225
    1ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea4:	6f 2d       	mov	r22, r15
    1ea6:	8e 2d       	mov	r24, r14
    1ea8:	0e 94 18 12 	call	0x2430	; 0x2430 <prvInitialiseNewQueue>

        return pxNewQueue;
    }

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/
    1eac:	ce 01       	movw	r24, r28
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

000005f4 <xQueueGenericSend>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 5f4:	6f 92       	push	r6
 5f6:	7f 92       	push	r7
 5f8:	8f 92       	push	r8
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	00 d0       	rcall	.+0      	; 0x608 <xQueueGenericSend+0x14>
 608:	00 d0       	rcall	.+0      	; 0x60a <xQueueGenericSend+0x16>
 60a:	0f 92       	push	r0
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	7c 01       	movw	r14, r24
 612:	3a 01       	movw	r6, r20
 614:	86 2e       	mov	r8, r22
 616:	3d 83       	std	Y+5, r19	; 0x05
 618:	2c 83       	std	Y+4, r18	; 0x04
 61a:	10 e0       	ldi	r17, 0x00	; 0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	0f 92       	push	r0
 622:	f7 01       	movw	r30, r14
 624:	92 8d       	ldd	r25, Z+26	; 0x1a
 626:	83 8d       	ldd	r24, Z+27	; 0x1b
 628:	98 17       	cp	r25, r24
 62a:	10 f0       	brcs	.+4      	; 0x630 <xQueueGenericSend+0x3c>
 62c:	02 30       	cpi	r16, 0x02	; 2
 62e:	a9 f4       	brne	.+42     	; 0x65a <xQueueGenericSend+0x66>
 630:	20 2f       	mov	r18, r16
 632:	68 2d       	mov	r22, r8
 634:	a3 01       	movw	r20, r6
 636:	c7 01       	movw	r24, r14
 638:	0e 94 b9 0a 	call	0x1572	; 0x1572 <prvCopyDataToQueue>
 63c:	f7 01       	movw	r30, r14
 63e:	81 89       	ldd	r24, Z+17	; 0x11
 640:	88 23       	and	r24, r24
 642:	39 f0       	breq	.+14     	; 0x652 <xQueueGenericSend+0x5e>
 644:	f1 e1       	ldi	r31, 0x11	; 17
 646:	ef 0e       	add	r14, r31
 648:	f1 1c       	adc	r15, r1
 64a:	b7 01       	movw	r22, r14
 64c:	80 e8       	ldi	r24, 0x80	; 128
 64e:	0e 94 6d 0a 	call	0x14da	; 0x14da <xTaskRemoveFromEventList>
 652:	0f 90       	pop	r0
 654:	0f be       	out	0x3f, r0	; 63
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	4d c0       	rjmp	.+154    	; 0x6f4 <xQueueGenericSend+0x100>
 65a:	8c 81       	ldd	r24, Y+4	; 0x04
 65c:	9d 81       	ldd	r25, Y+5	; 0x05
 65e:	89 2b       	or	r24, r25
 660:	21 f4       	brne	.+8      	; 0x66a <xQueueGenericSend+0x76>
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	45 c0       	rjmp	.+138    	; 0x6f4 <xQueueGenericSend+0x100>
 66a:	11 11       	cpse	r17, r1
 66c:	05 c0       	rjmp	.+10     	; 0x678 <xQueueGenericSend+0x84>
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	0e 94 e5 12 	call	0x25ca	; 0x25ca <vTaskInternalSetTimeOutState>
 676:	11 e0       	ldi	r17, 0x01	; 1
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0e 94 66 13 	call	0x26cc	; 0x26cc <vTaskSuspendAll>
 680:	0f b6       	in	r0, 0x3f	; 63
 682:	f8 94       	cli
 684:	0f 92       	push	r0
 686:	f7 01       	movw	r30, r14
 688:	85 8d       	ldd	r24, Z+29	; 0x1d
 68a:	8f 3f       	cpi	r24, 0xFF	; 255
 68c:	09 f4       	brne	.+2      	; 0x690 <xQueueGenericSend+0x9c>
 68e:	15 8e       	std	Z+29, r1	; 0x1d
 690:	f7 01       	movw	r30, r14
 692:	86 8d       	ldd	r24, Z+30	; 0x1e
 694:	8f 3f       	cpi	r24, 0xFF	; 255
 696:	09 f4       	brne	.+2      	; 0x69a <xQueueGenericSend+0xa6>
 698:	16 8e       	std	Z+30, r1	; 0x1e
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	be 01       	movw	r22, r28
 6a0:	6c 5f       	subi	r22, 0xFC	; 252
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskCheckForTimeOut>
 6ac:	81 11       	cpse	r24, r1
 6ae:	1c c0       	rjmp	.+56     	; 0x6e8 <xQueueGenericSend+0xf4>
 6b0:	b7 01       	movw	r22, r14
 6b2:	80 e8       	ldi	r24, 0x80	; 128
 6b4:	0e 94 4d 11 	call	0x229a	; 0x229a <prvIsQueueFull>
 6b8:	88 23       	and	r24, r24
 6ba:	81 f0       	breq	.+32     	; 0x6dc <xQueueGenericSend+0xe8>
 6bc:	6c 81       	ldd	r22, Y+4	; 0x04
 6be:	7d 81       	ldd	r23, Y+5	; 0x05
 6c0:	c7 01       	movw	r24, r14
 6c2:	08 96       	adiw	r24, 0x08	; 8
 6c4:	0e 94 2b 12 	call	0x2456	; 0x2456 <vTaskPlaceOnEventList>
 6c8:	c7 01       	movw	r24, r14
 6ca:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <prvUnlockQueue>
 6ce:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
 6d2:	81 11       	cpse	r24, r1
 6d4:	a3 cf       	rjmp	.-186    	; 0x61c <xQueueGenericSend+0x28>
 6d6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortYield>
 6da:	a0 cf       	rjmp	.-192    	; 0x61c <xQueueGenericSend+0x28>
 6dc:	c7 01       	movw	r24, r14
 6de:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <prvUnlockQueue>
 6e2:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
 6e6:	9a cf       	rjmp	.-204    	; 0x61c <xQueueGenericSend+0x28>
 6e8:	c7 01       	movw	r24, r14
 6ea:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <prvUnlockQueue>
 6ee:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	8f 90       	pop	r8
 70c:	7f 90       	pop	r7
 70e:	6f 90       	pop	r6
 710:	08 95       	ret

Disassembly of section .text.xQueueSemaphoreTake:

00000826 <xQueueSemaphoreTake>:
 826:	ff 92       	push	r15
 828:	0f 93       	push	r16
 82a:	1f 93       	push	r17
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	00 d0       	rcall	.+0      	; 0x832 <xQueueSemaphoreTake+0xc>
 832:	00 d0       	rcall	.+0      	; 0x834 <xQueueSemaphoreTake+0xe>
 834:	0f 92       	push	r0
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	8c 01       	movw	r16, r24
 83c:	7d 83       	std	Y+5, r23	; 0x05
 83e:	6c 83       	std	Y+4, r22	; 0x04
 840:	f1 2c       	mov	r15, r1
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	0f 92       	push	r0
 848:	f8 01       	movw	r30, r16
 84a:	82 8d       	ldd	r24, Z+26	; 0x1a
 84c:	88 23       	and	r24, r24
 84e:	79 f0       	breq	.+30     	; 0x86e <__stack+0xf>
 850:	81 50       	subi	r24, 0x01	; 1
 852:	82 8f       	std	Z+26, r24	; 0x1a
 854:	80 85       	ldd	r24, Z+8	; 0x08
 856:	88 23       	and	r24, r24
 858:	31 f0       	breq	.+12     	; 0x866 <__stack+0x7>
 85a:	08 5f       	subi	r16, 0xF8	; 248
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	b8 01       	movw	r22, r16
 860:	80 e8       	ldi	r24, 0x80	; 128
 862:	0e 94 6d 0a 	call	0x14da	; 0x14da <xTaskRemoveFromEventList>
 866:	0f 90       	pop	r0
 868:	0f be       	out	0x3f, r0	; 63
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	55 c0       	rjmp	.+170    	; 0x918 <__stack+0xb9>
 86e:	8c 81       	ldd	r24, Y+4	; 0x04
 870:	9d 81       	ldd	r25, Y+5	; 0x05
 872:	89 2b       	or	r24, r25
 874:	21 f4       	brne	.+8      	; 0x87e <__stack+0x1f>
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	4d c0       	rjmp	.+154    	; 0x918 <__stack+0xb9>
 87e:	f1 10       	cpse	r15, r1
 880:	06 c0       	rjmp	.+12     	; 0x88e <__stack+0x2f>
 882:	ce 01       	movw	r24, r28
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	0e 94 e5 12 	call	0x25ca	; 0x25ca <vTaskInternalSetTimeOutState>
 88a:	ff 24       	eor	r15, r15
 88c:	f3 94       	inc	r15
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0e 94 66 13 	call	0x26cc	; 0x26cc <vTaskSuspendAll>
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	0f 92       	push	r0
 89c:	f8 01       	movw	r30, r16
 89e:	85 8d       	ldd	r24, Z+29	; 0x1d
 8a0:	8f 3f       	cpi	r24, 0xFF	; 255
 8a2:	09 f4       	brne	.+2      	; 0x8a6 <__stack+0x47>
 8a4:	15 8e       	std	Z+29, r1	; 0x1d
 8a6:	f8 01       	movw	r30, r16
 8a8:	86 8d       	ldd	r24, Z+30	; 0x1e
 8aa:	8f 3f       	cpi	r24, 0xFF	; 255
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <__stack+0x51>
 8ae:	16 8e       	std	Z+30, r1	; 0x1e
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	be 01       	movw	r22, r28
 8b6:	6c 5f       	subi	r22, 0xFC	; 252
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	ce 01       	movw	r24, r28
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	0e 94 c7 0c 	call	0x198e	; 0x198e <xTaskCheckForTimeOut>
 8c2:	81 11       	cpse	r24, r1
 8c4:	1c c0       	rjmp	.+56     	; 0x8fe <__stack+0x9f>
 8c6:	b8 01       	movw	r22, r16
 8c8:	80 e8       	ldi	r24, 0x80	; 128
 8ca:	0e 94 05 12 	call	0x240a	; 0x240a <prvIsQueueEmpty>
 8ce:	88 23       	and	r24, r24
 8d0:	81 f0       	breq	.+32     	; 0x8f2 <__stack+0x93>
 8d2:	6c 81       	ldd	r22, Y+4	; 0x04
 8d4:	7d 81       	ldd	r23, Y+5	; 0x05
 8d6:	c8 01       	movw	r24, r16
 8d8:	41 96       	adiw	r24, 0x11	; 17
 8da:	0e 94 2b 12 	call	0x2456	; 0x2456 <vTaskPlaceOnEventList>
 8de:	c8 01       	movw	r24, r16
 8e0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <prvUnlockQueue>
 8e4:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
 8e8:	81 11       	cpse	r24, r1
 8ea:	ab cf       	rjmp	.-170    	; 0x842 <xQueueSemaphoreTake+0x1c>
 8ec:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortYield>
 8f0:	a8 cf       	rjmp	.-176    	; 0x842 <xQueueSemaphoreTake+0x1c>
 8f2:	c8 01       	movw	r24, r16
 8f4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <prvUnlockQueue>
 8f8:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
 8fc:	a2 cf       	rjmp	.-188    	; 0x842 <xQueueSemaphoreTake+0x1c>
 8fe:	c8 01       	movw	r24, r16
 900:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <prvUnlockQueue>
 904:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
 908:	b8 01       	movw	r22, r16
 90a:	80 e8       	ldi	r24, 0x80	; 128
 90c:	0e 94 05 12 	call	0x240a	; 0x240a <prvIsQueueEmpty>
 910:	88 23       	and	r24, r24
 912:	09 f4       	brne	.+2      	; 0x916 <__stack+0xb7>
 914:	96 cf       	rjmp	.-212    	; 0x842 <xQueueSemaphoreTake+0x1c>
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	0f 90       	pop	r0
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	ff 90       	pop	r15
 92c:	08 95       	ret

Disassembly of section .text.prvTaskIsTaskSuspended:

0000219c <prvTaskIsTaskSuspended>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    219c:	a0 e8       	ldi	r26, 0x80	; 128
    219e:	9c 01       	movw	r18, r24
    21a0:	4a 2f       	mov	r20, r26
    21a2:	26 5f       	subi	r18, 0xF6	; 246
    21a4:	3f 4f       	sbci	r19, 0xFF	; 255
    21a6:	4f 4f       	sbci	r20, 0xFF	; 255
    21a8:	f9 01       	movw	r30, r18
    21aa:	54 2f       	mov	r21, r20
    21ac:	0e 94 1e 13 	call	0x263c	; 0x263c <__xload_2>
    21b0:	66 5a       	subi	r22, 0xA6	; 166
    21b2:	76 40       	sbci	r23, 0x06	; 6
    21b4:	71 f4       	brne	.+28     	; 0x21d2 <prvTaskIsTaskSuspended+0x36>
    21b6:	44 96       	adiw	r24, 0x14	; 20
    21b8:	a1 1d       	adc	r26, r1
    21ba:	fc 01       	movw	r30, r24
    21bc:	5a 2f       	mov	r21, r26
    21be:	0e 94 1e 13 	call	0x263c	; 0x263c <__xload_2>
    21c2:	86 e0       	ldi	r24, 0x06	; 6
    21c4:	68 3b       	cpi	r22, 0xB8	; 184
    21c6:	78 07       	cpc	r23, r24
    21c8:	31 f0       	breq	.+12     	; 0x21d6 <prvTaskIsTaskSuspended+0x3a>
    21ca:	67 2b       	or	r22, r23
    21cc:	31 f0       	breq	.+12     	; 0x21da <prvTaskIsTaskSuspended+0x3e>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	08 95       	ret
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	08 95       	ret
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	08 95       	ret
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	08 95       	ret

Disassembly of section .text.prvResetNextTaskUnblockTime:

0000225c <prvResetNextTaskUnblockTime>:
    225c:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
    2260:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
    2264:	80 81       	ld	r24, Z
    2266:	81 11       	cpse	r24, r1
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <prvResetNextTaskUnblockTime+0x1c>
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	9f ef       	ldi	r25, 0xFF	; 255
    226e:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
    2272:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
    2276:	08 95       	ret
    2278:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
    227c:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
    2280:	05 80       	ldd	r0, Z+5	; 0x05
    2282:	f6 81       	ldd	r31, Z+6	; 0x06
    2284:	e0 2d       	mov	r30, r0
    2286:	06 80       	ldd	r0, Z+6	; 0x06
    2288:	f7 81       	ldd	r31, Z+7	; 0x07
    228a:	e0 2d       	mov	r30, r0
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
    2294:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
    2298:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

00002550 <prvDeleteTCB>:
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	ec 01       	movw	r28, r24
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	0e 94 9f 13 	call	0x273e	; 0x273e <vPortFree>
    255e:	ce 01       	movw	r24, r28
    2560:	0e 94 9f 13 	call	0x273e	; 0x273e <vPortFree>
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

0000092e <prvInitialiseNewTask>:
 92e:	6f 92       	push	r6
 930:	7f 92       	push	r7
 932:	8f 92       	push	r8
 934:	9f 92       	push	r9
 936:	af 92       	push	r10
 938:	bf 92       	push	r11
 93a:	cf 92       	push	r12
 93c:	df 92       	push	r13
 93e:	ef 92       	push	r14
 940:	ff 92       	push	r15
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	cd b7       	in	r28, 0x3d	; 61
 94c:	de b7       	in	r29, 0x3e	; 62
 94e:	3c 01       	movw	r6, r24
 950:	a6 2f       	mov	r26, r22
 952:	ca 01       	movw	r24, r20
 954:	f4 01       	movw	r30, r8
 956:	47 89       	ldd	r20, Z+23	; 0x17
 958:	50 8d       	ldd	r21, Z+24	; 0x18
 95a:	01 50       	subi	r16, 0x01	; 1
 95c:	11 09       	sbc	r17, r1
 95e:	04 0f       	add	r16, r20
 960:	15 1f       	adc	r17, r21
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	a1 05       	cpc	r26, r1
 966:	d1 f4       	brne	.+52     	; 0x99c <prvInitialiseNewTask+0x6e>
 968:	1f c0       	rjmp	.+62     	; 0x9a8 <prvInitialiseNewTask+0x7a>
 96a:	27 2f       	mov	r18, r23
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	ac 01       	movw	r20, r24
 970:	6a 2f       	mov	r22, r26
 972:	42 0f       	add	r20, r18
 974:	53 1f       	adc	r21, r19
 976:	61 1d       	adc	r22, r1
 978:	37 fd       	sbrc	r19, 7
 97a:	6a 95       	dec	r22
 97c:	fa 01       	movw	r30, r20
 97e:	b4 91       	lpm	r27, Z
 980:	67 fd       	sbrc	r22, 7
 982:	b0 81       	ld	r27, Z
 984:	f4 01       	movw	r30, r8
 986:	e2 0f       	add	r30, r18
 988:	f3 1f       	adc	r31, r19
 98a:	b1 8f       	std	Z+25, r27	; 0x19
 98c:	fa 01       	movw	r30, r20
 98e:	24 91       	lpm	r18, Z
 990:	67 fd       	sbrc	r22, 7
 992:	20 81       	ld	r18, Z
 994:	22 23       	and	r18, r18
 996:	29 f0       	breq	.+10     	; 0x9a2 <prvInitialiseNewTask+0x74>
 998:	7f 5f       	subi	r23, 0xFF	; 255
 99a:	01 c0       	rjmp	.+2      	; 0x99e <prvInitialiseNewTask+0x70>
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	78 30       	cpi	r23, 0x08	; 8
 9a0:	20 f3       	brcs	.-56     	; 0x96a <prvInitialiseNewTask+0x3c>
 9a2:	f4 01       	movw	r30, r8
 9a4:	10 a2       	std	Z+32, r1	; 0x20
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <prvInitialiseNewTask+0x7e>
 9a8:	f4 01       	movw	r30, r8
 9aa:	11 8e       	std	Z+25, r1	; 0x19
 9ac:	f9 e0       	ldi	r31, 0x09	; 9
 9ae:	fc 15       	cp	r31, r12
 9b0:	20 f4       	brcc	.+8      	; 0x9ba <prvInitialiseNewTask+0x8c>
 9b2:	0f 2e       	mov	r0, r31
 9b4:	f9 e0       	ldi	r31, 0x09	; 9
 9b6:	cf 2e       	mov	r12, r31
 9b8:	f0 2d       	mov	r31, r0
 9ba:	f4 01       	movw	r30, r8
 9bc:	c6 8a       	std	Z+22, r12	; 0x16
 9be:	c4 01       	movw	r24, r8
 9c0:	02 96       	adiw	r24, 0x02	; 2
 9c2:	0e 94 8c 13 	call	0x2718	; 0x2718 <vListInitialiseItem>
 9c6:	c4 01       	movw	r24, r8
 9c8:	0c 96       	adiw	r24, 0x0c	; 12
 9ca:	0e 94 8c 13 	call	0x2718	; 0x2718 <vListInitialiseItem>
 9ce:	f4 01       	movw	r30, r8
 9d0:	91 86       	std	Z+9, r9	; 0x09
 9d2:	80 86       	std	Z+8, r8	; 0x08
 9d4:	8a e0       	ldi	r24, 0x0A	; 10
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	8c 19       	sub	r24, r12
 9da:	91 09       	sbc	r25, r1
 9dc:	95 87       	std	Z+13, r25	; 0x0d
 9de:	84 87       	std	Z+12, r24	; 0x0c
 9e0:	93 8a       	std	Z+19, r9	; 0x13
 9e2:	82 8a       	std	Z+18, r8	; 0x12
 9e4:	11 a2       	std	Z+33, r1	; 0x21
 9e6:	12 a2       	std	Z+34, r1	; 0x22
 9e8:	13 a2       	std	Z+35, r1	; 0x23
 9ea:	14 a2       	std	Z+36, r1	; 0x24
 9ec:	15 a2       	std	Z+37, r1	; 0x25
 9ee:	a7 01       	movw	r20, r14
 9f0:	b3 01       	movw	r22, r6
 9f2:	c8 01       	movw	r24, r16
 9f4:	0e 94 67 06 	call	0xcce	; 0xcce <pxPortInitialiseStack>
 9f8:	f4 01       	movw	r30, r8
 9fa:	91 83       	std	Z+1, r25	; 0x01
 9fc:	80 83       	st	Z, r24
 9fe:	a1 14       	cp	r10, r1
 a00:	b1 04       	cpc	r11, r1
 a02:	19 f0       	breq	.+6      	; 0xa0a <prvInitialiseNewTask+0xdc>
 a04:	f5 01       	movw	r30, r10
 a06:	91 82       	std	Z+1, r9	; 0x01
 a08:	80 82       	st	Z, r8
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	1f 91       	pop	r17
 a10:	0f 91       	pop	r16
 a12:	ff 90       	pop	r15
 a14:	ef 90       	pop	r14
 a16:	df 90       	pop	r13
 a18:	cf 90       	pop	r12
 a1a:	bf 90       	pop	r11
 a1c:	af 90       	pop	r10
 a1e:	9f 90       	pop	r9
 a20:	8f 90       	pop	r8
 a22:	7f 90       	pop	r7
 a24:	6f 90       	pop	r6
 a26:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

00001aea <prvInitialiseTaskLists>:
    1aea:	cf 93       	push	r28
    1aec:	c0 e0       	ldi	r28, 0x00	; 0
    1aee:	10 c0       	rjmp	.+32     	; 0x1b10 <prvInitialiseTaskLists+0x26>
    1af0:	8c 2f       	mov	r24, r28
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 01       	movw	r18, r24
    1af6:	22 0f       	add	r18, r18
    1af8:	33 1f       	adc	r19, r19
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	22 0f       	add	r18, r18
    1b00:	33 1f       	adc	r19, r19
    1b02:	82 0f       	add	r24, r18
    1b04:	93 1f       	adc	r25, r19
    1b06:	84 5b       	subi	r24, 0xB4	; 180
    1b08:	99 4f       	sbci	r25, 0xF9	; 249
    1b0a:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1b0e:	cf 5f       	subi	r28, 0xFF	; 255
    1b10:	ca 30       	cpi	r28, 0x0A	; 10
    1b12:	70 f3       	brcs	.-36     	; 0x1af0 <prvInitialiseTaskLists+0x6>
    1b14:	8a ec       	ldi	r24, 0xCA	; 202
    1b16:	96 e0       	ldi	r25, 0x06	; 6
    1b18:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1b1c:	81 ec       	ldi	r24, 0xC1	; 193
    1b1e:	96 e0       	ldi	r25, 0x06	; 6
    1b20:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1b24:	88 eb       	ldi	r24, 0xB8	; 184
    1b26:	96 e0       	ldi	r25, 0x06	; 6
    1b28:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1b2c:	8f ea       	ldi	r24, 0xAF	; 175
    1b2e:	96 e0       	ldi	r25, 0x06	; 6
    1b30:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1b34:	86 ea       	ldi	r24, 0xA6	; 166
    1b36:	96 e0       	ldi	r25, 0x06	; 6
    1b38:	0e 94 9a 12 	call	0x2534	; 0x2534 <vListInitialise>
    1b3c:	8a ec       	ldi	r24, 0xCA	; 202
    1b3e:	96 e0       	ldi	r25, 0x06	; 6
    1b40:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <pxDelayedTaskList+0x1>
    1b44:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <pxDelayedTaskList>
    1b48:	81 ec       	ldi	r24, 0xC1	; 193
    1b4a:	96 e0       	ldi	r25, 0x06	; 6
    1b4c:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
    1b50:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxOverflowDelayedTaskList>
    1b54:	cf 91       	pop	r28
    1b56:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

00001238 <prvAddNewTaskToReadyList>:
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	0f 92       	push	r0
    1244:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxCurrentNumberOfTasks>
    124e:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1252:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1256:	89 2b       	or	r24, r25
    1258:	59 f4       	brne	.+22     	; 0x1270 <prvAddNewTaskToReadyList+0x38>
    125a:	d0 93 e4 06 	sts	0x06E4, r29	; 0x8006e4 <pxCurrentTCB+0x1>
    125e:	c0 93 e3 06 	sts	0x06E3, r28	; 0x8006e3 <pxCurrentTCB>
    1262:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	99 f4       	brne	.+38     	; 0x1290 <prvAddNewTaskToReadyList+0x58>
    126a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <prvInitialiseTaskLists>
    126e:	10 c0       	rjmp	.+32     	; 0x1290 <prvAddNewTaskToReadyList+0x58>
    1270:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    1274:	81 11       	cpse	r24, r1
    1276:	0c c0       	rjmp	.+24     	; 0x1290 <prvAddNewTaskToReadyList+0x58>
    1278:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    127c:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1280:	96 89       	ldd	r25, Z+22	; 0x16
    1282:	8e 89       	ldd	r24, Y+22	; 0x16
    1284:	89 17       	cp	r24, r25
    1286:	20 f0       	brcs	.+8      	; 0x1290 <prvAddNewTaskToReadyList+0x58>
    1288:	d0 93 e4 06 	sts	0x06E4, r29	; 0x8006e4 <pxCurrentTCB+0x1>
    128c:	c0 93 e3 06 	sts	0x06E3, r28	; 0x8006e3 <pxCurrentTCB>
    1290:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxTaskNumber>
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxTaskNumber>
    129a:	2e 89       	ldd	r18, Y+22	; 0x16
    129c:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    12a0:	82 17       	cp	r24, r18
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <prvAddNewTaskToReadyList+0x70>
    12a4:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <uxTopReadyPriority>
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	be 01       	movw	r22, r28
    12ac:	6e 5f       	subi	r22, 0xFE	; 254
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	c9 01       	movw	r24, r18
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	84 5b       	subi	r24, 0xB4	; 180
    12c4:	99 4f       	sbci	r25, 0xF9	; 249
    12c6:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    12d2:	88 23       	and	r24, r24
    12d4:	21 f0       	breq	.+8      	; 0x12de <prvAddNewTaskToReadyList+0xa6>
    12d6:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    12da:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

00001fac <prvCheckTasksWaitingTermination>:
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	1c c0       	rjmp	.+56     	; 0x1fea <prvCheckTasksWaitingTermination+0x3e>
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	0f 92       	push	r0
    1fb8:	e0 91 b4 06 	lds	r30, 0x06B4	; 0x8006b4 <xTasksWaitingTermination+0x5>
    1fbc:	f0 91 b5 06 	lds	r31, 0x06B5	; 0x8006b5 <xTasksWaitingTermination+0x6>
    1fc0:	c6 81       	ldd	r28, Z+6	; 0x06
    1fc2:	d7 81       	ldd	r29, Z+7	; 0x07
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	02 96       	adiw	r24, 0x02	; 2
    1fc8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    1fcc:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    1fd0:	81 50       	subi	r24, 0x01	; 1
    1fd2:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxCurrentNumberOfTasks>
    1fd6:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxDeletedTasksWaitingCleanUp>
    1fda:	81 50       	subi	r24, 0x01	; 1
    1fdc:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <uxDeletedTasksWaitingCleanUp>
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 a8 12 	call	0x2550	; 0x2550 <prvDeleteTCB>
    1fea:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxDeletedTasksWaitingCleanUp>
    1fee:	81 11       	cpse	r24, r1
    1ff0:	e0 cf       	rjmp	.-64     	; 0x1fb2 <prvCheckTasksWaitingTermination+0x6>
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

Disassembly of section .text.prvIdleTask:

000026fa <prvIdleTask>:
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    26fa:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <prvCheckTasksWaitingTermination>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
            vTaskInternalSetTimeOutState( pxTimeOut );
            xReturn = pdFALSE;
        }
    26fe:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortYield>
    2702:	fb cf       	rjmp	.-10     	; 0x26fa <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

00001188 <prvAddCurrentTaskToDelayedList>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	f6 2e       	mov	r15, r22
    1196:	00 91 dd 06 	lds	r16, 0x06DD	; 0x8006dd <xTickCount>
    119a:	10 91 de 06 	lds	r17, 0x06DE	; 0x8006de <xTickCount+0x1>
    119e:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    11a2:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    11a6:	02 96       	adiw	r24, 0x02	; 2
    11a8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    11ac:	cf 3f       	cpi	r28, 0xFF	; 255
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	d8 07       	cpc	r29, r24
    11b2:	69 f4       	brne	.+26     	; 0x11ce <prvAddCurrentTaskToDelayedList+0x46>
    11b4:	ff 20       	and	r15, r15
    11b6:	59 f0       	breq	.+22     	; 0x11ce <prvAddCurrentTaskToDelayedList+0x46>
    11b8:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    11bc:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    11c0:	6e 5f       	subi	r22, 0xFE	; 254
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	86 ea       	ldi	r24, 0xA6	; 166
    11c6:	96 e0       	ldi	r25, 0x06	; 6
    11c8:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
    11cc:	2f c0       	rjmp	.+94     	; 0x122c <prvAddCurrentTaskToDelayedList+0xa4>
    11ce:	c0 0f       	add	r28, r16
    11d0:	d1 1f       	adc	r29, r17
    11d2:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    11d6:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    11da:	d3 83       	std	Z+3, r29	; 0x03
    11dc:	c2 83       	std	Z+2, r28	; 0x02
    11de:	c0 17       	cp	r28, r16
    11e0:	d1 07       	cpc	r29, r17
    11e2:	68 f4       	brcc	.+26     	; 0x11fe <prvAddCurrentTaskToDelayedList+0x76>
    11e4:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    11e8:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    11ec:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxOverflowDelayedTaskList>
    11f0:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
    11f4:	6e 5f       	subi	r22, 0xFE	; 254
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <vListInsert>
    11fc:	17 c0       	rjmp	.+46     	; 0x122c <prvAddCurrentTaskToDelayedList+0xa4>
    11fe:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1202:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1206:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
    120a:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
    120e:	6e 5f       	subi	r22, 0xFE	; 254
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <vListInsert>
    1216:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <xNextTaskUnblockTime>
    121a:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <xNextTaskUnblockTime+0x1>
    121e:	c8 17       	cp	r28, r24
    1220:	d9 07       	cpc	r29, r25
    1222:	20 f4       	brcc	.+8      	; 0x122c <prvAddCurrentTaskToDelayedList+0xa4>
    1224:	d0 93 dc 06 	sts	0x06DC, r29	; 0x8006dc <xNextTaskUnblockTime+0x1>
    1228:	c0 93 db 06 	sts	0x06DB, r28	; 0x8006db <xNextTaskUnblockTime>
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	08 95       	ret

Disassembly of section .text.xTaskCreate:

00000f4e <xTaskCreate>:
     f4e:	4f 92       	push	r4
     f50:	5f 92       	push	r5
     f52:	6f 92       	push	r6
     f54:	7f 92       	push	r7
     f56:	8f 92       	push	r8
     f58:	9f 92       	push	r9
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <xTaskCreate+0x22>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <xTaskCreate+0x24>
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	3c 01       	movw	r6, r24
     f7a:	49 83       	std	Y+1, r20	; 0x01
     f7c:	5a 83       	std	Y+2, r21	; 0x02
     f7e:	6b 83       	std	Y+3, r22	; 0x03
     f80:	49 01       	movw	r8, r18
     f82:	28 01       	movw	r4, r16
     f84:	c9 01       	movw	r24, r18
     f86:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <pvPortMalloc>
     f8a:	8c 01       	movw	r16, r24
     f8c:	89 2b       	or	r24, r25
     f8e:	81 f0       	breq	.+32     	; 0xfb0 <xTaskCreate+0x62>
     f90:	86 e2       	ldi	r24, 0x26	; 38
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <pvPortMalloc>
     f98:	9d 83       	std	Y+5, r25	; 0x05
     f9a:	8c 83       	std	Y+4, r24	; 0x04
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <xTaskCreate+0x5a>
     fa0:	fc 01       	movw	r30, r24
     fa2:	10 8f       	std	Z+24, r17	; 0x18
     fa4:	07 8b       	std	Z+23, r16	; 0x17
     fa6:	06 c0       	rjmp	.+12     	; 0xfb4 <xTaskCreate+0x66>
     fa8:	c8 01       	movw	r24, r16
     faa:	0e 94 9f 13 	call	0x273e	; 0x273e <vPortFree>
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <xTaskCreate+0x66>
     fb0:	1d 82       	std	Y+5, r1	; 0x05
     fb2:	1c 82       	std	Y+4, r1	; 0x04
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	89 2b       	or	r24, r25
     fba:	d1 f0       	breq	.+52     	; 0xff0 <xTaskCreate+0xa2>
     fbc:	84 01       	movw	r16, r8
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	1f 92       	push	r1
     fc4:	1f 92       	push	r1
     fc6:	1f 92       	push	r1
     fc8:	8c 80       	ldd	r8, Y+4	; 0x04
     fca:	9d 80       	ldd	r9, Y+5	; 0x05
     fcc:	56 01       	movw	r10, r12
     fce:	ce 2c       	mov	r12, r14
     fd0:	72 01       	movw	r14, r4
     fd2:	49 81       	ldd	r20, Y+1	; 0x01
     fd4:	5a 81       	ldd	r21, Y+2	; 0x02
     fd6:	6b 81       	ldd	r22, Y+3	; 0x03
     fd8:	c3 01       	movw	r24, r6
     fda:	0e 94 97 04 	call	0x92e	; 0x92e <prvInitialiseNewTask>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	0e 94 1c 09 	call	0x1238	; 0x1238 <prvAddNewTaskToReadyList>
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <xTaskCreate+0xa4>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	5f 90       	pop	r5
    101a:	4f 90       	pop	r4
    101c:	08 95       	ret

Disassembly of section .text.vTaskResume:

00001916 <vTaskResume>:
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	20 91 e3 06 	lds	r18, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1922:	30 91 e4 06 	lds	r19, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1926:	82 17       	cp	r24, r18
    1928:	93 07       	cpc	r25, r19
    192a:	61 f1       	breq	.+88     	; 0x1984 <vTaskResume+0x6e>
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	51 f1       	breq	.+84     	; 0x1984 <vTaskResume+0x6e>
    1930:	ec 01       	movw	r28, r24
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	0f 92       	push	r0
    1938:	0e 94 ce 10 	call	0x219c	; 0x219c <prvTaskIsTaskSuspended>
    193c:	88 23       	and	r24, r24
    193e:	01 f1       	breq	.+64     	; 0x1980 <vTaskResume+0x6a>
    1940:	8e 01       	movw	r16, r28
    1942:	0e 5f       	subi	r16, 0xFE	; 254
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	c8 01       	movw	r24, r16
    1948:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    194c:	8e 89       	ldd	r24, Y+22	; 0x16
    194e:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    1952:	98 17       	cp	r25, r24
    1954:	10 f4       	brcc	.+4      	; 0x195a <vTaskResume+0x44>
    1956:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9c 01       	movw	r18, r24
    195e:	22 0f       	add	r18, r18
    1960:	33 1f       	adc	r19, r19
    1962:	22 0f       	add	r18, r18
    1964:	33 1f       	adc	r19, r19
    1966:	22 0f       	add	r18, r18
    1968:	33 1f       	adc	r19, r19
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	b8 01       	movw	r22, r16
    1970:	84 5b       	subi	r24, 0xB4	; 180
    1972:	99 4f       	sbci	r25, 0xF9	; 249
    1974:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
    1978:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    197c:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

00001d56 <vTaskStartScheduler>:
    1d56:	cf 92       	push	r12
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	0f 2e       	mov	r0, r31
    1d62:	f9 ed       	ldi	r31, 0xD9	; 217
    1d64:	cf 2e       	mov	r12, r31
    1d66:	f6 e0       	ldi	r31, 0x06	; 6
    1d68:	df 2e       	mov	r13, r31
    1d6a:	f0 2d       	mov	r31, r0
    1d6c:	e1 2c       	mov	r14, r1
    1d6e:	00 e0       	ldi	r16, 0x00	; 0
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	24 e6       	ldi	r18, 0x64	; 100
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	46 e1       	ldi	r20, 0x16	; 22
    1d78:	51 e0       	ldi	r21, 0x01	; 1
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	8d e7       	ldi	r24, 0x7D	; 125
    1d7e:	93 e1       	ldi	r25, 0x13	; 19
    1d80:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xTaskCreate>
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	81 f4       	brne	.+32     	; 0x1da8 <vTaskStartScheduler+0x52>
    1d88:	f8 94       	cli
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	9f ef       	ldi	r25, 0xFF	; 255
    1d8e:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
    1d92:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <xSchedulerRunning>
    1d9c:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <xTickCount+0x1>
    1da0:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <xTickCount>
    1da4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <xPortStartScheduler>
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	08 95       	ret

Disassembly of section .text.vTaskEndScheduler:

000026c0 <vTaskEndScheduler>:

void vTaskSuspendAll( void )
{
    /* A critical section is not required as the variable is of type
     * BaseType_t.  Please read Richard Barry's reply in the following link to a
     * post in the FreeRTOS support forum before reporting this as a bug! -
    26c0:	f8 94       	cli
     * https://goo.gl/wu4acr */
    26c2:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <xSchedulerRunning>

    26c6:	0e 94 a0 13 	call	0x2740	; 0x2740 <vPortEndScheduler>
    26ca:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

000026cc <vTaskSuspendAll>:
    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    26cc:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <uxSchedulerSuspended>
    26d6:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

00000712 <xTaskIncrementTick>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
 722:	81 11       	cpse	r24, r1
 724:	73 c0       	rjmp	.+230    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 726:	e0 90 dd 06 	lds	r14, 0x06DD	; 0x8006dd <xTickCount>
 72a:	f0 90 de 06 	lds	r15, 0x06DE	; 0x8006de <xTickCount+0x1>
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	e8 1a       	sub	r14, r24
 732:	f8 0a       	sbc	r15, r24
 734:	f0 92 de 06 	sts	0x06DE, r15	; 0x8006de <xTickCount+0x1>
 738:	e0 92 dd 06 	sts	0x06DD, r14	; 0x8006dd <xTickCount>
 73c:	e1 14       	cp	r14, r1
 73e:	f1 04       	cpc	r15, r1
 740:	b9 f4       	brne	.+46     	; 0x770 <xTaskIncrementTick+0x5e>
 742:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
 746:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
 74a:	20 91 df 06 	lds	r18, 0x06DF	; 0x8006df <pxOverflowDelayedTaskList>
 74e:	30 91 e0 06 	lds	r19, 0x06E0	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
 752:	30 93 e2 06 	sts	0x06E2, r19	; 0x8006e2 <pxDelayedTaskList+0x1>
 756:	20 93 e1 06 	sts	0x06E1, r18	; 0x8006e1 <pxDelayedTaskList>
 75a:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
 75e:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxOverflowDelayedTaskList>
 762:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <xNumOfOverflows>
 766:	8f 5f       	subi	r24, 0xFF	; 255
 768:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <xNumOfOverflows>
 76c:	0e 94 2e 11 	call	0x225c	; 0x225c <prvResetNextTaskUnblockTime>
 770:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <xNextTaskUnblockTime>
 774:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <xNextTaskUnblockTime+0x1>
 778:	e8 16       	cp	r14, r24
 77a:	f9 06       	cpc	r15, r25
 77c:	08 f4       	brcc	.+2      	; 0x780 <xTaskIncrementTick+0x6e>
 77e:	4b c0       	rjmp	.+150    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 780:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
 784:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
 788:	80 81       	ld	r24, Z
 78a:	81 11       	cpse	r24, r1
 78c:	07 c0       	rjmp	.+14     	; 0x79c <xTaskIncrementTick+0x8a>
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	9f ef       	ldi	r25, 0xFF	; 255
 792:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
 796:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
 79a:	3d c0       	rjmp	.+122    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 79c:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
 7a0:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
 7a4:	05 80       	ldd	r0, Z+5	; 0x05
 7a6:	f6 81       	ldd	r31, Z+6	; 0x06
 7a8:	e0 2d       	mov	r30, r0
 7aa:	c6 81       	ldd	r28, Z+6	; 0x06
 7ac:	d7 81       	ldd	r29, Z+7	; 0x07
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	9b 81       	ldd	r25, Y+3	; 0x03
 7b2:	e8 16       	cp	r14, r24
 7b4:	f9 06       	cpc	r15, r25
 7b6:	28 f4       	brcc	.+10     	; 0x7c2 <xTaskIncrementTick+0xb0>
 7b8:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
 7bc:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
 7c0:	2a c0       	rjmp	.+84     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7c2:	8e 01       	movw	r16, r28
 7c4:	0e 5f       	subi	r16, 0xFE	; 254
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
 7c8:	c8 01       	movw	r24, r16
 7ca:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
 7ce:	8c 89       	ldd	r24, Y+20	; 0x14
 7d0:	9d 89       	ldd	r25, Y+21	; 0x15
 7d2:	89 2b       	or	r24, r25
 7d4:	21 f0       	breq	.+8      	; 0x7de <xTaskIncrementTick+0xcc>
 7d6:	ce 01       	movw	r24, r28
 7d8:	0c 96       	adiw	r24, 0x0c	; 12
 7da:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
 7de:	8e 89       	ldd	r24, Y+22	; 0x16
 7e0:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
 7e4:	98 17       	cp	r25, r24
 7e6:	10 f4       	brcc	.+4      	; 0x7ec <xTaskIncrementTick+0xda>
 7e8:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	9c 01       	movw	r18, r24
 7f0:	22 0f       	add	r18, r18
 7f2:	33 1f       	adc	r19, r19
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	82 0f       	add	r24, r18
 7fe:	93 1f       	adc	r25, r19
 800:	b8 01       	movw	r22, r16
 802:	84 5b       	subi	r24, 0xB4	; 180
 804:	99 4f       	sbci	r25, 0xF9	; 249
 806:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
 80a:	ba cf       	rjmp	.-140    	; 0x780 <xTaskIncrementTick+0x6e>
 80c:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxPendedTicks>
 810:	8f 5f       	subi	r24, 0xFF	; 255
 812:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxPendedTicks>
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	1f 91       	pop	r17
 81e:	0f 91       	pop	r16
 820:	ff 90       	pop	r15
 822:	ef 90       	pop	r14
 824:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

00000da6 <xTaskResumeAll>:
 da6:	0f 93       	push	r16
 da8:	1f 93       	push	r17
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	0f b6       	in	r0, 0x3f	; 63
 db0:	f8 94       	cli
 db2:	0f 92       	push	r0
 db4:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
 db8:	81 50       	subi	r24, 0x01	; 1
 dba:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <uxSchedulerSuspended>
 dbe:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
 dc2:	81 11       	cpse	r24, r1
 dc4:	52 c0       	rjmp	.+164    	; 0xe6a <xTaskResumeAll+0xc4>
 dc6:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
 dca:	81 11       	cpse	r24, r1
 dcc:	33 c0       	rjmp	.+102    	; 0xe34 <xTaskResumeAll+0x8e>
 dce:	4d c0       	rjmp	.+154    	; 0xe6a <xTaskResumeAll+0xc4>
 dd0:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <xPendingReadyList+0x5>
 dd4:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <xPendingReadyList+0x6>
 dd8:	c6 81       	ldd	r28, Z+6	; 0x06
 dda:	d7 81       	ldd	r29, Z+7	; 0x07
 ddc:	ce 01       	movw	r24, r28
 dde:	0c 96       	adiw	r24, 0x0c	; 12
 de0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
 de4:	8e 01       	movw	r16, r28
 de6:	0e 5f       	subi	r16, 0xFE	; 254
 de8:	1f 4f       	sbci	r17, 0xFF	; 255
 dea:	c8 01       	movw	r24, r16
 dec:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
 df0:	8e 89       	ldd	r24, Y+22	; 0x16
 df2:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
 df6:	98 17       	cp	r25, r24
 df8:	10 f4       	brcc	.+4      	; 0xdfe <xTaskResumeAll+0x58>
 dfa:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	9c 01       	movw	r18, r24
 e02:	22 0f       	add	r18, r18
 e04:	33 1f       	adc	r19, r19
 e06:	22 0f       	add	r18, r18
 e08:	33 1f       	adc	r19, r19
 e0a:	22 0f       	add	r18, r18
 e0c:	33 1f       	adc	r19, r19
 e0e:	82 0f       	add	r24, r18
 e10:	93 1f       	adc	r25, r19
 e12:	b8 01       	movw	r22, r16
 e14:	84 5b       	subi	r24, 0xB4	; 180
 e16:	99 4f       	sbci	r25, 0xF9	; 249
 e18:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
 e1c:	9e 89       	ldd	r25, Y+22	; 0x16
 e1e:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
 e22:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
 e26:	86 89       	ldd	r24, Z+22	; 0x16
 e28:	98 17       	cp	r25, r24
 e2a:	30 f0       	brcs	.+12     	; 0xe38 <xTaskResumeAll+0x92>
 e2c:	81 e0       	ldi	r24, 0x01	; 1
 e2e:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
 e32:	02 c0       	rjmp	.+4      	; 0xe38 <xTaskResumeAll+0x92>
 e34:	c0 e0       	ldi	r28, 0x00	; 0
 e36:	d0 e0       	ldi	r29, 0x00	; 0
 e38:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xPendingReadyList>
 e3c:	81 11       	cpse	r24, r1
 e3e:	c8 cf       	rjmp	.-112    	; 0xdd0 <xTaskResumeAll+0x2a>
 e40:	cd 2b       	or	r28, r29
 e42:	11 f0       	breq	.+4      	; 0xe48 <xTaskResumeAll+0xa2>
 e44:	0e 94 2e 11 	call	0x225c	; 0x225c <prvResetNextTaskUnblockTime>
 e48:	c0 91 f3 06 	lds	r28, 0x06F3	; 0x8006f3 <uxPendedTicks>
 e4c:	cc 23       	and	r28, r28
 e4e:	59 f0       	breq	.+22     	; 0xe66 <xTaskResumeAll+0xc0>
 e50:	0e 94 89 03 	call	0x712	; 0x712 <xTaskIncrementTick>
 e54:	88 23       	and	r24, r24
 e56:	19 f0       	breq	.+6      	; 0xe5e <xTaskResumeAll+0xb8>
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
 e5e:	c1 50       	subi	r28, 0x01	; 1
 e60:	b9 f7       	brne	.-18     	; 0xe50 <xTaskResumeAll+0xaa>
 e62:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <uxPendedTicks>
 e66:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xYieldPending>
 e6a:	0f 90       	pop	r0
 e6c:	0f be       	out	0x3f, r0	; 63
 e6e:	80 e0       	ldi	r24, 0x00	; 0
 e70:	df 91       	pop	r29
 e72:	cf 91       	pop	r28
 e74:	1f 91       	pop	r17
 e76:	0f 91       	pop	r16
 e78:	08 95       	ret

Disassembly of section .text.vTaskDelay:

0000238e <vTaskDelay>:
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	ec 01       	movw	r28, r24
    2394:	89 2b       	or	r24, r25
    2396:	49 f0       	breq	.+18     	; 0x23aa <vTaskDelay+0x1c>
    2398:	0e 94 66 13 	call	0x26cc	; 0x26cc <vTaskSuspendAll>
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	ce 01       	movw	r24, r28
    23a0:	0e 94 c4 08 	call	0x1188	; 0x1188 <prvAddCurrentTaskToDelayedList>
    23a4:	0e 94 d3 06 	call	0xda6	; 0xda6 <xTaskResumeAll>
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <vTaskDelay+0x1e>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	81 11       	cpse	r24, r1
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <vTaskDelay+0x26>
    23b0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortYield>
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

0000138e <vTaskSwitchContext>:
    138e:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
    1392:	88 23       	and	r24, r24
    1394:	21 f0       	breq	.+8      	; 0x139e <vTaskSwitchContext+0x10>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
    139c:	08 95       	ret
    139e:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <xYieldPending>
    13a2:	20 91 f5 06 	lds	r18, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <vTaskSwitchContext+0x1c>
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	82 2f       	mov	r24, r18
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	fc 01       	movw	r30, r24
    13b0:	ee 0f       	add	r30, r30
    13b2:	ff 1f       	adc	r31, r31
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e8 0f       	add	r30, r24
    13be:	f9 1f       	adc	r31, r25
    13c0:	e4 5b       	subi	r30, 0xB4	; 180
    13c2:	f9 4f       	sbci	r31, 0xF9	; 249
    13c4:	30 81       	ld	r19, Z
    13c6:	33 23       	and	r19, r19
    13c8:	79 f3       	breq	.-34     	; 0x13a8 <vTaskSwitchContext+0x1a>
    13ca:	ac 01       	movw	r20, r24
    13cc:	44 0f       	add	r20, r20
    13ce:	55 1f       	adc	r21, r21
    13d0:	44 0f       	add	r20, r20
    13d2:	55 1f       	adc	r21, r21
    13d4:	44 0f       	add	r20, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	48 0f       	add	r20, r24
    13da:	59 1f       	adc	r21, r25
    13dc:	df 01       	movw	r26, r30
    13de:	01 80       	ldd	r0, Z+1	; 0x01
    13e0:	f2 81       	ldd	r31, Z+2	; 0x02
    13e2:	e0 2d       	mov	r30, r0
    13e4:	02 80       	ldd	r0, Z+2	; 0x02
    13e6:	f3 81       	ldd	r31, Z+3	; 0x03
    13e8:	e0 2d       	mov	r30, r0
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	fc 93       	st	X, r31
    13ee:	ee 93       	st	-X, r30
    13f0:	11 97       	sbiw	r26, 0x01	; 1
    13f2:	41 5b       	subi	r20, 0xB1	; 177
    13f4:	59 4f       	sbci	r21, 0xF9	; 249
    13f6:	e4 17       	cp	r30, r20
    13f8:	f5 07       	cpc	r31, r21
    13fa:	29 f4       	brne	.+10     	; 0x1406 <vTaskSwitchContext+0x78>
    13fc:	42 81       	ldd	r20, Z+2	; 0x02
    13fe:	53 81       	ldd	r21, Z+3	; 0x03
    1400:	fd 01       	movw	r30, r26
    1402:	52 83       	std	Z+2, r21	; 0x02
    1404:	41 83       	std	Z+1, r20	; 0x01
    1406:	fc 01       	movw	r30, r24
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	8e 0f       	add	r24, r30
    1416:	9f 1f       	adc	r25, r31
    1418:	fc 01       	movw	r30, r24
    141a:	e4 5b       	subi	r30, 0xB4	; 180
    141c:	f9 4f       	sbci	r31, 0xF9	; 249
    141e:	01 80       	ldd	r0, Z+1	; 0x01
    1420:	f2 81       	ldd	r31, Z+2	; 0x02
    1422:	e0 2d       	mov	r30, r0
    1424:	86 81       	ldd	r24, Z+6	; 0x06
    1426:	97 81       	ldd	r25, Z+7	; 0x07
    1428:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <pxCurrentTCB+0x1>
    142c:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <pxCurrentTCB>
    1430:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <uxTopReadyPriority>
    1434:	08 95       	ret

Disassembly of section .text.vTaskSuspend:

00001436 <vTaskSuspend>:
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	0f 92       	push	r0
    1446:	89 2b       	or	r24, r25
    1448:	21 f4       	brne	.+8      	; 0x1452 <vTaskSuspend+0x1c>
    144a:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    144e:	d0 91 e4 06 	lds	r29, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1452:	8e 01       	movw	r16, r28
    1454:	0e 5f       	subi	r16, 0xFE	; 254
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	c8 01       	movw	r24, r16
    145a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    145e:	8c 89       	ldd	r24, Y+20	; 0x14
    1460:	9d 89       	ldd	r25, Y+21	; 0x15
    1462:	89 2b       	or	r24, r25
    1464:	21 f0       	breq	.+8      	; 0x146e <vTaskSuspend+0x38>
    1466:	ce 01       	movw	r24, r28
    1468:	0c 96       	adiw	r24, 0x0c	; 12
    146a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    146e:	b8 01       	movw	r22, r16
    1470:	86 ea       	ldi	r24, 0xA6	; 166
    1472:	96 e0       	ldi	r25, 0x06	; 6
    1474:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
    1478:	8d a1       	ldd	r24, Y+37	; 0x25
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	09 f4       	brne	.+2      	; 0x1480 <vTaskSuspend+0x4a>
    147e:	1d a2       	std	Y+37, r1	; 0x25
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    1488:	88 23       	and	r24, r24
    148a:	39 f0       	breq	.+14     	; 0x149a <vTaskSuspend+0x64>
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	0f 92       	push	r0
    1492:	0e 94 2e 11 	call	0x225c	; 0x225c <prvResetNextTaskUnblockTime>
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    149e:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    14a2:	c8 17       	cp	r28, r24
    14a4:	d9 07       	cpc	r29, r25
    14a6:	a1 f4       	brne	.+40     	; 0x14d0 <vTaskSuspend+0x9a>
    14a8:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    14ac:	88 23       	and	r24, r24
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <vTaskSuspend+0x80>
    14b0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortYield>
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <vTaskSuspend+0x9a>
    14b6:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <xSuspendedTaskList>
    14ba:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    14be:	98 13       	cpse	r25, r24
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <vTaskSuspend+0x96>
    14c2:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <pxCurrentTCB+0x1>
    14c6:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <pxCurrentTCB>
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vTaskSuspend+0x9a>
    14cc:	0e 94 c7 09 	call	0x138e	; 0x138e <vTaskSwitchContext>
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

00002456 <vTaskPlaceOnEventList>:
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	eb 01       	movw	r28, r22
    245c:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    2460:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    2464:	64 5f       	subi	r22, 0xF4	; 244
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <vListInsert>
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	ce 01       	movw	r24, r28
    2470:	0e 94 c4 08 	call	0x1188	; 0x1188 <prvAddCurrentTaskToDelayedList>
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromEventList:

000014da <xTaskRemoveFromEventList>:
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	a8 2f       	mov	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	05 96       	adiw	r24, 0x05	; 5
    14e8:	a1 1d       	adc	r26, r1
    14ea:	fc 01       	movw	r30, r24
    14ec:	5a 2f       	mov	r21, r26
    14ee:	0e 94 1e 13 	call	0x263c	; 0x263c <__xload_2>
    14f2:	fb 01       	movw	r30, r22
    14f4:	c6 81       	ldd	r28, Z+6	; 0x06
    14f6:	d7 81       	ldd	r29, Z+7	; 0x07
    14f8:	8e 01       	movw	r16, r28
    14fa:	04 5f       	subi	r16, 0xF4	; 244
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	c8 01       	movw	r24, r16
    1500:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    1504:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
    1508:	81 11       	cpse	r24, r1
    150a:	1c c0       	rjmp	.+56     	; 0x1544 <xTaskRemoveFromEventList+0x6a>
    150c:	0a 50       	subi	r16, 0x0A	; 10
    150e:	11 09       	sbc	r17, r1
    1510:	c8 01       	movw	r24, r16
    1512:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <uxListRemove>
    1516:	8e 89       	ldd	r24, Y+22	; 0x16
    1518:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    151c:	98 17       	cp	r25, r24
    151e:	10 f4       	brcc	.+4      	; 0x1524 <xTaskRemoveFromEventList+0x4a>
    1520:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9c 01       	movw	r18, r24
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	82 0f       	add	r24, r18
    1536:	93 1f       	adc	r25, r19
    1538:	b8 01       	movw	r22, r16
    153a:	84 5b       	subi	r24, 0xB4	; 180
    153c:	99 4f       	sbci	r25, 0xF9	; 249
    153e:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
    1542:	05 c0       	rjmp	.+10     	; 0x154e <xTaskRemoveFromEventList+0x74>
    1544:	b8 01       	movw	r22, r16
    1546:	88 eb       	ldi	r24, 0xB8	; 184
    1548:	96 e0       	ldi	r25, 0x06	; 6
    154a:	0e 94 ad 10 	call	0x215a	; 0x215a <vListInsertEnd>
    154e:	9e 89       	ldd	r25, Y+22	; 0x16
    1550:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1554:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1558:	86 89       	ldd	r24, Z+22	; 0x16
    155a:	89 17       	cp	r24, r25
    155c:	20 f4       	brcc	.+8      	; 0x1566 <xTaskRemoveFromEventList+0x8c>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <xTaskRemoveFromEventList+0x8e>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

Disassembly of section .text.vTaskInternalSetTimeOutState:

000025ca <vTaskInternalSetTimeOutState>:
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
        }
        #endif
    }
    else
    25ca:	20 91 f1 06 	lds	r18, 0x06F1	; 0x8006f1 <xNumOfOverflows>
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
    {
    25d2:	20 91 dd 06 	lds	r18, 0x06DD	; 0x8006dd <xTickCount>
    25d6:	30 91 de 06 	lds	r19, 0x06DE	; 0x8006de <xTickCount+0x1>
    25da:	32 83       	std	Z+2, r19	; 0x02
    25dc:	21 83       	std	Z+1, r18	; 0x01
    25de:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

0000198e <xTaskCheckForTimeOut>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	0f 92       	push	r0
    199a:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <xTickCount>
    199e:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <xTickCount+0x1>
    19a2:	dc 01       	movw	r26, r24
    19a4:	11 96       	adiw	r26, 0x01	; 1
    19a6:	4d 91       	ld	r20, X+
    19a8:	5c 91       	ld	r21, X
    19aa:	12 97       	sbiw	r26, 0x02	; 2
    19ac:	df 01       	movw	r26, r30
    19ae:	a4 1b       	sub	r26, r20
    19b0:	b5 0b       	sbc	r27, r21
    19b2:	eb 01       	movw	r28, r22
    19b4:	28 81       	ld	r18, Y
    19b6:	39 81       	ldd	r19, Y+1	; 0x01
    19b8:	2f 3f       	cpi	r18, 0xFF	; 255
    19ba:	df ef       	ldi	r29, 0xFF	; 255
    19bc:	3d 07       	cpc	r19, r29
    19be:	d1 f0       	breq	.+52     	; 0x19f4 <xTaskCheckForTimeOut+0x66>
    19c0:	ec 01       	movw	r28, r24
    19c2:	18 81       	ld	r17, Y
    19c4:	c0 91 f1 06 	lds	r28, 0x06F1	; 0x8006f1 <xNumOfOverflows>
    19c8:	1c 17       	cp	r17, r28
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <xTaskCheckForTimeOut+0x44>
    19cc:	e4 17       	cp	r30, r20
    19ce:	f5 07       	cpc	r31, r21
    19d0:	98 f4       	brcc	.+38     	; 0x19f8 <xTaskCheckForTimeOut+0x6a>
    19d2:	a2 17       	cp	r26, r18
    19d4:	b3 07       	cpc	r27, r19
    19d6:	48 f4       	brcc	.+18     	; 0x19ea <xTaskCheckForTimeOut+0x5c>
    19d8:	fb 01       	movw	r30, r22
    19da:	2a 1b       	sub	r18, r26
    19dc:	3b 0b       	sbc	r19, r27
    19de:	31 83       	std	Z+1, r19	; 0x01
    19e0:	20 83       	st	Z, r18
    19e2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <vTaskInternalSetTimeOutState>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	08 c0       	rjmp	.+16     	; 0x19fa <xTaskCheckForTimeOut+0x6c>
    19ea:	fb 01       	movw	r30, r22
    19ec:	11 82       	std	Z+1, r1	; 0x01
    19ee:	10 82       	st	Z, r1
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <xTaskCheckForTimeOut+0x6c>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <xTaskCheckForTimeOut+0x6c>
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

00002720 <vTaskMissedYield>:
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
    2726:	08 95       	ret

Disassembly of section .text:

00002704 <__cmpsf2>:
    2704:	0e 94 45 10 	call	0x208a	; 0x208a <__fp_cmp>
    2708:	08 f4       	brcc	.+2      	; 0x270c <__cmpsf2+0x8>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	08 95       	ret

Disassembly of section .text:

00001db4 <__fixunssfsi>:
    1db4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_splitA>
    1db8:	88 f0       	brcs	.+34     	; 0x1ddc <__fixunssfsi+0x28>
    1dba:	9f 57       	subi	r25, 0x7F	; 127
    1dbc:	98 f0       	brcs	.+38     	; 0x1de4 <__fixunssfsi+0x30>
    1dbe:	b9 2f       	mov	r27, r25
    1dc0:	99 27       	eor	r25, r25
    1dc2:	b7 51       	subi	r27, 0x17	; 23
    1dc4:	b0 f0       	brcs	.+44     	; 0x1df2 <__fixunssfsi+0x3e>
    1dc6:	e1 f0       	breq	.+56     	; 0x1e00 <__fixunssfsi+0x4c>
    1dc8:	66 0f       	add	r22, r22
    1dca:	77 1f       	adc	r23, r23
    1dcc:	88 1f       	adc	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	1a f0       	brmi	.+6      	; 0x1dd8 <__fixunssfsi+0x24>
    1dd2:	ba 95       	dec	r27
    1dd4:	c9 f7       	brne	.-14     	; 0x1dc8 <__fixunssfsi+0x14>
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <__fixunssfsi+0x4c>
    1dd8:	b1 30       	cpi	r27, 0x01	; 1
    1dda:	91 f0       	breq	.+36     	; 0x1e00 <__fixunssfsi+0x4c>
    1ddc:	0e 94 2d 13 	call	0x265a	; 0x265a <__fp_zero>
    1de0:	b1 e0       	ldi	r27, 0x01	; 1
    1de2:	08 95       	ret
    1de4:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__fp_zero>
    1de8:	67 2f       	mov	r22, r23
    1dea:	78 2f       	mov	r23, r24
    1dec:	88 27       	eor	r24, r24
    1dee:	b8 5f       	subi	r27, 0xF8	; 248
    1df0:	39 f0       	breq	.+14     	; 0x1e00 <__fixunssfsi+0x4c>
    1df2:	b9 3f       	cpi	r27, 0xF9	; 249
    1df4:	cc f3       	brlt	.-14     	; 0x1de8 <__fixunssfsi+0x34>
    1df6:	86 95       	lsr	r24
    1df8:	77 95       	ror	r23
    1dfa:	67 95       	ror	r22
    1dfc:	b3 95       	inc	r27
    1dfe:	d9 f7       	brne	.-10     	; 0x1df6 <__fixunssfsi+0x42>
    1e00:	3e f4       	brtc	.+14     	; 0x1e10 <__fixunssfsi+0x5c>
    1e02:	90 95       	com	r25
    1e04:	80 95       	com	r24
    1e06:	70 95       	com	r23
    1e08:	61 95       	neg	r22
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	08 95       	ret

Disassembly of section .text:

0000189c <__floatunsisf>:
    189c:	e8 94       	clt
    189e:	09 c0       	rjmp	.+18     	; 0x18b2 <__floatsisf+0x12>

000018a0 <__floatsisf>:
    18a0:	97 fb       	bst	r25, 7
    18a2:	3e f4       	brtc	.+14     	; 0x18b2 <__floatsisf+0x12>
    18a4:	90 95       	com	r25
    18a6:	80 95       	com	r24
    18a8:	70 95       	com	r23
    18aa:	61 95       	neg	r22
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	8f 4f       	sbci	r24, 0xFF	; 255
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	99 23       	and	r25, r25
    18b4:	a9 f0       	breq	.+42     	; 0x18e0 <__floatsisf+0x40>
    18b6:	f9 2f       	mov	r31, r25
    18b8:	96 e9       	ldi	r25, 0x96	; 150
    18ba:	bb 27       	eor	r27, r27
    18bc:	93 95       	inc	r25
    18be:	f6 95       	lsr	r31
    18c0:	87 95       	ror	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	b7 95       	ror	r27
    18c8:	f1 11       	cpse	r31, r1
    18ca:	f8 cf       	rjmp	.-16     	; 0x18bc <__floatsisf+0x1c>
    18cc:	fa f4       	brpl	.+62     	; 0x190c <__floatsisf+0x6c>
    18ce:	bb 0f       	add	r27, r27
    18d0:	11 f4       	brne	.+4      	; 0x18d6 <__floatsisf+0x36>
    18d2:	60 ff       	sbrs	r22, 0
    18d4:	1b c0       	rjmp	.+54     	; 0x190c <__floatsisf+0x6c>
    18d6:	6f 5f       	subi	r22, 0xFF	; 255
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	8f 4f       	sbci	r24, 0xFF	; 255
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	16 c0       	rjmp	.+44     	; 0x190c <__floatsisf+0x6c>
    18e0:	88 23       	and	r24, r24
    18e2:	11 f0       	breq	.+4      	; 0x18e8 <__floatsisf+0x48>
    18e4:	96 e9       	ldi	r25, 0x96	; 150
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <__floatsisf+0x6a>
    18e8:	77 23       	and	r23, r23
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <__floatsisf+0x54>
    18ec:	9e e8       	ldi	r25, 0x8E	; 142
    18ee:	87 2f       	mov	r24, r23
    18f0:	76 2f       	mov	r23, r22
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <__floatsisf+0x5e>
    18f4:	66 23       	and	r22, r22
    18f6:	71 f0       	breq	.+28     	; 0x1914 <__floatsisf+0x74>
    18f8:	96 e8       	ldi	r25, 0x86	; 134
    18fa:	86 2f       	mov	r24, r22
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	2a f0       	brmi	.+10     	; 0x190c <__floatsisf+0x6c>
    1902:	9a 95       	dec	r25
    1904:	66 0f       	add	r22, r22
    1906:	77 1f       	adc	r23, r23
    1908:	88 1f       	adc	r24, r24
    190a:	da f7       	brpl	.-10     	; 0x1902 <__floatsisf+0x62>
    190c:	88 0f       	add	r24, r24
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret

Disassembly of section .text:

0000208a <__fp_cmp>:
    208a:	99 0f       	add	r25, r25
    208c:	00 08       	sbc	r0, r0
    208e:	55 0f       	add	r21, r21
    2090:	aa 0b       	sbc	r26, r26
    2092:	e0 e8       	ldi	r30, 0x80	; 128
    2094:	fe ef       	ldi	r31, 0xFE	; 254
    2096:	16 16       	cp	r1, r22
    2098:	17 06       	cpc	r1, r23
    209a:	e8 07       	cpc	r30, r24
    209c:	f9 07       	cpc	r31, r25
    209e:	c0 f0       	brcs	.+48     	; 0x20d0 <__fp_cmp+0x46>
    20a0:	12 16       	cp	r1, r18
    20a2:	13 06       	cpc	r1, r19
    20a4:	e4 07       	cpc	r30, r20
    20a6:	f5 07       	cpc	r31, r21
    20a8:	98 f0       	brcs	.+38     	; 0x20d0 <__fp_cmp+0x46>
    20aa:	62 1b       	sub	r22, r18
    20ac:	73 0b       	sbc	r23, r19
    20ae:	84 0b       	sbc	r24, r20
    20b0:	95 0b       	sbc	r25, r21
    20b2:	39 f4       	brne	.+14     	; 0x20c2 <__fp_cmp+0x38>
    20b4:	0a 26       	eor	r0, r26
    20b6:	61 f0       	breq	.+24     	; 0x20d0 <__fp_cmp+0x46>
    20b8:	23 2b       	or	r18, r19
    20ba:	24 2b       	or	r18, r20
    20bc:	25 2b       	or	r18, r21
    20be:	21 f4       	brne	.+8      	; 0x20c8 <__fp_cmp+0x3e>
    20c0:	08 95       	ret
    20c2:	0a 26       	eor	r0, r26
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <__fp_cmp+0x3e>
    20c6:	a1 40       	sbci	r26, 0x01	; 1
    20c8:	a6 95       	lsr	r26
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	81 1d       	adc	r24, r1
    20ce:	81 1d       	adc	r24, r1
    20d0:	08 95       	ret

Disassembly of section .text:

000020d2 <__fp_split3>:
    20d2:	57 fd       	sbrc	r21, 7
    20d4:	90 58       	subi	r25, 0x80	; 128
    20d6:	44 0f       	add	r20, r20
    20d8:	55 1f       	adc	r21, r21
    20da:	59 f0       	breq	.+22     	; 0x20f2 <__fp_splitA+0x10>
    20dc:	5f 3f       	cpi	r21, 0xFF	; 255
    20de:	71 f0       	breq	.+28     	; 0x20fc <__fp_splitA+0x1a>
    20e0:	47 95       	ror	r20

000020e2 <__fp_splitA>:
    20e2:	88 0f       	add	r24, r24
    20e4:	97 fb       	bst	r25, 7
    20e6:	99 1f       	adc	r25, r25
    20e8:	61 f0       	breq	.+24     	; 0x2102 <__fp_splitA+0x20>
    20ea:	9f 3f       	cpi	r25, 0xFF	; 255
    20ec:	79 f0       	breq	.+30     	; 0x210c <__fp_splitA+0x2a>
    20ee:	87 95       	ror	r24
    20f0:	08 95       	ret
    20f2:	12 16       	cp	r1, r18
    20f4:	13 06       	cpc	r1, r19
    20f6:	14 06       	cpc	r1, r20
    20f8:	55 1f       	adc	r21, r21
    20fa:	f2 cf       	rjmp	.-28     	; 0x20e0 <__fp_split3+0xe>
    20fc:	46 95       	lsr	r20
    20fe:	f1 df       	rcall	.-30     	; 0x20e2 <__fp_splitA>
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <__fp_splitA+0x30>
    2102:	16 16       	cp	r1, r22
    2104:	17 06       	cpc	r1, r23
    2106:	18 06       	cpc	r1, r24
    2108:	99 1f       	adc	r25, r25
    210a:	f1 cf       	rjmp	.-30     	; 0x20ee <__fp_splitA+0xc>
    210c:	86 95       	lsr	r24
    210e:	71 05       	cpc	r23, r1
    2110:	61 05       	cpc	r22, r1
    2112:	08 94       	sec
    2114:	08 95       	ret

Disassembly of section .text:

0000265a <__fp_zero>:
    265a:	e8 94       	clt

0000265c <__fp_szero>:
    265c:	bb 27       	eor	r27, r27
    265e:	66 27       	eor	r22, r22
    2660:	77 27       	eor	r23, r23
    2662:	cb 01       	movw	r24, r22
    2664:	97 f9       	bld	r25, 7
    2666:	08 95       	ret

Disassembly of section .text:

0000270e <__gesf2>:
    270e:	0e 94 45 10 	call	0x208a	; 0x208a <__fp_cmp>
    2712:	08 f4       	brcc	.+2      	; 0x2716 <__gesf2+0x8>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	08 95       	ret

Disassembly of section .text:

00002728 <__mulsf3>:
    2728:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__mulsf3x>
    272c:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__fp_round>

Disassembly of section .text:

00000e7a <__mulsf3x>:
 e7a:	0f c0       	rjmp	.+30     	; 0xe9a <__mulsf3x+0x20>
 e7c:	0e 94 34 13 	call	0x2668	; 0x2668 <__fp_pscA>
 e80:	38 f0       	brcs	.+14     	; 0xe90 <__mulsf3x+0x16>
 e82:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fp_pscB>
 e86:	20 f0       	brcs	.+8      	; 0xe90 <__mulsf3x+0x16>
 e88:	95 23       	and	r25, r21
 e8a:	11 f0       	breq	.+4      	; 0xe90 <__mulsf3x+0x16>
 e8c:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>
 e90:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__fp_nan>
 e94:	11 24       	eor	r1, r1
 e96:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_szero>
 e9a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_split3>
 e9e:	70 f3       	brcs	.-36     	; 0xe7c <__mulsf3x+0x2>

00000ea0 <__mulsf3_pse>:
 ea0:	95 9f       	mul	r25, r21
 ea2:	c1 f3       	breq	.-16     	; 0xe94 <__mulsf3x+0x1a>
 ea4:	95 0f       	add	r25, r21
 ea6:	50 e0       	ldi	r21, 0x00	; 0
 ea8:	55 1f       	adc	r21, r21
 eaa:	62 9f       	mul	r22, r18
 eac:	f0 01       	movw	r30, r0
 eae:	72 9f       	mul	r23, r18
 eb0:	bb 27       	eor	r27, r27
 eb2:	f0 0d       	add	r31, r0
 eb4:	b1 1d       	adc	r27, r1
 eb6:	63 9f       	mul	r22, r19
 eb8:	aa 27       	eor	r26, r26
 eba:	f0 0d       	add	r31, r0
 ebc:	b1 1d       	adc	r27, r1
 ebe:	aa 1f       	adc	r26, r26
 ec0:	64 9f       	mul	r22, r20
 ec2:	66 27       	eor	r22, r22
 ec4:	b0 0d       	add	r27, r0
 ec6:	a1 1d       	adc	r26, r1
 ec8:	66 1f       	adc	r22, r22
 eca:	82 9f       	mul	r24, r18
 ecc:	22 27       	eor	r18, r18
 ece:	b0 0d       	add	r27, r0
 ed0:	a1 1d       	adc	r26, r1
 ed2:	62 1f       	adc	r22, r18
 ed4:	73 9f       	mul	r23, r19
 ed6:	b0 0d       	add	r27, r0
 ed8:	a1 1d       	adc	r26, r1
 eda:	62 1f       	adc	r22, r18
 edc:	83 9f       	mul	r24, r19
 ede:	a0 0d       	add	r26, r0
 ee0:	61 1d       	adc	r22, r1
 ee2:	22 1f       	adc	r18, r18
 ee4:	74 9f       	mul	r23, r20
 ee6:	33 27       	eor	r19, r19
 ee8:	a0 0d       	add	r26, r0
 eea:	61 1d       	adc	r22, r1
 eec:	23 1f       	adc	r18, r19
 eee:	84 9f       	mul	r24, r20
 ef0:	60 0d       	add	r22, r0
 ef2:	21 1d       	adc	r18, r1
 ef4:	82 2f       	mov	r24, r18
 ef6:	76 2f       	mov	r23, r22
 ef8:	6a 2f       	mov	r22, r26
 efa:	11 24       	eor	r1, r1
 efc:	9f 57       	subi	r25, 0x7F	; 127
 efe:	50 40       	sbci	r21, 0x00	; 0
 f00:	9a f0       	brmi	.+38     	; 0xf28 <__mulsf3_pse+0x88>
 f02:	f1 f0       	breq	.+60     	; 0xf40 <__mulsf3_pse+0xa0>
 f04:	88 23       	and	r24, r24
 f06:	4a f0       	brmi	.+18     	; 0xf1a <__mulsf3_pse+0x7a>
 f08:	ee 0f       	add	r30, r30
 f0a:	ff 1f       	adc	r31, r31
 f0c:	bb 1f       	adc	r27, r27
 f0e:	66 1f       	adc	r22, r22
 f10:	77 1f       	adc	r23, r23
 f12:	88 1f       	adc	r24, r24
 f14:	91 50       	subi	r25, 0x01	; 1
 f16:	50 40       	sbci	r21, 0x00	; 0
 f18:	a9 f7       	brne	.-22     	; 0xf04 <__mulsf3_pse+0x64>
 f1a:	9e 3f       	cpi	r25, 0xFE	; 254
 f1c:	51 05       	cpc	r21, r1
 f1e:	80 f0       	brcs	.+32     	; 0xf40 <__mulsf3_pse+0xa0>
 f20:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>
 f24:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__fp_szero>
 f28:	5f 3f       	cpi	r21, 0xFF	; 255
 f2a:	e4 f3       	brlt	.-8      	; 0xf24 <__mulsf3_pse+0x84>
 f2c:	98 3e       	cpi	r25, 0xE8	; 232
 f2e:	d4 f3       	brlt	.-12     	; 0xf24 <__mulsf3_pse+0x84>
 f30:	86 95       	lsr	r24
 f32:	77 95       	ror	r23
 f34:	67 95       	ror	r22
 f36:	b7 95       	ror	r27
 f38:	f7 95       	ror	r31
 f3a:	e7 95       	ror	r30
 f3c:	9f 5f       	subi	r25, 0xFF	; 255
 f3e:	c1 f7       	brne	.-16     	; 0xf30 <__mulsf3_pse+0x90>
 f40:	fe 2b       	or	r31, r30
 f42:	88 0f       	add	r24, r24
 f44:	91 1d       	adc	r25, r1
 f46:	96 95       	lsr	r25
 f48:	87 95       	ror	r24
 f4a:	97 f9       	bld	r25, 7
 f4c:	08 95       	ret

Disassembly of section .text:

000026d8 <__fp_inf>:
    26d8:	97 f9       	bld	r25, 7
    26da:	9f 67       	ori	r25, 0x7F	; 127
    26dc:	80 e8       	ldi	r24, 0x80	; 128
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	08 95       	ret

Disassembly of section .text:

00002730 <__fp_nan>:
    2730:	9f ef       	ldi	r25, 0xFF	; 255
    2732:	80 ec       	ldi	r24, 0xC0	; 192
    2734:	08 95       	ret

Disassembly of section .text:

00002668 <__fp_pscA>:
    2668:	00 24       	eor	r0, r0
    266a:	0a 94       	dec	r0
    266c:	16 16       	cp	r1, r22
    266e:	17 06       	cpc	r1, r23
    2670:	18 06       	cpc	r1, r24
    2672:	09 06       	cpc	r0, r25
    2674:	08 95       	ret

Disassembly of section .text:

00002676 <__fp_pscB>:
    2676:	00 24       	eor	r0, r0
    2678:	0a 94       	dec	r0
    267a:	12 16       	cp	r1, r18
    267c:	13 06       	cpc	r1, r19
    267e:	14 06       	cpc	r1, r20
    2680:	05 06       	cpc	r0, r21
    2682:	08 95       	ret

Disassembly of section .text:

0000247a <__fp_round>:
    247a:	09 2e       	mov	r0, r25
    247c:	03 94       	inc	r0
    247e:	00 0c       	add	r0, r0
    2480:	11 f4       	brne	.+4      	; 0x2486 <__fp_round+0xc>
    2482:	88 23       	and	r24, r24
    2484:	52 f0       	brmi	.+20     	; 0x249a <__fp_round+0x20>
    2486:	bb 0f       	add	r27, r27
    2488:	40 f4       	brcc	.+16     	; 0x249a <__fp_round+0x20>
    248a:	bf 2b       	or	r27, r31
    248c:	11 f4       	brne	.+4      	; 0x2492 <__fp_round+0x18>
    248e:	60 ff       	sbrs	r22, 0
    2490:	04 c0       	rjmp	.+8      	; 0x249a <__fp_round+0x20>
    2492:	6f 5f       	subi	r22, 0xFF	; 255
    2494:	7f 4f       	sbci	r23, 0xFF	; 255
    2496:	8f 4f       	sbci	r24, 0xFF	; 255
    2498:	9f 4f       	sbci	r25, 0xFF	; 255
    249a:	08 95       	ret

Disassembly of section .text.libgcc.div:

000023ba <__divmodhi4>:
    23ba:	97 fb       	bst	r25, 7
    23bc:	07 2e       	mov	r0, r23
    23be:	16 f4       	brtc	.+4      	; 0x23c4 <__divmodhi4+0xa>
    23c0:	00 94       	com	r0
    23c2:	07 d0       	rcall	.+14     	; 0x23d2 <__divmodhi4_neg1>
    23c4:	77 fd       	sbrc	r23, 7
    23c6:	09 d0       	rcall	.+18     	; 0x23da <__divmodhi4_neg2>
    23c8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__udivmodhi4>
    23cc:	07 fc       	sbrc	r0, 7
    23ce:	05 d0       	rcall	.+10     	; 0x23da <__divmodhi4_neg2>
    23d0:	3e f4       	brtc	.+14     	; 0x23e0 <__divmodhi4_exit>

000023d2 <__divmodhi4_neg1>:
    23d2:	90 95       	com	r25
    23d4:	81 95       	neg	r24
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	08 95       	ret

000023da <__divmodhi4_neg2>:
    23da:	70 95       	com	r23
    23dc:	61 95       	neg	r22
    23de:	7f 4f       	sbci	r23, 0xFF	; 255

000023e0 <__divmodhi4_exit>:
    23e0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002116 <__udivmodsi4>:
    2116:	a1 e2       	ldi	r26, 0x21	; 33
    2118:	1a 2e       	mov	r1, r26
    211a:	aa 1b       	sub	r26, r26
    211c:	bb 1b       	sub	r27, r27
    211e:	fd 01       	movw	r30, r26
    2120:	0d c0       	rjmp	.+26     	; 0x213c <__udivmodsi4_ep>

00002122 <__udivmodsi4_loop>:
    2122:	aa 1f       	adc	r26, r26
    2124:	bb 1f       	adc	r27, r27
    2126:	ee 1f       	adc	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	a2 17       	cp	r26, r18
    212c:	b3 07       	cpc	r27, r19
    212e:	e4 07       	cpc	r30, r20
    2130:	f5 07       	cpc	r31, r21
    2132:	20 f0       	brcs	.+8      	; 0x213c <__udivmodsi4_ep>
    2134:	a2 1b       	sub	r26, r18
    2136:	b3 0b       	sbc	r27, r19
    2138:	e4 0b       	sbc	r30, r20
    213a:	f5 0b       	sbc	r31, r21

0000213c <__udivmodsi4_ep>:
    213c:	66 1f       	adc	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	88 1f       	adc	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	1a 94       	dec	r1
    2146:	69 f7       	brne	.-38     	; 0x2122 <__udivmodsi4_loop>
    2148:	60 95       	com	r22
    214a:	70 95       	com	r23
    214c:	80 95       	com	r24
    214e:	90 95       	com	r25
    2150:	9b 01       	movw	r18, r22
    2152:	ac 01       	movw	r20, r24
    2154:	bd 01       	movw	r22, r26
    2156:	cf 01       	movw	r24, r30
    2158:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002334 <__divmodsi4>:
    2334:	05 2e       	mov	r0, r21
    2336:	97 fb       	bst	r25, 7
    2338:	1e f4       	brtc	.+6      	; 0x2340 <__divmodsi4+0xc>
    233a:	00 94       	com	r0
    233c:	0e 94 16 13 	call	0x262c	; 0x262c <__negsi2>
    2340:	57 fd       	sbrc	r21, 7
    2342:	07 d0       	rcall	.+14     	; 0x2352 <__divmodsi4_neg2>
    2344:	0e 94 8b 10 	call	0x2116	; 0x2116 <__udivmodsi4>
    2348:	07 fc       	sbrc	r0, 7
    234a:	03 d0       	rcall	.+6      	; 0x2352 <__divmodsi4_neg2>
    234c:	4e f4       	brtc	.+18     	; 0x2360 <__divmodsi4_exit>
    234e:	0c 94 16 13 	jmp	0x262c	; 0x262c <__negsi2>

00002352 <__divmodsi4_neg2>:
    2352:	50 95       	com	r21
    2354:	40 95       	com	r20
    2356:	30 95       	com	r19
    2358:	21 95       	neg	r18
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
    235c:	4f 4f       	sbci	r20, 0xFF	; 255
    235e:	5f 4f       	sbci	r21, 0xFF	; 255

00002360 <__divmodsi4_exit>:
    2360:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000262c <__negsi2>:
    262c:	90 95       	com	r25
    262e:	80 95       	com	r24
    2630:	70 95       	com	r23
    2632:	61 95       	neg	r22
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	8f 4f       	sbci	r24, 0xFF	; 255
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	08 95       	ret

Disassembly of section .text.libgcc:

000026e4 <__tablejump2__>:
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	05 90       	lpm	r0, Z+
    26ea:	f4 91       	lpm	r31, Z
    26ec:	e0 2d       	mov	r30, r0
    26ee:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

000024fa <__umulhisi3>:
    24fa:	a2 9f       	mul	r26, r18
    24fc:	b0 01       	movw	r22, r0
    24fe:	b3 9f       	mul	r27, r19
    2500:	c0 01       	movw	r24, r0
    2502:	a3 9f       	mul	r26, r19
    2504:	70 0d       	add	r23, r0
    2506:	81 1d       	adc	r24, r1
    2508:	11 24       	eor	r1, r1
    250a:	91 1d       	adc	r25, r1
    250c:	b2 9f       	mul	r27, r18
    250e:	70 0d       	add	r23, r0
    2510:	81 1d       	adc	r24, r1
    2512:	11 24       	eor	r1, r1
    2514:	91 1d       	adc	r25, r1
    2516:	08 95       	ret

Disassembly of section .text.libgcc:

0000263c <__xload_2>:
    263c:	57 fd       	sbrc	r21, 7
    263e:	03 c0       	rjmp	.+6      	; 0x2646 <__xload_2+0xa>
    2640:	65 91       	lpm	r22, Z+
    2642:	75 91       	lpm	r23, Z+
    2644:	08 95       	ret
    2646:	61 91       	ld	r22, Z+
    2648:	71 91       	ld	r23, Z+
    264a:	08 95       	ret

Disassembly of section .text.libgcc.div:

000023e2 <__udivmodhi4>:
    23e2:	aa 1b       	sub	r26, r26
    23e4:	bb 1b       	sub	r27, r27
    23e6:	51 e1       	ldi	r21, 0x11	; 17
    23e8:	07 c0       	rjmp	.+14     	; 0x23f8 <__udivmodhi4_ep>

000023ea <__udivmodhi4_loop>:
    23ea:	aa 1f       	adc	r26, r26
    23ec:	bb 1f       	adc	r27, r27
    23ee:	a6 17       	cp	r26, r22
    23f0:	b7 07       	cpc	r27, r23
    23f2:	10 f0       	brcs	.+4      	; 0x23f8 <__udivmodhi4_ep>
    23f4:	a6 1b       	sub	r26, r22
    23f6:	b7 0b       	sbc	r27, r23

000023f8 <__udivmodhi4_ep>:
    23f8:	88 1f       	adc	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	5a 95       	dec	r21
    23fe:	a9 f7       	brne	.-22     	; 0x23ea <__udivmodhi4_loop>
    2400:	80 95       	com	r24
    2402:	90 95       	com	r25
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00002742 <_fini>:
    2742:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00002744 <__funcs_on_exit>:
    2744:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00002746 <__simulator_exit>:
    2746:	08 95       	ret

Disassembly of section .text.exit:

000025e0 <exit>:
    25e0:	ec 01       	movw	r28, r24
    25e2:	0e 94 a2 13 	call	0x2744	; 0x2744 <__funcs_on_exit>
    25e6:	0e 94 a1 13 	call	0x2742	; 0x2742 <_fini>
    25ea:	ce 01       	movw	r24, r28
    25ec:	0e 94 a3 13 	call	0x2746	; 0x2746 <__simulator_exit>
    25f0:	ce 01       	movw	r24, r28
    25f2:	0e 94 9d 13 	call	0x273a	; 0x273a <_Exit>

Disassembly of section .text.memcpy:

000022d2 <memcpy>:
    22d2:	cf 92       	push	r12
    22d4:	df 92       	push	r13
    22d6:	ef 92       	push	r14
    22d8:	6a 01       	movw	r12, r20
    22da:	e6 2e       	mov	r14, r22
    22dc:	dc 01       	movw	r26, r24
    22de:	28 0f       	add	r18, r24
    22e0:	39 1f       	adc	r19, r25
    22e2:	a2 17       	cp	r26, r18
    22e4:	b3 07       	cpc	r27, r19
    22e6:	51 f0       	breq	.+20     	; 0x22fc <memcpy+0x2a>
    22e8:	f6 01       	movw	r30, r12
    22ea:	44 91       	lpm	r20, Z
    22ec:	e7 fc       	sbrc	r14, 7
    22ee:	40 81       	ld	r20, Z
    22f0:	4d 93       	st	X+, r20
    22f2:	4f ef       	ldi	r20, 0xFF	; 255
    22f4:	c4 1a       	sub	r12, r20
    22f6:	d4 0a       	sbc	r13, r20
    22f8:	e4 0a       	sbc	r14, r20
    22fa:	f3 cf       	rjmp	.-26     	; 0x22e2 <memcpy+0x10>
    22fc:	ef 90       	pop	r14
    22fe:	df 90       	pop	r13
    2300:	cf 90       	pop	r12
    2302:	08 95       	ret

Disassembly of section .text._Exit:

0000273a <_Exit>:
    273a:	0e 94 66 00 	call	0xcc	; 0xcc <_exit>

Disassembly of section .text.avrlibc:

0000261a <eeprom_read_byte>:
    261a:	cb 01       	movw	r24, r22
    261c:	e1 99       	sbic	0x1c, 1	; 28
    261e:	fe cf       	rjmp	.-4      	; 0x261c <eeprom_read_byte+0x2>
    2620:	9f bb       	out	0x1f, r25	; 31
    2622:	8e bb       	out	0x1e, r24	; 30
    2624:	e0 9a       	sbi	0x1c, 0	; 28
    2626:	99 27       	eor	r25, r25
    2628:	8d b3       	in	r24, 0x1d	; 29
    262a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000249c <eeprom_update_byte>:
    249c:	26 2f       	mov	r18, r22

0000249e <eeprom_update_r18>:
    249e:	e1 99       	sbic	0x1c, 1	; 28
    24a0:	fe cf       	rjmp	.-4      	; 0x249e <eeprom_update_r18>
    24a2:	9f bb       	out	0x1f, r25	; 31
    24a4:	8e bb       	out	0x1e, r24	; 30
    24a6:	e0 9a       	sbi	0x1c, 0	; 28
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	0d b2       	in	r0, 0x1d	; 29
    24ac:	02 16       	cp	r0, r18
    24ae:	31 f0       	breq	.+12     	; 0x24bc <eeprom_update_r18+0x1e>
    24b0:	2d bb       	out	0x1d, r18	; 29
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	e2 9a       	sbi	0x1c, 2	; 28
    24b8:	e1 9a       	sbi	0x1c, 1	; 28
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	08 95       	ret

Disassembly of section .text.avrlibc:

0000256a <eeprom_write_byte>:
    256a:	26 2f       	mov	r18, r22

0000256c <eeprom_write_r18>:
    256c:	e1 99       	sbic	0x1c, 1	; 28
    256e:	fe cf       	rjmp	.-4      	; 0x256c <eeprom_write_r18>
    2570:	9f bb       	out	0x1f, r25	; 31
    2572:	8e bb       	out	0x1e, r24	; 30
    2574:	2d bb       	out	0x1d, r18	; 29
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	e2 9a       	sbi	0x1c, 2	; 28
    257c:	e1 9a       	sbi	0x1c, 1	; 28
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	08 95       	ret
