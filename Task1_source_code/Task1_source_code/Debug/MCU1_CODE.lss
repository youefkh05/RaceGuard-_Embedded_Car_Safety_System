
MCU1_CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d0  0000026a  2**0
                  ALLOC
  2 .bss          00000010  00800060  00800060  000028c7  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000028c7  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000016c  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00002a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a153  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000189b  00000000  00000000  0000d1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c67  00000000  00000000  0000ea96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010ac  00000000  00000000  00012700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ff  00000000  00000000  000137ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005704  00000000  00000000  000140ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  000197af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00002760  00002760  000028b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00019d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .progmemx.data 00000046  000000d0  000000d0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.tmp     000000e2  00000a52  00000a52  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Free_RTOS_Init 00000120  000003de  000003de  00000532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Initialize_E2PROM_State 00000016  000025de  000025de  00002732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Read_E2PROM_State 0000000c  000026ae  000026ae  00002802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.App_Init 0000006c  00001b82  00001b82  00001cd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.check_State 00000084  00001744  00001744  00001898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.eestate 0000001e  000024e8  000024e8  0000263c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.handle_State 00000142  0000029c  0000029c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.fan1    000000aa  0000130e  0000130e  00001462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.UART_Transmit_State 0000004a  00002022  00002022  00002176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.uart    00000040  00002208  00002208  0000235c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.emergency 00000180  0000011c  0000011c  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_1 00000082  000017c8  000017c8  0000191c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .data.EEPROM_State_Add 00000001  008006e5  0000011b  0000026f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .data.Speed_Scale 00000001  008006e6  00002772  000028c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .bss.temperature 00000002  008006d3  008006d3  000028c7  2**0
                  ALLOC
 32 .bss.temp_counter 00000001  008006e7  008006e7  000028c7  2**0
                  ALLOC
 33 .bss.bot1_intur 00000001  008006e8  008006e8  000028c7  2**0
                  ALLOC
 34 .bss.reset    00000001  008006e9  008006e9  000028c7  2**0
                  ALLOC
 35 .bss.DC_fan1  00000001  008006ea  008006ea  000028c7  2**0
                  ALLOC
 36 .bss.emergency_counter 00000001  008006eb  008006eb  000028c7  2**0
                  ALLOC
 37 .bss.emergency_flag 00000001  008006ec  008006ec  000028c7  2**0
                  ALLOC
 38 .bss.buttonPressed 00000001  008006ed  008006ed  000028c7  2**0
                  ALLOC
 39 .bss.currentState 00000001  008006ee  008006ee  000028c7  2**0
                  ALLOC
 40 .text.LCD_voidWriteBitsToSend 000000b8  00001048  00001048  0000119c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.LCD_voidWriteData 00000018  000025ae  000025ae  00002702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.LCD_voidWriteCommand 00000018  000025c6  000025c6  0000271a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.LCD_voidInit 00000068  00001c58  00001c58  00001dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.LCD_voidWriteString 0000002c  0000238c  0000238c  000024e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.LCD_voidGoToXY 0000003e  00002248  00002248  0000239c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.LCD_voidWriteNumber 0000007c  0000184a  0000184a  0000199e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.LED1_Initialize 0000000c  000026ba  000026ba  0000280e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.LED1_ON 0000000c  000026c6  000026c6  0000281a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.LED1_OFF 0000000c  000026d2  000026d2  00002826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.Initialize_TEMP_SENSOR 0000000c  000026de  000026de  00002832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.Read_TEMP_SENSOR 00000030  0000232e  0000232e  00002482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.DC_Initialize 00000052  00001ee8  00001ee8  0000203c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.DC_Start 00000090  0000162e  0000162e  00001782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.DC_Stop 0000004e  00001f3a  00001f3a  0000208e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.DC_Change_Speed 0000001e  00002506  00002506  0000265a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.main    00000012  00002620  00002620  00002774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.ADC_Initialize 0000000e  00002676  00002676  000027ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.ADC_Read 00000074  00001a30  00001a30  00001b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.DIO_SetPinDirection 000000e2  00000b34  00000b34  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.DIO_SetPinValue 000000e2  00000c16  00000c16  00000d6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.External_Interrupt0_Initalize 00000058  00001e3c  00001e3c  00001f90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.UART_Initialize_WithoutInterrupt 00000120  000004fe  000004fe  00000652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.UART_Transmit_Character 0000000a  0000271a  0000271a  0000286e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.UART_Transmit_Word 0000001c  00002542  00002542  00002696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.pvPortMalloc 0000006a  00001bee  00001bee  00001d42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.vPortFree 00000002  00002768  00002768  000028bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .bss.pucAlignedHeap.2045 00000002  008006d5  008006d5  000028c7  2**0
                  ALLOC
 68 .bss.xNextFreeByte 00000002  008006d7  008006d7  000028c7  2**0
                  ALLOC
 69 .bss.ucHeap   000005dc  00800070  00800070  000028c7  2**0
                  ALLOC
 70 .text.vListInitialise 0000001c  0000255e  0000255e  000026b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.vListInitialiseItem 00000008  00002742  00002742  00002896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.vListInsertEnd 00000042  00002184  00002184  000022d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.vListInsert 00000062  00001cc0  00001cc0  00001e14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.uxListRemove 0000004e  00001f88  00001f88  000020dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.prvSetupTimerInterrupt 00000012  00002632  00002632  00002786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.pxPortInitialiseStack 000000d8  00000cf8  00000cf8  00000e4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.xPortStartScheduler 0000005e  00001d22  00001d22  00001e76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.vPortEndScheduler 00000002  0000276a  0000276a  000028be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.vPortYield 000000b2  00001100  00001100  00001254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_7 00000048  0000206c  0000206c  000021c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.prvIsQueueEmpty 00000026  00002434  00002434  00002588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.prvIsQueueFull 00000038  000022c4  000022c4  00002418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.prvCopyDataToQueue 00000092  0000159c  0000159c  000016f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.prvUnlockQueue 00000070  00001aa4  00001aa4  00001bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.xQueueGenericReset 00000086  000016be  000016be  00001812  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.prvInitialiseNewQueue 00000026  0000245a  0000245a  000025ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.xQueueGenericCreate 00000054  00001e94  00001e94  00001fe8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.xQueueGenericSend 0000011e  0000061e  0000061e  00000772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.xQueueSemaphoreTake 00000108  00000850  00000850  000009a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.prvTaskIsTaskSuspended 00000042  000021c6  000021c6  0000231a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.prvResetNextTaskUnblockTime 0000003e  00002286  00002286  000023da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.prvDeleteTCB 0000001a  0000257a  0000257a  000026ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.prvInitialiseNewTask 000000fa  00000958  00000958  00000aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.prvInitialiseTaskLists 0000006e  00001b14  00001b14  00001c68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.prvAddNewTaskToReadyList 000000ac  00001262  00001262  000013b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.prvCheckTasksWaitingTermination 0000004c  00001fd6  00001fd6  0000212a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.prvIdleTask 0000000a  00002724  00002724  00002878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.prvAddCurrentTaskToDelayedList 000000b0  000011b2  000011b2  00001306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.xTaskCreate 000000d0  00000f78  00000f78  000010cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.vTaskResume 00000078  00001940  00001940  00001a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data 00000005  00000116  00000116  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .text.vTaskStartScheduler 0000005e  00001d80  00001d80  00001ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.vTaskEndScheduler 0000000c  000026ea  000026ea  0000283e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.vTaskSuspendAll 0000000c  000026f6  000026f6  0000284a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.xTaskIncrementTick 00000114  0000073c  0000073c  00000890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.xTaskResumeAll 000000d4  00000dd0  00000dd0  00000f24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.vTaskDelay 0000002c  000023b8  000023b8  0000250c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.vTaskSwitchContext 000000a8  000013b8  000013b8  0000150c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.vTaskSuspend 000000a4  00001460  00001460  000015b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.vTaskPlaceOnEventList 00000024  00002480  00002480  000025d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.xTaskRemoveFromEventList 00000098  00001504  00001504  00001658  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .text.vTaskInternalSetTimeOutState 00000016  000025f4  000025f4  00002748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 .text.xTaskCheckForTimeOut 00000078  000019b8  000019b8  00001b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.vTaskMissedYield 00000008  0000274a  0000274a  0000289e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .bss.uxSchedulerSuspended 00000001  008006ef  008006ef  000028c7  2**0
                  ALLOC
116 .bss.xIdleTaskHandle 00000002  008006d9  008006d9  000028c7  2**0
                  ALLOC
117 .bss.xNextTaskUnblockTime 00000002  008006db  008006db  000028c7  2**0
                  ALLOC
118 .bss.uxTaskNumber 00000001  008006f0  008006f0  000028c7  2**0
                  ALLOC
119 .bss.xNumOfOverflows 00000001  008006f1  008006f1  000028c7  2**0
                  ALLOC
120 .bss.xYieldPending 00000001  008006f2  008006f2  000028c7  2**0
                  ALLOC
121 .bss.uxPendedTicks 00000001  008006f3  008006f3  000028c7  2**0
                  ALLOC
122 .bss.xSchedulerRunning 00000001  008006f4  008006f4  000028c7  2**0
                  ALLOC
123 .bss.uxTopReadyPriority 00000001  008006f5  008006f5  000028c7  2**0
                  ALLOC
124 .bss.xTickCount 00000002  008006dd  008006dd  000028c7  2**0
                  ALLOC
125 .bss.uxCurrentNumberOfTasks 00000001  008006f6  008006f6  000028c7  2**0
                  ALLOC
126 .bss.xSuspendedTaskList 00000009  008006a6  008006a6  000028c7  2**0
                  ALLOC
127 .bss.uxDeletedTasksWaitingCleanUp 00000001  008006f7  008006f7  000028c7  2**0
                  ALLOC
128 .bss.xTasksWaitingTermination 00000009  008006af  008006af  000028c7  2**0
                  ALLOC
129 .bss.xPendingReadyList 00000009  008006b8  008006b8  000028c7  2**0
                  ALLOC
130 .bss.pxOverflowDelayedTaskList 00000002  008006df  008006df  000028c7  2**0
                  ALLOC
131 .bss.pxDelayedTaskList 00000002  008006e1  008006e1  000028c7  2**0
                  ALLOC
132 .bss.xDelayedTaskList2 00000009  008006c1  008006c1  000028c7  2**0
                  ALLOC
133 .bss.xDelayedTaskList1 00000009  008006ca  008006ca  000028c7  2**0
                  ALLOC
134 .bss.pxReadyTasksLists 0000005a  0080064c  0080064c  000028c7  2**0
                  ALLOC
135 .bss.pxCurrentTCB 00000002  008006e3  008006e3  000028c7  2**0
                  ALLOC
136 .text         0000000a  0000272e  0000272e  00002882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 .text         0000005e  00001dde  00001dde  00001f32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 .text         0000007a  000018c6  000018c6  00001a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 .text         00000048  000020b4  000020b4  00002208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 .text         00000044  000020fc  000020fc  00002250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 .text         0000000e  00002684  00002684  000027d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 .text         0000000a  00002738  00002738  0000288c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 .text         00000008  00002752  00002752  000028a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 .text         000000d4  00000ea4  00000ea4  00000ff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 .text         0000000c  00002702  00002702  00002856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 .text         00000006  0000275a  0000275a  000028ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 .text         0000000e  00002692  00002692  000027e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 .text         0000000e  000026a0  000026a0  000027f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 .text         00000022  000024a4  000024a4  000025f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 .text.libgcc.div 00000028  000023e4  000023e4  00002538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 .text.libgcc.div 00000044  00002140  00002140  00002294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 .text.libgcc.div 0000002e  0000235e  0000235e  000024b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 .text.libgcc.div 00000010  00002656  00002656  000027aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 .text.libgcc  0000000c  0000270e  0000270e  00002862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 .text.libgcc.mul 0000001e  00002524  00002524  00002678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 .text.libgcc  00000010  00002666  00002666  000027ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 .text.libgcc.div 00000028  0000240c  0000240c  00002560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 .text.__dummy_fini 00000002  0000276c  0000276c  000028c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 .text.__dummy_funcs_on_exit 00000002  0000276e  0000276e  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 .text.__dummy_simulator_exit 00000002  00002770  00002770  000028c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 .text.exit    00000016  0000260a  0000260a  0000275e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 .text.memcpy  00000032  000022fc  000022fc  00002450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 .text._Exit   00000004  00002764  00002764  000028b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 .text.avrlibc 00000012  00002644  00002644  00002798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text.avrlibc 00000022  000024c6  000024c6  0000261a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text.avrlibc 0000001a  00002594  00002594  000026e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__vector_1>
   8:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
   c:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  10:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  14:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  18:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  1c:	0c 94 36 10 	jmp	0x206c	; 0x206c <__vector_7>
  20:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  24:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  28:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  2c:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  30:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  34:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  38:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  3c:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  40:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  44:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  48:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  4c:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  50:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__bad_interrupt>
  54:	25 0d       	add	r18, r5
  56:	29 0d       	add	r18, r9
  58:	2e 0d       	add	r18, r14
  5a:	33 0d       	add	r19, r3
  5c:	38 0d       	add	r19, r8
  5e:	3d 0d       	add	r19, r13
  60:	42 0d       	add	r20, r2
  62:	47 0d       	add	r20, r7

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	06 e5       	ldi	r16, 0x56	; 86
  68:	80 06       	cpc	r8, r16
  6a:	e5 06       	cpc	r14, r21
  6c:	e6 00       	.word	0x00e6	; ????
  6e:	01 1b       	sub	r16, r17
  70:	06 e6       	ldi	r16, 0x66	; 102
  72:	06 e7       	ldi	r16, 0x76	; 118
  74:	00 27       	eor	r16, r16
  76:	72 06       	cpc	r7, r18
  78:	e7 06       	cpc	r14, r23
  7a:	f8 80       	ld	r15, Y

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	e4 e6       	ldi	r30, 0x64	; 100
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	17 c0       	rjmp	.+46     	; 0xbe <__do_clear_bss+0x8>
  90:	b5 91       	lpm	r27, Z+
  92:	a5 91       	lpm	r26, Z+
  94:	35 91       	lpm	r19, Z+
  96:	25 91       	lpm	r18, Z+
  98:	05 91       	lpm	r16, Z+
  9a:	07 fd       	sbrc	r16, 7
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <__do_clear_bss>
  9e:	95 91       	lpm	r25, Z+
  a0:	85 91       	lpm	r24, Z+
  a2:	ef 01       	movw	r28, r30
  a4:	f9 2f       	mov	r31, r25
  a6:	e8 2f       	mov	r30, r24
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x20>
  b2:	fe 01       	movw	r30, r28
  b4:	04 c0       	rjmp	.+8      	; 0xbe <__do_clear_bss+0x8>

000000b6 <__do_clear_bss>:
  b6:	1d 92       	st	X+, r1
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__do_clear_bss>
  be:	ec 37       	cpi	r30, 0x7C	; 124
  c0:	f4 07       	cpc	r31, r20
  c2:	31 f7       	brne	.-52     	; 0x90 <__do_copy_data+0x8>
  c4:	0e 94 10 13 	call	0x2620	; 0x2620 <main>
  c8:	0c 94 05 13 	jmp	0x260a	; 0x260a <exit>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>

Disassembly of section .text:

00002760 <__bad_interrupt>:
    2760:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.tmp:

00000a52 <tmp>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
 a52:	0e 94 97 11 	call	0x232e	; 0x232e <Read_TEMP_SENSOR>
 a56:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <temperature+0x1>
 a5a:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <temperature>
 a5e:	6a e0       	ldi	r22, 0x0A	; 10
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
 a66:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
 a6a:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	71 f5       	brne	.+92     	; 0xace <tmp+0x7c>
 a72:	60 e0       	ldi	r22, 0x00	; 0
 a74:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidGoToXY>
 a78:	80 ed       	ldi	r24, 0xD0	; 208
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	a0 e0       	ldi	r26, 0x00	; 0
 a7e:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_voidWriteString>
 a82:	64 e0       	ldi	r22, 0x04	; 4
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidGoToXY>
 a8a:	85 ed       	ldi	r24, 0xD5	; 213
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	a0 e0       	ldi	r26, 0x00	; 0
 a90:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_voidWriteString>
 a94:	64 e0       	ldi	r22, 0x04	; 4
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidGoToXY>
 a9c:	60 91 d3 06 	lds	r22, 0x06D3	; 0x8006d3 <temperature>
 aa0:	70 91 d4 06 	lds	r23, 0x06D4	; 0x8006d4 <temperature+0x1>
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_voidWriteNumber>
 aac:	80 ee       	ldi	r24, 0xE0	; 224
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	a0 e0       	ldi	r26, 0x00	; 0
 ab2:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_voidWriteString>
 ab6:	00 e0       	ldi	r16, 0x00	; 0
 ab8:	20 e0       	ldi	r18, 0x00	; 0
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	40 e0       	ldi	r20, 0x00	; 0
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
 ac6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
 aca:	0e 94 0f 03 	call	0x61e	; 0x61e <xQueueGenericSend>
 ace:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 ad2:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 ad6:	c2 97       	sbiw	r24, 0x32	; 50
 ad8:	c0 f0       	brcs	.+48     	; 0xb0a <tmp+0xb8>
 ada:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <emergency_flag>
 ade:	81 11       	cpse	r24, r1
 ae0:	0f c0       	rjmp	.+30     	; 0xb00 <tmp+0xae>
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <emergency_flag>
 ae8:	00 e0       	ldi	r16, 0x00	; 0
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	40 e0       	ldi	r20, 0x00	; 0
 af0:	50 e0       	ldi	r21, 0x00	; 0
 af2:	60 e0       	ldi	r22, 0x00	; 0
 af4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 af8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 afc:	0e 94 0f 03 	call	0x61e	; 0x61e <xQueueGenericSend>
 b00:	84 e0       	ldi	r24, 0x04	; 4
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vTaskDelay>
 b08:	a4 cf       	rjmp	.-184    	; 0xa52 <tmp>
 b0a:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <emergency_flag>
 b0e:	81 30       	cpi	r24, 0x01	; 1
 b10:	61 f4       	brne	.+24     	; 0xb2a <tmp+0xd8>
 b12:	00 e0       	ldi	r16, 0x00	; 0
 b14:	20 e0       	ldi	r18, 0x00	; 0
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	40 e0       	ldi	r20, 0x00	; 0
 b1a:	50 e0       	ldi	r21, 0x00	; 0
 b1c:	60 e0       	ldi	r22, 0x00	; 0
 b1e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 b22:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 b26:	0e 94 0f 03 	call	0x61e	; 0x61e <xQueueGenericSend>
 b2a:	82 e1       	ldi	r24, 0x12	; 18
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vTaskDelay>
 b32:	8f cf       	rjmp	.-226    	; 0xa52 <tmp>

Disassembly of section .text.Free_RTOS_Init:

000003de <Free_RTOS_Init>:
 3de:	cf 92       	push	r12
 3e0:	df 92       	push	r13
 3e2:	ef 92       	push	r14
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	43 e0       	ldi	r20, 0x03	; 3
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericCreate>
 3f2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Bot1_Semaphore+0x1>
 3f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Bot1_Semaphore>
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
 402:	43 e0       	ldi	r20, 0x03	; 3
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericCreate>
 40c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LCD_Semaphore+0x1>
 410:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LCD_Semaphore>
 414:	00 e0       	ldi	r16, 0x00	; 0
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	0e 94 0f 03 	call	0x61e	; 0x61e <xQueueGenericSend>
 424:	43 e0       	ldi	r20, 0x03	; 3
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <xQueueGenericCreate>
 42e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Emer_Semaphore+0x1>
 432:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Emer_Semaphore>
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
 43e:	0f 2e       	mov	r0, r31
 440:	fe e6       	ldi	r31, 0x6E	; 110
 442:	cf 2e       	mov	r12, r31
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	df 2e       	mov	r13, r31
 448:	f0 2d       	mov	r31, r0
 44a:	e1 2c       	mov	r14, r1
 44c:	00 e0       	ldi	r16, 0x00	; 0
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	24 e6       	ldi	r18, 0x64	; 100
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	42 ee       	ldi	r20, 0xE2	; 226
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	89 e2       	ldi	r24, 0x29	; 41
 45c:	95 e0       	ldi	r25, 0x05	; 5
 45e:	0e 94 bc 07 	call	0xf78	; 0xf78 <xTaskCreate>
 462:	0f 2e       	mov	r0, r31
 464:	f6 e6       	ldi	r31, 0x66	; 102
 466:	cf 2e       	mov	r12, r31
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	df 2e       	mov	r13, r31
 46c:	f0 2d       	mov	r31, r0
 46e:	0f 2e       	mov	r0, r31
 470:	f3 e0       	ldi	r31, 0x03	; 3
 472:	ef 2e       	mov	r14, r31
 474:	f0 2d       	mov	r31, r0
 476:	24 e6       	ldi	r18, 0x64	; 100
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	4b ee       	ldi	r20, 0xEB	; 235
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	84 e0       	ldi	r24, 0x04	; 4
 482:	91 e1       	ldi	r25, 0x11	; 17
 484:	0e 94 bc 07 	call	0xf78	; 0xf78 <xTaskCreate>
 488:	0f 2e       	mov	r0, r31
 48a:	f0 e6       	ldi	r31, 0x60	; 96
 48c:	cf 2e       	mov	r12, r31
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	df 2e       	mov	r13, r31
 492:	f0 2d       	mov	r31, r0
 494:	e1 2c       	mov	r14, r1
 496:	24 e6       	ldi	r18, 0x64	; 100
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	45 ef       	ldi	r20, 0xF5	; 245
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	84 e7       	ldi	r24, 0x74	; 116
 4a2:	92 e1       	ldi	r25, 0x12	; 18
 4a4:	0e 94 bc 07 	call	0xf78	; 0xf78 <xTaskCreate>
 4a8:	0f 2e       	mov	r0, r31
 4aa:	f4 e6       	ldi	r31, 0x64	; 100
 4ac:	cf 2e       	mov	r12, r31
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	df 2e       	mov	r13, r31
 4b2:	f0 2d       	mov	r31, r0
 4b4:	68 94       	set
 4b6:	ee 24       	eor	r14, r14
 4b8:	e1 f8       	bld	r14, 1
 4ba:	24 e6       	ldi	r18, 0x64	; 100
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	42 e0       	ldi	r20, 0x02	; 2
 4c0:	51 e0       	ldi	r21, 0x01	; 1
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	87 e8       	ldi	r24, 0x87	; 135
 4c6:	99 e0       	ldi	r25, 0x09	; 9
 4c8:	0e 94 bc 07 	call	0xf78	; 0xf78 <xTaskCreate>
 4cc:	0f 2e       	mov	r0, r31
 4ce:	fc e6       	ldi	r31, 0x6C	; 108
 4d0:	cf 2e       	mov	r12, r31
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	df 2e       	mov	r13, r31
 4d6:	f0 2d       	mov	r31, r0
 4d8:	0f 2e       	mov	r0, r31
 4da:	f5 e0       	ldi	r31, 0x05	; 5
 4dc:	ef 2e       	mov	r14, r31
 4de:	f0 2d       	mov	r31, r0
 4e0:	24 e6       	ldi	r18, 0x64	; 100
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	4c e0       	ldi	r20, 0x0C	; 12
 4e6:	51 e0       	ldi	r21, 0x01	; 1
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	8e e8       	ldi	r24, 0x8E	; 142
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 bc 07 	call	0xf78	; 0xf78 <xTaskCreate>
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

Disassembly of section .text.Initialize_E2PROM_State:

000025de <Initialize_E2PROM_State>:
}

void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	85 ee       	ldi	r24, 0xE5	; 229
    25e2:	96 e0       	ldi	r25, 0x06	; 6
    25e4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <eeprom_update_byte>
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	85 ee       	ldi	r24, 0xE5	; 229
    25ec:	96 e0       	ldi	r25, 0x06	; 6
    25ee:	0e 94 63 12 	call	0x24c6	; 0x24c6 <eeprom_update_byte>
    25f2:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

000026ae <Read_E2PROM_State>:
}

uint8_t Read_E2PROM_State (void){
	
	/*	read the state	*/
	uint8_t x= eeprom_read_byte (&EEPROM_State_Add); 		
    26ae:	65 ee       	ldi	r22, 0xE5	; 229
    26b0:	76 e0       	ldi	r23, 0x06	; 6
    26b2:	80 e8       	ldi	r24, 0x80	; 128
    26b4:	0e 94 22 13 	call	0x2644	; 0x2644 <eeprom_read_byte>
	return x;
}
    26b8:	08 95       	ret

Disassembly of section .text.App_Init:

00001b82 <App_Init>:
TaskHandle_t xHanleFan1;
TaskHandle_t xHanleEmergency;

uint8_t EEPROM_State_Add=0b01000000;	//any place

void App_Init(void){
    1b82:	0f 93       	push	r16
	/*		Initializations		*/
	DC_Initialize(DC_fan1);
    1b84:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <DC_fan1>
    1b88:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <DC_Initialize>
	Initialize_E2PROM_State();
    1b8c:	0e 94 ef 12 	call	0x25de	; 0x25de <Initialize_E2PROM_State>
	Initialize_TEMP_SENSOR();
    1b90:	0e 94 6f 13 	call	0x26de	; 0x26de <Initialize_TEMP_SENSOR>
	ADC_Initialize(AVCC,ADC_PRE0);
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	0e 94 3b 13 	call	0x2676	; 0x2676 <ADC_Initialize>
	LCD_voidInit();
    1b9c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <LCD_voidInit>
	LED1_Initialize();
    1ba0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LED1_Initialize>
	LED1_OFF();
    1ba4:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LED1_OFF>
	
	DIO_SetPinDirection(BOT1_PORT,BOT1_PIN,DIO_INPUT); //push button
    1ba8:	8b b3       	in	r24, 0x1b	; 27
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
	//Timer0_OVF_WithInterrupt_Initialize();
	
	uart_status UART_State= UART_Initialize_WithoutInterrupt(UART_9600,Synchronous, Disable , Bits_8, Bit_1);
    1bb2:	00 e0       	ldi	r16, 0x00	; 0
    1bb4:	23 e0       	ldi	r18, 0x03	; 3
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	80 e6       	ldi	r24, 0x60	; 96
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_Initialize_WithoutInterrupt>
	if(UART_State==UART_NOK){
    1bc2:	88 23       	and	r24, r24
    1bc4:	91 f0       	breq	.+36     	; 0x1bea <App_Init+0x68>
		return ;
	}

	External_Interrupt0_Initalize(INT0_RISING);
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <External_Interrupt0_Initalize>

	// Read initial state from EEPROM
	uint8_t x= Read_E2PROM_State();
    1bcc:	0e 94 57 13 	call	0x26ae	; 0x26ae <Read_E2PROM_State>
	if (x==0)
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <App_Init+0x5c>
	{
		DC_Start(DC_fan1,DC_CW);
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	80 91 ea 06 	lds	r24, 0x06EA	; 0x8006ea <DC_fan1>
    1bda:	0e 94 17 0b 	call	0x162e	; 0x162e <DC_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bde:	8f e1       	ldi	r24, 0x1F	; 31
    1be0:	9e e4       	ldi	r25, 0x4E	; 78
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <App_Init+0x60>
    1be6:	00 c0       	rjmp	.+0      	; 0x1be8 <App_Init+0x66>
    1be8:	00 00       	nop
	}
	_delay_ms(10);
	
}
    1bea:	0f 91       	pop	r16
    1bec:	08 95       	ret

Disassembly of section .text.check_State:

00001744 <check_State>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	8b 01       	movw	r16, r22
    1756:	ea 01       	movw	r28, r20
    1758:	bc 01       	movw	r22, r24
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatunsisf>
    1762:	6b 01       	movw	r12, r22
    1764:	7c 01       	movw	r14, r24
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	48 e4       	ldi	r20, 0x48	; 72
    176c:	52 e4       	ldi	r21, 0x42	; 66
    176e:	0e 94 97 13 	call	0x272e	; 0x272e <__cmpsf2>
    1772:	88 23       	and	r24, r24
    1774:	64 f4       	brge	.+24     	; 0x178e <check_State+0x4a>
    1776:	88 81       	ld	r24, Y
    1778:	88 23       	and	r24, r24
    177a:	49 f0       	breq	.+18     	; 0x178e <check_State+0x4a>
    177c:	f8 01       	movw	r30, r16
    177e:	10 82       	st	Z, r1
    1780:	18 82       	st	Y, r1
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	85 ee       	ldi	r24, 0xE5	; 229
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	0e 94 ca 12 	call	0x2594	; 0x2594 <eeprom_write_byte>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <check_State+0x72>
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	48 e4       	ldi	r20, 0x48	; 72
    1794:	52 e4       	ldi	r21, 0x42	; 66
    1796:	c7 01       	movw	r24, r14
    1798:	b6 01       	movw	r22, r12
    179a:	0e 94 9c 13 	call	0x2738	; 0x2738 <__gesf2>
    179e:	88 23       	and	r24, r24
    17a0:	54 f0       	brlt	.+20     	; 0x17b6 <check_State+0x72>
    17a2:	88 81       	ld	r24, Y
    17a4:	81 11       	cpse	r24, r1
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <check_State+0x72>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	88 83       	st	Y, r24
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	85 ee       	ldi	r24, 0xE5	; 229
    17b0:	96 e0       	ldi	r25, 0x06	; 6
    17b2:	0e 94 ca 12 	call	0x2594	; 0x2594 <eeprom_write_byte>
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	08 95       	ret

Disassembly of section .text.eestate:

000024e8 <eestate>:
}

void eestate(void *par){
	
	while(1){
		check_State(temperature,&temp_counter,&currentState);
    24e8:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    24ec:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    24f0:	4e ee       	ldi	r20, 0xEE	; 238
    24f2:	56 e0       	ldi	r21, 0x06	; 6
    24f4:	67 ee       	ldi	r22, 0xE7	; 231
    24f6:	76 e0       	ldi	r23, 0x06	; 6
    24f8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <check_State>
		vTaskDelay(pdMS_TO_TICKS(500));
    24fc:	89 e2       	ldi	r24, 0x29	; 41
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vTaskDelay>
    2504:	f1 cf       	rjmp	.-30     	; 0x24e8 <eestate>

Disassembly of section .text.handle_State:

0000029c <handle_State>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
 29c:	8f 92       	push	r8
 29e:	9f 92       	push	r9
 2a0:	af 92       	push	r10
 2a2:	bf 92       	push	r11
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	7c 01       	movw	r14, r24
 2b2:	c6 2f       	mov	r28, r22
 2b4:	d4 2f       	mov	r29, r20
 2b6:	f9 01       	movw	r30, r18
 2b8:	90 81       	ld	r25, Z
 2ba:	91 30       	cpi	r25, 0x01	; 1
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <handle_State+0x24>
 2be:	62 c0       	rjmp	.+196    	; 0x384 <handle_State+0xe8>
 2c0:	20 f0       	brcs	.+8      	; 0x2ca <handle_State+0x2e>
 2c2:	92 30       	cpi	r25, 0x02	; 2
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <handle_State+0x2c>
 2c6:	6e c0       	rjmp	.+220    	; 0x3a4 <handle_State+0x108>
 2c8:	7f c0       	rjmp	.+254    	; 0x3c8 <handle_State+0x12c>
 2ca:	b7 01       	movw	r22, r14
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatunsisf>
 2d4:	4b 01       	movw	r8, r22
 2d6:	5c 01       	movw	r10, r24
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 ea       	ldi	r20, 0xA0	; 160
 2de:	51 e4       	ldi	r21, 0x41	; 65
 2e0:	0e 94 97 13 	call	0x272e	; 0x272e <__cmpsf2>
 2e4:	18 16       	cp	r1, r24
 2e6:	24 f0       	brlt	.+8      	; 0x2f0 <handle_State+0x54>
 2e8:	8c 2f       	mov	r24, r28
 2ea:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <DC_Stop>
 2ee:	6c c0       	rjmp	.+216    	; 0x3c8 <handle_State+0x12c>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 ea       	ldi	r20, 0xA0	; 160
 2f6:	51 e4       	ldi	r21, 0x41	; 65
 2f8:	c5 01       	movw	r24, r10
 2fa:	b4 01       	movw	r22, r8
 2fc:	0e 94 9c 13 	call	0x2738	; 0x2738 <__gesf2>
 300:	18 16       	cp	r1, r24
 302:	4c f5       	brge	.+82     	; 0x356 <handle_State+0xba>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e2       	ldi	r20, 0x20	; 32
 30a:	52 e4       	ldi	r21, 0x42	; 66
 30c:	c5 01       	movw	r24, r10
 30e:	b4 01       	movw	r22, r8
 310:	0e 94 97 13 	call	0x272e	; 0x272e <__cmpsf2>
 314:	18 16       	cp	r1, r24
 316:	fc f0       	brlt	.+62     	; 0x356 <handle_State+0xba>
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	8c 2f       	mov	r24, r28
 31c:	0e 94 17 0b 	call	0x162e	; 0x162e <DC_Start>
 320:	de 9d       	mul	r29, r14
 322:	c0 01       	movw	r24, r0
 324:	df 9d       	mul	r29, r15
 326:	90 0d       	add	r25, r0
 328:	11 24       	eor	r1, r1
 32a:	9c 01       	movw	r18, r24
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	22 0f       	add	r18, r18
 332:	33 1f       	adc	r19, r19
 334:	28 0f       	add	r18, r24
 336:	39 1f       	adc	r19, r25
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	36 95       	lsr	r19
 33e:	27 95       	ror	r18
 340:	ab e7       	ldi	r26, 0x7B	; 123
 342:	b4 e1       	ldi	r27, 0x14	; 20
 344:	0e 94 92 12 	call	0x2524	; 0x2524 <__umulhisi3>
 348:	bc 01       	movw	r22, r24
 34a:	76 95       	lsr	r23
 34c:	67 95       	ror	r22
 34e:	8c 2f       	mov	r24, r28
 350:	0e 94 83 12 	call	0x2506	; 0x2506 <DC_Change_Speed>
 354:	39 c0       	rjmp	.+114    	; 0x3c8 <handle_State+0x12c>
 356:	f9 e2       	ldi	r31, 0x29	; 41
 358:	ef 1a       	sub	r14, r31
 35a:	f1 08       	sbc	r15, r1
 35c:	2a e0       	ldi	r18, 0x0A	; 10
 35e:	e2 16       	cp	r14, r18
 360:	f1 04       	cpc	r15, r1
 362:	90 f5       	brcc	.+100    	; 0x3c8 <handle_State+0x12c>
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	8c 2f       	mov	r24, r28
 368:	0e 94 17 0b 	call	0x162e	; 0x162e <DC_Start>
 36c:	ea ef       	ldi	r30, 0xFA	; 250
 36e:	de 9f       	mul	r29, r30
 370:	c0 01       	movw	r24, r0
 372:	11 24       	eor	r1, r1
 374:	64 e6       	ldi	r22, 0x64	; 100
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__divmodhi4>
 37c:	8c 2f       	mov	r24, r28
 37e:	0e 94 83 12 	call	0x2506	; 0x2506 <DC_Change_Speed>
 382:	22 c0       	rjmp	.+68     	; 0x3c8 <handle_State+0x12c>
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 17 0b 	call	0x162e	; 0x162e <DC_Start>
 38c:	fa ef       	ldi	r31, 0xFA	; 250
 38e:	df 9f       	mul	r29, r31
 390:	c0 01       	movw	r24, r0
 392:	11 24       	eor	r1, r1
 394:	64 e6       	ldi	r22, 0x64	; 100
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__divmodhi4>
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 83 12 	call	0x2506	; 0x2506 <DC_Change_Speed>
 3a2:	12 c0       	rjmp	.+36     	; 0x3c8 <handle_State+0x12c>
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	8c 2f       	mov	r24, r28
 3a8:	0e 94 17 0b 	call	0x162e	; 0x162e <DC_Start>
 3ac:	2a ef       	ldi	r18, 0xFA	; 250
 3ae:	d2 9f       	mul	r29, r18
 3b0:	c0 01       	movw	r24, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	64 e6       	ldi	r22, 0x64	; 100
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__divmodhi4>
 3bc:	8c 2f       	mov	r24, r28
 3be:	0e 94 83 12 	call	0x2506	; 0x2506 <DC_Change_Speed>
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	f8 01       	movw	r30, r16
 3c6:	80 83       	st	Z, r24
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	bf 90       	pop	r11
 3d6:	af 90       	pop	r10
 3d8:	9f 90       	pop	r9
 3da:	8f 90       	pop	r8
 3dc:	08 95       	ret

Disassembly of section .text.fan1:

0000130e <fan1>:
    130e:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    1312:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    1316:	09 ee       	ldi	r16, 0xE9	; 233
    1318:	16 e0       	ldi	r17, 0x06	; 6
    131a:	2e ee       	ldi	r18, 0xEE	; 238
    131c:	36 e0       	ldi	r19, 0x06	; 6
    131e:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <Speed_Scale>
    1322:	60 91 ea 06 	lds	r22, 0x06EA	; 0x8006ea <DC_fan1>
    1326:	0e 94 4e 01 	call	0x29c	; 0x29c <handle_State>
    132a:	6a e0       	ldi	r22, 0x0A	; 10
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
    1332:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
    1336:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	c1 f5       	brne	.+112    	; 0x13ae <fan1+0xa0>
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidGoToXY>
    1346:	64 e0       	ldi	r22, 0x04	; 4
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidGoToXY>
    134e:	85 ed       	ldi	r24, 0xD5	; 213
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_voidWriteString>
    1358:	64 e0       	ldi	r22, 0x04	; 4
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 24 11 	call	0x2248	; 0x2248 <LCD_voidGoToXY>
    1360:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    1364:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    1368:	44 e6       	ldi	r20, 0x64	; 100
    136a:	48 9f       	mul	r20, r24
    136c:	90 01       	movw	r18, r0
    136e:	49 9f       	mul	r20, r25
    1370:	30 0d       	add	r19, r0
    1372:	11 24       	eor	r1, r1
    1374:	a9 e8       	ldi	r26, 0x89	; 137
    1376:	b8 e8       	ldi	r27, 0x88	; 136
    1378:	0e 94 92 12 	call	0x2524	; 0x2524 <__umulhisi3>
    137c:	96 95       	lsr	r25
    137e:	87 95       	ror	r24
    1380:	92 95       	swap	r25
    1382:	82 95       	swap	r24
    1384:	8f 70       	andi	r24, 0x0F	; 15
    1386:	89 27       	eor	r24, r25
    1388:	9f 70       	andi	r25, 0x0F	; 15
    138a:	89 27       	eor	r24, r25
    138c:	bc 01       	movw	r22, r24
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 25 0c 	call	0x184a	; 0x184a <LCD_voidWriteNumber>
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LCD_Semaphore>
    13a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LCD_Semaphore+0x1>
    13aa:	0e 94 0f 03 	call	0x61e	; 0x61e <xQueueGenericSend>
    13ae:	8e e0       	ldi	r24, 0x0E	; 14
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vTaskDelay>
    13b6:	ab cf       	rjmp	.-170    	; 0x130e <fan1>

Disassembly of section .text.UART_Transmit_State:

00002022 <UART_Transmit_State>:
	}

}

void UART_Transmit_State(const temp T,uint8_t counter,uint8_t *bot1f){
	if (T>=50)
    2022:	82 33       	cpi	r24, 0x32	; 50
    2024:	91 05       	cpc	r25, r1
    2026:	70 f0       	brcs	.+28     	; 0x2044 <UART_Transmit_State+0x22>
	{	
		if (counter<Emergency_counter_max)
    2028:	6e 36       	cpi	r22, 0x6E	; 110
    202a:	38 f4       	brcc	.+14     	; 0x203a <UART_Transmit_State+0x18>
		{	//Emergency
			/* Reset the flag	*/
			*bot1f=0;
    202c:	fa 01       	movw	r30, r20
    202e:	10 82       	st	Z, r1
			//send the emergency signal
			UART_Transmit_Word(Emergency_Mes);
    2030:	8c e2       	ldi	r24, 0x2C	; 44
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_Transmit_Word>
    2038:	08 95       	ret
		} 
		else
		{
			//Abnormal
			UART_Transmit_Word(Abnormal_Mes);
    203a:	8e e5       	ldi	r24, 0x5E	; 94
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_Transmit_Word>
    2042:	08 95       	ret
		}

	}
	else if (T>40 && T<=50 && *bot1f==1)
    2044:	9c 01       	movw	r18, r24
    2046:	29 52       	subi	r18, 0x29	; 41
    2048:	31 09       	sbc	r19, r1
    204a:	2a 30       	cpi	r18, 0x0A	; 10
    204c:	31 05       	cpc	r19, r1
    204e:	48 f4       	brcc	.+18     	; 0x2062 <UART_Transmit_State+0x40>
    2050:	fa 01       	movw	r30, r20
    2052:	20 81       	ld	r18, Z
    2054:	21 30       	cpi	r18, 0x01	; 1
    2056:	29 f4       	brne	.+10     	; 0x2062 <UART_Transmit_State+0x40>
	{	
		//send the off signal
		UART_Transmit_Word(Off_Mes);
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_Transmit_Word>
    2060:	08 95       	ret
	}
	else{
		/* Reset the flag	*/
		*bot1f=0;
    2062:	fa 01       	movw	r30, r20
    2064:	10 82       	st	Z, r1
		UART_Transmit_Word(T);
    2066:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_Transmit_Word>
    206a:	08 95       	ret

Disassembly of section .text.uart:

00002208 <uart>:
}

void uart(void *par){
	
	while(1){
		if(xSemaphoreTake(Bot1_Semaphore, pdMS_TO_TICKS(70)) == pdTRUE){//if the mcu2 motor will be off or not
    2208:	64 e0       	ldi	r22, 0x04	; 4
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Bot1_Semaphore>
    2210:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Bot1_Semaphore+0x1>
    2214:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	59 f4       	brne	.+22     	; 0x2232 <uart+0x2a>
			UART_Transmit_State(temperature,temp_counter,&buttonPressed);
    221c:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <temp_counter>
    2220:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    2224:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    2228:	4d ee       	ldi	r20, 0xED	; 237
    222a:	56 e0       	ldi	r21, 0x06	; 6
    222c:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_Transmit_State>
    2230:	eb cf       	rjmp	.-42     	; 0x2208 <uart>
		}
		else{
			UART_Transmit_State(temperature,temp_counter,&buttonPressed);
    2232:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <temp_counter>
    2236:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
    223a:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
    223e:	4d ee       	ldi	r20, 0xED	; 237
    2240:	56 e0       	ldi	r21, 0x06	; 6
    2242:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_Transmit_State>
    2246:	e0 cf       	rjmp	.-64     	; 0x2208 <uart>

Disassembly of section .text.emergency:

0000011c <emergency>:
	uart_status s	=	UART_Receive_Character(&temp_Speed); 
	if (s==UART_OK)
	{
		*Speed=temp_Speed;
	}
}
 11c:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <emergency_flag>
 120:	88 23       	and	r24, r24
 122:	21 f0       	breq	.+8      	; 0x12c <emergency+0x10>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	09 f4       	brne	.+2      	; 0x12a <emergency+0xe>
 128:	55 c0       	rjmp	.+170    	; 0x1d4 <emergency+0xb8>
 12a:	f8 cf       	rjmp	.-16     	; 0x11c <emergency>
 12c:	60 e1       	ldi	r22, 0x10	; 16
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 134:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 138:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	b9 f5       	brne	.+110    	; 0x1ae <emergency+0x92>
 140:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 144:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 148:	0e 94 30 0a 	call	0x1460	; 0x1460 <vTaskSuspend>
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 154:	0e 94 30 0a 	call	0x1460	; 0x1460 <vTaskSuspend>
 158:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 15c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 160:	0e 94 30 0a 	call	0x1460	; 0x1460 <vTaskSuspend>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <currentState>
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <Speed_Scale>
 170:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <temp_counter>
 174:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 178:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 17c:	4d ee       	ldi	r20, 0xED	; 237
 17e:	56 e0       	ldi	r21, 0x06	; 6
 180:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_Transmit_State>
 184:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 188:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 18c:	09 ee       	ldi	r16, 0xE9	; 233
 18e:	16 e0       	ldi	r17, 0x06	; 6
 190:	2e ee       	ldi	r18, 0xEE	; 238
 192:	36 e0       	ldi	r19, 0x06	; 6
 194:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <Speed_Scale>
 198:	60 91 ea 06 	lds	r22, 0x06EA	; 0x8006ea <DC_fan1>
 19c:	0e 94 4e 01 	call	0x29c	; 0x29c <handle_State>
 1a0:	60 91 ee 06 	lds	r22, 0x06EE	; 0x8006ee <currentState>
 1a4:	85 ee       	ldi	r24, 0xE5	; 229
 1a6:	96 e0       	ldi	r25, 0x06	; 6
 1a8:	0e 94 ca 12 	call	0x2594	; 0x2594 <eeprom_write_byte>
 1ac:	b7 cf       	rjmp	.-146    	; 0x11c <emergency>
 1ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 1b2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 1b6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vTaskResume>
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vTaskResume>
 1c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 1ca:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 1ce:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vTaskResume>
 1d2:	a4 cf       	rjmp	.-184    	; 0x11c <emergency>
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Emer_Semaphore>
 1dc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Emer_Semaphore+0x1>
 1e0:	0e 94 28 04 	call	0x850	; 0x850 <xQueueSemaphoreTake>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	c9 f5       	brne	.+114    	; 0x25a <emergency+0x13e>
 1e8:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <emergency_counter>
 1ec:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <emergency_flag>
 1f0:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <currentState>
 1f4:	60 91 e7 06 	lds	r22, 0x06E7	; 0x8006e7 <temp_counter>
 1f8:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 1fc:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 200:	4d ee       	ldi	r20, 0xED	; 237
 202:	56 e0       	ldi	r21, 0x06	; 6
 204:	0e 94 11 10 	call	0x2022	; 0x2022 <UART_Transmit_State>
 208:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <temperature>
 20c:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <temperature+0x1>
 210:	09 ee       	ldi	r16, 0xE9	; 233
 212:	16 e0       	ldi	r17, 0x06	; 6
 214:	2e ee       	ldi	r18, 0xEE	; 238
 216:	36 e0       	ldi	r19, 0x06	; 6
 218:	40 91 e6 06 	lds	r20, 0x06E6	; 0x8006e6 <Speed_Scale>
 21c:	60 91 ea 06 	lds	r22, 0x06EA	; 0x8006ea <DC_fan1>
 220:	0e 94 4e 01 	call	0x29c	; 0x29c <handle_State>
 224:	60 91 ee 06 	lds	r22, 0x06EE	; 0x8006ee <currentState>
 228:	85 ee       	ldi	r24, 0xE5	; 229
 22a:	96 e0       	ldi	r25, 0x06	; 6
 22c:	0e 94 ca 12 	call	0x2594	; 0x2594 <eeprom_write_byte>
 230:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LED1_OFF>
 234:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <xHanleUART>
 238:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <xHanleUART+0x1>
 23c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vTaskResume>
 240:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 244:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 248:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vTaskResume>
 24c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <xHanleFan1>
 250:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <xHanleFan1+0x1>
 254:	0e 94 a0 0c 	call	0x1940	; 0x1940 <vTaskResume>
 258:	1c c0       	rjmp	.+56     	; 0x292 <emergency+0x176>
 25a:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <emergency_counter>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <emergency_counter>
 264:	8e 36       	cpi	r24, 0x6E	; 110
 266:	a8 f0       	brcs	.+42     	; 0x292 <emergency+0x176>
 268:	f8 94       	cli
 26a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <LED1_ON>
 26e:	0e 94 75 13 	call	0x26ea	; 0x26ea <vTaskEndScheduler>
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <currentState>
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	85 ee       	ldi	r24, 0xE5	; 229
 27c:	96 e0       	ldi	r25, 0x06	; 6
 27e:	0e 94 ca 12 	call	0x2594	; 0x2594 <eeprom_write_byte>
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	81 bd       	out	0x21, r24	; 33
 286:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <emergency_counter>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <emergency_counter>
 290:	fa cf       	rjmp	.-12     	; 0x286 <emergency+0x16a>
 292:	8c e2       	ldi	r24, 0x2C	; 44
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vTaskDelay>
 29a:	40 cf       	rjmp	.-384    	; 0x11c <emergency>

Disassembly of section .text.__vector_1:

000017c8 <__vector_1>:
	
}

/*	Interrupt Service Routine for INT0 (bot1)	 */
ISR(INT0_vect)
{
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	0f 93       	push	r16
    17d4:	2f 93       	push	r18
    17d6:	3f 93       	push	r19
    17d8:	4f 93       	push	r20
    17da:	5f 93       	push	r21
    17dc:	6f 93       	push	r22
    17de:	7f 93       	push	r23
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	af 93       	push	r26
    17e6:	bf 93       	push	r27
    17e8:	ef 93       	push	r30
    17ea:	ff 93       	push	r31
	bot1_intur++;
    17ec:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <bot1_intur>
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <bot1_intur>
	buttonPressed = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <buttonPressed>
	xSemaphoreGive(Bot1_Semaphore);		/* Set the semaphore */
    17fc:	00 e0       	ldi	r16, 0x00	; 0
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Bot1_Semaphore>
    180c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Bot1_Semaphore+0x1>
    1810:	0e 94 0f 03 	call	0x61e	; 0x61e <xQueueGenericSend>
    1814:	2f e7       	ldi	r18, 0x7F	; 127
    1816:	88 e3       	ldi	r24, 0x38	; 56
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	21 50       	subi	r18, 0x01	; 1
    181c:	80 40       	sbci	r24, 0x00	; 0
    181e:	90 40       	sbci	r25, 0x00	; 0
    1820:	e1 f7       	brne	.-8      	; 0x181a <__vector_1+0x52>
    1822:	00 c0       	rjmp	.+0      	; 0x1824 <__vector_1+0x5c>
    1824:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
}
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 91       	pop	r16
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
    1848:	18 95       	reti

Disassembly of section .text.LCD_voidWriteBitsToSend:

00001048 <LCD_voidWriteBitsToSend>:
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    1048:	cf 93       	push	r28
    104a:	c8 2f       	mov	r28, r24
    104c:	48 2f       	mov	r20, r24
    104e:	44 1f       	adc	r20, r20
    1050:	44 27       	eor	r20, r20
    1052:	44 1f       	adc	r20, r20
    1054:	64 e0       	ldi	r22, 0x04	; 4
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    105c:	c6 fb       	bst	r28, 6
    105e:	44 27       	eor	r20, r20
    1060:	40 f9       	bld	r20, 0
    1062:	63 e0       	ldi	r22, 0x03	; 3
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    106a:	c5 fb       	bst	r28, 5
    106c:	44 27       	eor	r20, r20
    106e:	40 f9       	bld	r20, 0
    1070:	62 e0       	ldi	r22, 0x02	; 2
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    1078:	c4 fb       	bst	r28, 4
    107a:	44 27       	eor	r20, r20
    107c:	40 f9       	bld	r20, 0
    107e:	61 e0       	ldi	r22, 0x01	; 1
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	63 e0       	ldi	r22, 0x03	; 3
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    1090:	83 ef       	ldi	r24, 0xF3	; 243
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <LCD_voidWriteBitsToSend+0x4c>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <LCD_voidWriteBitsToSend+0x52>
    109a:	00 00       	nop
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10a6:	c3 fb       	bst	r28, 3
    10a8:	44 27       	eor	r20, r20
    10aa:	40 f9       	bld	r20, 0
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10b4:	c2 fb       	bst	r28, 2
    10b6:	44 27       	eor	r20, r20
    10b8:	40 f9       	bld	r20, 0
    10ba:	63 e0       	ldi	r22, 0x03	; 3
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10c2:	c1 fb       	bst	r28, 1
    10c4:	44 27       	eor	r20, r20
    10c6:	40 f9       	bld	r20, 0
    10c8:	62 e0       	ldi	r22, 0x02	; 2
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10d0:	4c 2f       	mov	r20, r28
    10d2:	41 70       	andi	r20, 0x01	; 1
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	63 e0       	ldi	r22, 0x03	; 3
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10e6:	83 ef       	ldi	r24, 0xF3	; 243
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <LCD_voidWriteBitsToSend+0xa2>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <LCD_voidWriteBitsToSend+0xa8>
    10f0:	00 00       	nop
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	63 e0       	ldi	r22, 0x03	; 3
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

Disassembly of section .text.LCD_voidWriteData:

000025ae <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    25ae:	cf 93       	push	r28
    25b0:	c8 2f       	mov	r28, r24
	/*Set RS to HIGH */
	DIO_SetPinValue(RS_PORT,RS_PIN,DIO_HIGH);
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    25bc:	8c 2f       	mov	r24, r28
    25be:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidWriteBitsToSend>
}
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret

Disassembly of section .text.LCD_voidWriteCommand:

000025c6 <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    25c6:	cf 93       	push	r28
    25c8:	c8 2f       	mov	r28, r24
	/*Set RS to low */
	DIO_SetPinValue(RS_PORT,RS_PIN,DIO_LOW);
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    25d4:	8c 2f       	mov	r24, r28
    25d6:	0e 94 24 08 	call	0x1048	; 0x1048 <LCD_voidWriteBitsToSend>
}
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret

Disassembly of section .text.LCD_voidInit:

00001c58 <LCD_voidInit>:
    1c58:	8b e4       	ldi	r24, 0x4B	; 75
    1c5a:	9d e1       	ldi	r25, 0x1D	; 29
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_voidInit+0x4>
    1c60:	00 c0       	rjmp	.+0      	; 0x1c62 <LCD_voidInit+0xa>
    1c62:	00 00       	nop
{
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_SetPinDirection(RS_PORT,RS_PIN,DIO_OUTPUT);
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
	// DIO_SetPinDirection(RW_PORT,RW_PIN,DIO_OUTPUT);
	DIO_SetPinDirection(EN_PORT, EN_PIN,DIO_OUTPUT);
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	63 e0       	ldi	r22, 0x03	; 3
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>

	/* Set Data Port Direction as output */
	DIO_SetPinDirection(D4_PORT,D4_PIN,DIO_OUTPUT);
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D5_PORT,D5_PIN,DIO_OUTPUT);
    1c82:	41 e0       	ldi	r20, 0x01	; 1
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D6_PORT,D6_PIN,DIO_OUTPUT);
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	63 e0       	ldi	r22, 0x03	; 3
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D7_PORT,D7_PIN,DIO_OUTPUT);
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	64 e0       	ldi	r22, 0x04	; 4
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    1ca6:	88 e2       	ldi	r24, 0x28	; 40
    1ca8:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    1cb8:	86 e0       	ldi	r24, 0x06	; 6
    1cba:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_voidWriteCommand>
    1cbe:	08 95       	ret

Disassembly of section .text.LCD_voidWriteString:

0000238c <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	8c 01       	movw	r16, r24

	u16 i= ZERO;
    2396:	c0 e0       	ldi	r28, 0x00	; 0
    2398:	d0 e0       	ldi	r29, 0x00	; 0
	while(copy_str[i] != '\0')
    239a:	03 c0       	rjmp	.+6      	; 0x23a2 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
    239c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_voidWriteData>
		i++;
    23a0:	21 96       	adiw	r28, 0x01	; 1

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    23a2:	f8 01       	movw	r30, r16
    23a4:	ec 0f       	add	r30, r28
    23a6:	fd 1f       	adc	r31, r29
    23a8:	80 81       	ld	r24, Z
    23aa:	81 11       	cpse	r24, r1
    23ac:	f7 cf       	rjmp	.-18     	; 0x239c <LCD_voidWriteString+0x10>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	08 95       	ret

Disassembly of section .text.LCD_voidGoToXY:

00002248 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	00 d0       	rcall	.+0      	; 0x224e <LCD_voidGoToXY+0x6>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <LCD_voidGoToXY+0x8>
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    2254:	19 82       	std	Y+1, r1	; 0x01
    2256:	90 e4       	ldi	r25, 0x40	; 64
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	94 e1       	ldi	r25, 0x14	; 20
    225c:	9b 83       	std	Y+3, r25	; 0x03
    225e:	94 e5       	ldi	r25, 0x54	; 84
    2260:	9c 83       	std	Y+4, r25	; 0x04

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    2262:	e1 e0       	ldi	r30, 0x01	; 1
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ec 0f       	add	r30, r28
    2268:	fd 1f       	adc	r31, r29
    226a:	e8 0f       	add	r30, r24
    226c:	f1 1d       	adc	r31, r1
    226e:	80 81       	ld	r24, Z
    2270:	86 0f       	add	r24, r22

	LCD_voidWriteCommand(local_address) ;
    2272:	80 58       	subi	r24, 0x80	; 128
    2274:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <LCD_voidWriteCommand>

}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

Disassembly of section .text.LCD_voidWriteNumber:

0000184a <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	2a 97       	sbiw	r28, 0x0a	; 10
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
	u32 LOCAL_NUMBER=Copy_u8num ;
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1860:	10 e0       	ldi	r17, 0x00	; 0


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1862:	2a e0       	ldi	r18, 0x0A	; 10
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodsi4>
    186e:	e1 e0       	ldi	r30, 0x01	; 1
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	ec 0f       	add	r30, r28
    1874:	fd 1f       	adc	r31, r29
    1876:	e1 0f       	add	r30, r17
    1878:	f1 1d       	adc	r31, r1
    187a:	60 5d       	subi	r22, 0xD0	; 208
    187c:	60 83       	st	Z, r22
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    187e:	62 2f       	mov	r22, r18
    1880:	73 2f       	mov	r23, r19
    1882:	84 2f       	mov	r24, r20
    1884:	95 2f       	mov	r25, r21
		i++ ;
    1886:	1f 5f       	subi	r17, 0xFF	; 255
	}
	while(LOCAL_NUMBER!=ZERO);
    1888:	61 15       	cp	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	81 05       	cpc	r24, r1
    188e:	91 05       	cpc	r25, r1
    1890:	41 f7       	brne	.-48     	; 0x1862 <LCD_voidWriteNumber+0x18>
    1892:	0d c0       	rjmp	.+26     	; 0x18ae <LCD_voidWriteNumber+0x64>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    1894:	e1 2f       	mov	r30, r17
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	31 97       	sbiw	r30, 0x01	; 1
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	8c 0f       	add	r24, r28
    18a0:	9d 1f       	adc	r25, r29
    18a2:	e8 0f       	add	r30, r24
    18a4:	f9 1f       	adc	r31, r25
    18a6:	80 81       	ld	r24, Z
    18a8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    18ac:	11 50       	subi	r17, 0x01	; 1
    18ae:	11 11       	cpse	r17, r1
    18b0:	f1 cf       	rjmp	.-30     	; 0x1894 <LCD_voidWriteNumber+0x4a>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    18b2:	2a 96       	adiw	r28, 0x0a	; 10
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	08 95       	ret

Disassembly of section .text.LED1_Initialize:

000026ba <LED1_Initialize>:

static char num_arr[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};

void LED1_Initialize(void)
{
	DIO_SetPinDirection(LED1_PORT, LED1_PIN, LED1_OUTPUT);
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
    26c4:	08 95       	ret

Disassembly of section .text.LED1_ON:

000026c6 <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_HIGH);
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    26d0:	08 95       	ret

Disassembly of section .text.LED1_OFF:

000026d2 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_LOW);
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    26dc:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

000026de <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
    26e8:	08 95       	ret

Disassembly of section .text.Read_TEMP_SENSOR:

0000232e <Read_TEMP_SENSOR>:
}

temp Read_TEMP_SENSOR(void){
	uint16_t temp_volt=ADC_Read(TEMP_SEN_PIN);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <ADC_Read>
	temp temp_read = temp_volt*500.0/1024.0 ;
    2334:	bc 01       	movw	r22, r24
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__floatunsisf>
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a ef       	ldi	r20, 0xFA	; 250
    2344:	53 e4       	ldi	r21, 0x43	; 67
    2346:	0e 94 a9 13 	call	0x2752	; 0x2752 <__mulsf3>
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5a e3       	ldi	r21, 0x3A	; 58
    2352:	0e 94 a9 13 	call	0x2752	; 0x2752 <__mulsf3>
    2356:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
	return temp_read;
    235a:	cb 01       	movw	r24, r22
    235c:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00001ee8 <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{	
	switch(motor)
    1ee8:	88 23       	and	r24, r24
    1eea:	19 f0       	breq	.+6      	; 0x1ef2 <DC_Initialize+0xa>
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	a9 f0       	breq	.+42     	; 0x1f1a <DC_Initialize+0x32>
    1ef0:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	65 e0       	ldi	r22, 0x05	; 5
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
		// Set Timer1 to Fast PWM mode with 8-bit resolution
		TCCR1A = (1 << WGM10) | (1 << WGM12) | (1 << COM1A1); // Fast PWM, Clear OC1A on Compare Match
    1f10:	89 e8       	ldi	r24, 0x89	; 137
    1f12:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);    // Prescaler = 64, start the timer
    1f14:	8b e0       	ldi	r24, 0x0B	; 11
    1f16:	8e bd       	out	0x2e, r24	; 46
		break;
    1f18:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	83 e0       	ldi	r24, 0x03	; 3
    1f20:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	62 e0       	ldi	r22, 0x02	; 2
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	0e 94 9a 05 	call	0xb34	; 0xb34 <DIO_SetPinDirection>
    1f38:	08 95       	ret

Disassembly of section .text.DC_Start:

0000162e <DC_Start>:
	}
	
}

void DC_Start(dc_motor motor, dc_motor_direction direction)
{	
    162e:	cf 93       	push	r28
    1630:	c6 2f       	mov	r28, r22
	switch(motor)
    1632:	88 23       	and	r24, r24
    1634:	19 f0       	breq	.+6      	; 0x163c <DC_Start+0xe>
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	09 f1       	breq	.+66     	; 0x167c <DC_Start+0x4e>
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <DC_Start+0x8c>
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_HIGH);
    163c:	41 e0       	ldi	r20, 0x01	; 1
    163e:	65 e0       	ldi	r22, 0x05	; 5
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		switch(direction)
    1646:	cc 23       	and	r28, r28
    1648:	19 f0       	breq	.+6      	; 0x1650 <DC_Start+0x22>
    164a:	c1 30       	cpi	r28, 0x01	; 1
    164c:	61 f0       	breq	.+24     	; 0x1666 <DC_Start+0x38>
    164e:	35 c0       	rjmp	.+106    	; 0x16ba <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_HIGH);
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	62 e0       	ldi	r22, 0x02	; 2
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			break;
    1664:	2a c0       	rjmp	.+84     	; 0x16ba <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_HIGH);
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	62 e0       	ldi	r22, 0x02	; 2
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			break;
    167a:	1f c0       	rjmp	.+62     	; 0x16ba <DC_Start+0x8c>
		}
		break;
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_HIGH);
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	62 e0       	ldi	r22, 0x02	; 2
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		switch(direction)
    1686:	cc 23       	and	r28, r28
    1688:	19 f0       	breq	.+6      	; 0x1690 <DC_Start+0x62>
    168a:	c1 30       	cpi	r28, 0x01	; 1
    168c:	61 f0       	breq	.+24     	; 0x16a6 <DC_Start+0x78>
    168e:	15 c0       	rjmp	.+42     	; 0x16ba <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_HIGH);
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	62 e0       	ldi	r22, 0x02	; 2
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	62 e0       	ldi	r22, 0x02	; 2
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			break;
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	62 e0       	ldi	r22, 0x02	; 2
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_HIGH);
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	82 e0       	ldi	r24, 0x02	; 2
    16b6:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
			break;
		}
		break;
	}
}
    16ba:	cf 91       	pop	r28
    16bc:	08 95       	ret

Disassembly of section .text.DC_Stop:

00001f3a <DC_Stop>:

void DC_Stop(dc_motor motor)
{
	switch(motor)
    1f3a:	88 23       	and	r24, r24
    1f3c:	19 f0       	breq	.+6      	; 0x1f44 <DC_Stop+0xa>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	99 f0       	breq	.+38     	; 0x1f68 <DC_Stop+0x2e>
    1f42:	08 95       	ret
	{
		case DC_Motor1:
		// Stop the pulse
		OCR1A=0;
    1f44:	1b bc       	out	0x2b, r1	; 43
    1f46:	1a bc       	out	0x2a, r1	; 42
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_LOW);
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	65 e0       	ldi	r22, 0x05	; 5
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	62 e0       	ldi	r22, 0x02	; 2
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		break;
    1f66:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_LOW);
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	62 e0       	ldi	r22, 0x02	; 2
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	62 e0       	ldi	r22, 0x02	; 2
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_SetPinValue>
    1f86:	08 95       	ret

Disassembly of section .text.DC_Change_Speed:

00002506 <DC_Change_Speed>:
		break;
	}
}

void DC_Change_Speed(dc_motor motor,uint16_t speed)
{	switch (motor){
    2506:	88 23       	and	r24, r24
    2508:	19 f0       	breq	.+6      	; 0x2510 <DC_Change_Speed+0xa>
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	21 f0       	breq	.+8      	; 0x2516 <DC_Change_Speed+0x10>
    250e:	08 95       	ret
		case DC_Motor1:
			OCR1A = speed;
    2510:	7b bd       	out	0x2b, r23	; 43
    2512:	6a bd       	out	0x2a, r22	; 42
		break;
    2514:	08 95       	ret
		case DC_Motor2:
			OCR1B = speed/4;
    2516:	76 95       	lsr	r23
    2518:	67 95       	ror	r22
    251a:	76 95       	lsr	r23
    251c:	67 95       	ror	r22
    251e:	79 bd       	out	0x29, r23	; 41
    2520:	68 bd       	out	0x28, r22	; 40
    2522:	08 95       	ret

Disassembly of section .text.main:

00002620 <main>:


int main(void)
{	
	
	App_Init();
    2620:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <App_Init>
	Free_RTOS_Init();
    2624:	0e 94 ef 01 	call	0x3de	; 0x3de <Free_RTOS_Init>
	

		
	vTaskStartScheduler();
    2628:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vTaskStartScheduler>
	//Recieve the message (Speed)
	UART_Receive_Speed(&Speed_Scale);
	*/
	

}
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	08 95       	ret

Disassembly of section .text.ADC_Initialize:

00002676 <ADC_Initialize>:

#include "ADC_Private.h"

void ADC_Initialize(adc_vref voltage , adc_prescaler prescaler)
{
	ADMUX |= 0x40;
    2676:	87 b1       	in	r24, 0x07	; 7
    2678:	80 64       	ori	r24, 0x40	; 64
    267a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xA7;
    267c:	86 b1       	in	r24, 0x06	; 6
    267e:	87 6a       	ori	r24, 0xA7	; 167
    2680:	86 b9       	out	0x06, r24	; 6
    2682:	08 95       	ret

Disassembly of section .text.ADC_Read:

00001a30 <ADC_Read>:
}

uint16_t ADC_Read(adc_channel channel)
{
    1a30:	e8 2f       	mov	r30, r24
	uint16_t val = 0;

	// Clear the ADC result register by reading it once
	uint16_t dummy = ADC_VAL;
    1a32:	84 b1       	in	r24, 0x04	; 4
    1a34:	95 b1       	in	r25, 0x05	; 5

	// Select the ADC channel
	switch (channel)
    1a36:	8e 2f       	mov	r24, r30
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	88 30       	cpi	r24, 0x08	; 8
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	50 f5       	brcc	.+84     	; 0x1a94 <ADC_Read+0x64>
    1a40:	fc 01       	movw	r30, r24
    1a42:	e6 5d       	subi	r30, 0xD6	; 214
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	0c 94 87 13 	jmp	0x270e	; 0x270e <__tablejump2__>
	{
		case ADC_0:
		ADMUX = (ADMUX & 0xF8) | 0x00; // Clear the channel bits and set ADC0
    1a4a:	87 b1       	in	r24, 0x07	; 7
    1a4c:	88 7f       	andi	r24, 0xF8	; 248
    1a4e:	87 b9       	out	0x07, r24	; 7
		break;
    1a50:	21 c0       	rjmp	.+66     	; 0x1a94 <ADC_Read+0x64>
		case ADC_1:
		ADMUX = (ADMUX & 0xF8) | 0x01; // Clear the channel bits and set ADC1
    1a52:	87 b1       	in	r24, 0x07	; 7
    1a54:	88 7f       	andi	r24, 0xF8	; 248
    1a56:	81 60       	ori	r24, 0x01	; 1
    1a58:	87 b9       	out	0x07, r24	; 7
		break;
    1a5a:	1c c0       	rjmp	.+56     	; 0x1a94 <ADC_Read+0x64>
		case ADC_2:
		ADMUX = (ADMUX & 0xF8) | 0x02; // Clear the channel bits and set ADC2
    1a5c:	87 b1       	in	r24, 0x07	; 7
    1a5e:	88 7f       	andi	r24, 0xF8	; 248
    1a60:	82 60       	ori	r24, 0x02	; 2
    1a62:	87 b9       	out	0x07, r24	; 7
		break;
    1a64:	17 c0       	rjmp	.+46     	; 0x1a94 <ADC_Read+0x64>
		case ADC_3:
		ADMUX = (ADMUX & 0xF8) | 0x03; // Clear the channel bits and set ADC3
    1a66:	87 b1       	in	r24, 0x07	; 7
    1a68:	88 7f       	andi	r24, 0xF8	; 248
    1a6a:	83 60       	ori	r24, 0x03	; 3
    1a6c:	87 b9       	out	0x07, r24	; 7
		break;
    1a6e:	12 c0       	rjmp	.+36     	; 0x1a94 <ADC_Read+0x64>
		case ADC_4:
		ADMUX = (ADMUX & 0xF8) | 0x04; // Clear the channel bits and set ADC4
    1a70:	87 b1       	in	r24, 0x07	; 7
    1a72:	88 7f       	andi	r24, 0xF8	; 248
    1a74:	84 60       	ori	r24, 0x04	; 4
    1a76:	87 b9       	out	0x07, r24	; 7
		break;
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <ADC_Read+0x64>
		case ADC_5:
		ADMUX = (ADMUX & 0xF8) | 0x05; // Clear the channel bits and set ADC5
    1a7a:	87 b1       	in	r24, 0x07	; 7
    1a7c:	88 7f       	andi	r24, 0xF8	; 248
    1a7e:	85 60       	ori	r24, 0x05	; 5
    1a80:	87 b9       	out	0x07, r24	; 7
		break;
    1a82:	08 c0       	rjmp	.+16     	; 0x1a94 <ADC_Read+0x64>
		case ADC_6:
		ADMUX = (ADMUX & 0xF8) | 0x06; // Clear the channel bits and set ADC6
    1a84:	87 b1       	in	r24, 0x07	; 7
    1a86:	88 7f       	andi	r24, 0xF8	; 248
    1a88:	86 60       	ori	r24, 0x06	; 6
    1a8a:	87 b9       	out	0x07, r24	; 7
		break;
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <ADC_Read+0x64>
		case ADC_7:
		ADMUX = (ADMUX & 0xF8) | 0x07; // Clear the channel bits and set ADC7
    1a8e:	87 b1       	in	r24, 0x07	; 7
    1a90:	87 60       	ori	r24, 0x07	; 7
    1a92:	87 b9       	out	0x07, r24	; 7
		break;
	}

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
    1a94:	86 b1       	in	r24, 0x06	; 6
    1a96:	80 64       	ori	r24, 0x40	; 64
    1a98:	86 b9       	out	0x06, r24	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
    1a9a:	36 99       	sbic	0x06, 6	; 6
    1a9c:	fe cf       	rjmp	.-4      	; 0x1a9a <ADC_Read+0x6a>

	// Read the converted value
	val = ADC_VAL;
    1a9e:	84 b1       	in	r24, 0x04	; 4
    1aa0:	95 b1       	in	r25, 0x05	; 5

	return val;
}
    1aa2:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

00000b34 <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 b34:	44 23       	and	r20, r20
 b36:	19 f0       	breq	.+6      	; 0xb3e <DIO_SetPinDirection+0xa>
 b38:	41 30       	cpi	r20, 0x01	; 1
 b3a:	c9 f1       	breq	.+114    	; 0xbae <DIO_SetPinDirection+0x7a>
 b3c:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 b3e:	81 30       	cpi	r24, 0x01	; 1
 b40:	91 f0       	breq	.+36     	; 0xb66 <DIO_SetPinDirection+0x32>
 b42:	28 f0       	brcs	.+10     	; 0xb4e <DIO_SetPinDirection+0x1a>
 b44:	82 30       	cpi	r24, 0x02	; 2
 b46:	d9 f0       	breq	.+54     	; 0xb7e <DIO_SetPinDirection+0x4a>
 b48:	83 30       	cpi	r24, 0x03	; 3
 b4a:	29 f1       	breq	.+74     	; 0xb96 <DIO_SetPinDirection+0x62>
 b4c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 b4e:	2a b3       	in	r18, 0x1a	; 26
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_SetPinDirection+0x26>
 b56:	88 0f       	add	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	6a 95       	dec	r22
 b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_SetPinDirection+0x22>
 b5e:	80 95       	com	r24
 b60:	82 23       	and	r24, r18
 b62:	8a bb       	out	0x1a, r24	; 26
			break;
 b64:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 b66:	27 b3       	in	r18, 0x17	; 23
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <DIO_SetPinDirection+0x3e>
 b6e:	88 0f       	add	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	6a 95       	dec	r22
 b74:	e2 f7       	brpl	.-8      	; 0xb6e <DIO_SetPinDirection+0x3a>
 b76:	80 95       	com	r24
 b78:	82 23       	and	r24, r18
 b7a:	87 bb       	out	0x17, r24	; 23
			break;
 b7c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 b7e:	24 b3       	in	r18, 0x14	; 20
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <DIO_SetPinDirection+0x56>
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	6a 95       	dec	r22
 b8c:	e2 f7       	brpl	.-8      	; 0xb86 <DIO_SetPinDirection+0x52>
 b8e:	80 95       	com	r24
 b90:	82 23       	and	r24, r18
 b92:	84 bb       	out	0x14, r24	; 20
			break;
 b94:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 b96:	21 b3       	in	r18, 0x11	; 17
 b98:	81 e0       	ldi	r24, 0x01	; 1
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_SetPinDirection+0x6e>
 b9e:	88 0f       	add	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	6a 95       	dec	r22
 ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_SetPinDirection+0x6a>
 ba6:	80 95       	com	r24
 ba8:	82 23       	and	r24, r18
 baa:	81 bb       	out	0x11, r24	; 17
			break;
 bac:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	89 f0       	breq	.+34     	; 0xbd4 <DIO_SetPinDirection+0xa0>
 bb2:	28 f0       	brcs	.+10     	; 0xbbe <DIO_SetPinDirection+0x8a>
 bb4:	82 30       	cpi	r24, 0x02	; 2
 bb6:	c9 f0       	breq	.+50     	; 0xbea <DIO_SetPinDirection+0xb6>
 bb8:	83 30       	cpi	r24, 0x03	; 3
 bba:	11 f1       	breq	.+68     	; 0xc00 <DIO_SetPinDirection+0xcc>
 bbc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 bbe:	2a b3       	in	r18, 0x1a	; 26
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <DIO_SetPinDirection+0x96>
 bc6:	88 0f       	add	r24, r24
 bc8:	99 1f       	adc	r25, r25
 bca:	6a 95       	dec	r22
 bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DIO_SetPinDirection+0x92>
 bce:	82 2b       	or	r24, r18
 bd0:	8a bb       	out	0x1a, r24	; 26
			break;
 bd2:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 bd4:	27 b3       	in	r18, 0x17	; 23
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <DIO_SetPinDirection+0xac>
 bdc:	88 0f       	add	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	6a 95       	dec	r22
 be2:	e2 f7       	brpl	.-8      	; 0xbdc <DIO_SetPinDirection+0xa8>
 be4:	82 2b       	or	r24, r18
 be6:	87 bb       	out	0x17, r24	; 23
			break;
 be8:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 bea:	24 b3       	in	r18, 0x14	; 20
 bec:	81 e0       	ldi	r24, 0x01	; 1
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_SetPinDirection+0xc2>
 bf2:	88 0f       	add	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	6a 95       	dec	r22
 bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_SetPinDirection+0xbe>
 bfa:	82 2b       	or	r24, r18
 bfc:	84 bb       	out	0x14, r24	; 20
			break;
 bfe:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 c00:	21 b3       	in	r18, 0x11	; 17
 c02:	81 e0       	ldi	r24, 0x01	; 1
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_SetPinDirection+0xd8>
 c08:	88 0f       	add	r24, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	6a 95       	dec	r22
 c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_SetPinDirection+0xd4>
 c10:	82 2b       	or	r24, r18
 c12:	81 bb       	out	0x11, r24	; 17
 c14:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

00000c16 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 c16:	44 23       	and	r20, r20
 c18:	19 f0       	breq	.+6      	; 0xc20 <DIO_SetPinValue+0xa>
 c1a:	41 30       	cpi	r20, 0x01	; 1
 c1c:	c9 f1       	breq	.+114    	; 0xc90 <DIO_SetPinValue+0x7a>
 c1e:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 c20:	81 30       	cpi	r24, 0x01	; 1
 c22:	91 f0       	breq	.+36     	; 0xc48 <DIO_SetPinValue+0x32>
 c24:	28 f0       	brcs	.+10     	; 0xc30 <DIO_SetPinValue+0x1a>
 c26:	82 30       	cpi	r24, 0x02	; 2
 c28:	d9 f0       	breq	.+54     	; 0xc60 <DIO_SetPinValue+0x4a>
 c2a:	83 30       	cpi	r24, 0x03	; 3
 c2c:	29 f1       	breq	.+74     	; 0xc78 <DIO_SetPinValue+0x62>
 c2e:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 c30:	2b b3       	in	r18, 0x1b	; 27
 c32:	81 e0       	ldi	r24, 0x01	; 1
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_SetPinValue+0x26>
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	6a 95       	dec	r22
 c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_SetPinValue+0x22>
 c40:	80 95       	com	r24
 c42:	82 23       	and	r24, r18
 c44:	8b bb       	out	0x1b, r24	; 27
			break;
 c46:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 c48:	28 b3       	in	r18, 0x18	; 24
 c4a:	81 e0       	ldi	r24, 0x01	; 1
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <DIO_SetPinValue+0x3e>
 c50:	88 0f       	add	r24, r24
 c52:	99 1f       	adc	r25, r25
 c54:	6a 95       	dec	r22
 c56:	e2 f7       	brpl	.-8      	; 0xc50 <DIO_SetPinValue+0x3a>
 c58:	80 95       	com	r24
 c5a:	82 23       	and	r24, r18
 c5c:	88 bb       	out	0x18, r24	; 24
			break;
 c5e:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 c60:	25 b3       	in	r18, 0x15	; 21
 c62:	81 e0       	ldi	r24, 0x01	; 1
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_SetPinValue+0x56>
 c68:	88 0f       	add	r24, r24
 c6a:	99 1f       	adc	r25, r25
 c6c:	6a 95       	dec	r22
 c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_SetPinValue+0x52>
 c70:	80 95       	com	r24
 c72:	82 23       	and	r24, r18
 c74:	85 bb       	out	0x15, r24	; 21
			break;
 c76:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 c78:	22 b3       	in	r18, 0x12	; 18
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_SetPinValue+0x6e>
 c80:	88 0f       	add	r24, r24
 c82:	99 1f       	adc	r25, r25
 c84:	6a 95       	dec	r22
 c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_SetPinValue+0x6a>
 c88:	80 95       	com	r24
 c8a:	82 23       	and	r24, r18
 c8c:	82 bb       	out	0x12, r24	; 18
			break;
 c8e:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 c90:	81 30       	cpi	r24, 0x01	; 1
 c92:	89 f0       	breq	.+34     	; 0xcb6 <DIO_SetPinValue+0xa0>
 c94:	28 f0       	brcs	.+10     	; 0xca0 <DIO_SetPinValue+0x8a>
 c96:	82 30       	cpi	r24, 0x02	; 2
 c98:	c9 f0       	breq	.+50     	; 0xccc <DIO_SetPinValue+0xb6>
 c9a:	83 30       	cpi	r24, 0x03	; 3
 c9c:	11 f1       	breq	.+68     	; 0xce2 <DIO_SetPinValue+0xcc>
 c9e:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 ca0:	2b b3       	in	r18, 0x1b	; 27
 ca2:	81 e0       	ldi	r24, 0x01	; 1
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinValue+0x96>
 ca8:	88 0f       	add	r24, r24
 caa:	99 1f       	adc	r25, r25
 cac:	6a 95       	dec	r22
 cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinValue+0x92>
 cb0:	82 2b       	or	r24, r18
 cb2:	8b bb       	out	0x1b, r24	; 27
			break;
 cb4:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 cb6:	28 b3       	in	r18, 0x18	; 24
 cb8:	81 e0       	ldi	r24, 0x01	; 1
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_SetPinValue+0xac>
 cbe:	88 0f       	add	r24, r24
 cc0:	99 1f       	adc	r25, r25
 cc2:	6a 95       	dec	r22
 cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_SetPinValue+0xa8>
 cc6:	82 2b       	or	r24, r18
 cc8:	88 bb       	out	0x18, r24	; 24
			break;
 cca:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 ccc:	25 b3       	in	r18, 0x15	; 21
 cce:	81 e0       	ldi	r24, 0x01	; 1
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_SetPinValue+0xc2>
 cd4:	88 0f       	add	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	6a 95       	dec	r22
 cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_SetPinValue+0xbe>
 cdc:	82 2b       	or	r24, r18
 cde:	85 bb       	out	0x15, r24	; 21
			break;
 ce0:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 ce2:	22 b3       	in	r18, 0x12	; 18
 ce4:	81 e0       	ldi	r24, 0x01	; 1
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_SetPinValue+0xd8>
 cea:	88 0f       	add	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	6a 95       	dec	r22
 cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_SetPinValue+0xd4>
 cf2:	82 2b       	or	r24, r18
 cf4:	82 bb       	out	0x12, r24	; 18
 cf6:	08 95       	ret

Disassembly of section .text.External_Interrupt0_Initalize:

00001e3c <External_Interrupt0_Initalize>:
#include "Interrupt_Private.h"

void External_Interrupt0_Initalize(int0_sense sense)
{
	// Define interrupt pin INT0 as input 
	CLR_BIT(DDRD,2);	
    1e3c:	91 b3       	in	r25, 0x11	; 17
    1e3e:	9b 7f       	andi	r25, 0xFB	; 251
    1e40:	91 bb       	out	0x11, r25	; 17
	// Disable global interrupt while initialization 
	cli();//Clear interrupt, CLR_BIT(SREG,7);
    1e42:	f8 94       	cli
	// Choose sensing method
	switch(sense)
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	69 f0       	breq	.+26     	; 0x1e62 <External_Interrupt0_Initalize+0x26>
    1e48:	28 f0       	brcs	.+10     	; 0x1e54 <External_Interrupt0_Initalize+0x18>
    1e4a:	82 30       	cpi	r24, 0x02	; 2
    1e4c:	c1 f0       	breq	.+48     	; 0x1e7e <External_Interrupt0_Initalize+0x42>
    1e4e:	83 30       	cpi	r24, 0x03	; 3
    1e50:	79 f0       	breq	.+30     	; 0x1e70 <External_Interrupt0_Initalize+0x34>
    1e52:	1b c0       	rjmp	.+54     	; 0x1e8a <External_Interrupt0_Initalize+0x4e>
	{
		case INT0_LOW:
		CLR_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 0 0
    1e54:	85 b7       	in	r24, 0x35	; 53
    1e56:	8d 7f       	andi	r24, 0xFD	; 253
    1e58:	85 bf       	out	0x35, r24	; 53
    1e5a:	85 b7       	in	r24, 0x35	; 53
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	85 bf       	out	0x35, r24	; 53
		break;
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <External_Interrupt0_Initalize+0x4e>
		case INT0_HIGH:
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 0 1
    1e62:	85 b7       	in	r24, 0x35	; 53
    1e64:	8d 7f       	andi	r24, 0xFD	; 253
    1e66:	85 bf       	out	0x35, r24	; 53
    1e68:	85 b7       	in	r24, 0x35	; 53
    1e6a:	81 60       	ori	r24, 0x01	; 1
    1e6c:	85 bf       	out	0x35, r24	; 53
		break;
    1e6e:	0d c0       	rjmp	.+26     	; 0x1e8a <External_Interrupt0_Initalize+0x4e>
		case INT0_FALLING:
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 1 0
    1e70:	85 b7       	in	r24, 0x35	; 53
    1e72:	82 60       	ori	r24, 0x02	; 2
    1e74:	85 bf       	out	0x35, r24	; 53
    1e76:	85 b7       	in	r24, 0x35	; 53
    1e78:	8e 7f       	andi	r24, 0xFE	; 254
    1e7a:	85 bf       	out	0x35, r24	; 53
		break;
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <External_Interrupt0_Initalize+0x4e>
		case INT0_RISING:
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 1 1
    1e7e:	85 b7       	in	r24, 0x35	; 53
    1e80:	82 60       	ori	r24, 0x02	; 2
    1e82:	85 bf       	out	0x35, r24	; 53
    1e84:	85 b7       	in	r24, 0x35	; 53
    1e86:	81 60       	ori	r24, 0x01	; 1
    1e88:	85 bf       	out	0x35, r24	; 53
		break;
		
	}
	// Enable peripheral interrupt 
	SET_BIT(GICR, INT0);
    1e8a:	8b b7       	in	r24, 0x3b	; 59
    1e8c:	80 64       	ori	r24, 0x40	; 64
    1e8e:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupt after initialization 
	sei();//Set interrupt, SET_BIT(SREG,7);
    1e90:	78 94       	sei
    1e92:	08 95       	ret

Disassembly of section .text.UART_Initialize_WithoutInterrupt:

000004fe <UART_Initialize_WithoutInterrupt>:
uart_status UART_Receive_Character(uint8_t* data)
{
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}
 4fe:	0f 93       	push	r16
 500:	31 b3       	in	r19, 0x11	; 17
 502:	32 60       	ori	r19, 0x02	; 2
 504:	31 bb       	out	0x11, r19	; 17
 506:	31 b3       	in	r19, 0x11	; 17
 508:	3e 7f       	andi	r19, 0xFE	; 254
 50a:	31 bb       	out	0x11, r19	; 17
 50c:	3a b1       	in	r19, 0x0a	; 10
 50e:	38 61       	ori	r19, 0x18	; 24
 510:	3a b9       	out	0x0a, r19	; 10
 512:	66 23       	and	r22, r22
 514:	19 f0       	breq	.+6      	; 0x51c <UART_Initialize_WithoutInterrupt+0x1e>
 516:	61 30       	cpi	r22, 0x01	; 1
 518:	29 f0       	breq	.+10     	; 0x524 <UART_Initialize_WithoutInterrupt+0x26>
 51a:	07 c0       	rjmp	.+14     	; 0x52a <UART_Initialize_WithoutInterrupt+0x2c>
 51c:	30 b5       	in	r19, 0x20	; 32
 51e:	3f 77       	andi	r19, 0x7F	; 127
 520:	30 bd       	out	0x20, r19	; 32
 522:	03 c0       	rjmp	.+6      	; 0x52a <UART_Initialize_WithoutInterrupt+0x2c>
 524:	30 b5       	in	r19, 0x20	; 32
 526:	30 68       	ori	r19, 0x80	; 128
 528:	30 bd       	out	0x20, r19	; 32
 52a:	22 30       	cpi	r18, 0x02	; 2
 52c:	f9 f0       	breq	.+62     	; 0x56c <UART_Initialize_WithoutInterrupt+0x6e>
 52e:	28 f4       	brcc	.+10     	; 0x53a <UART_Initialize_WithoutInterrupt+0x3c>
 530:	22 23       	and	r18, r18
 532:	41 f0       	breq	.+16     	; 0x544 <UART_Initialize_WithoutInterrupt+0x46>
 534:	21 30       	cpi	r18, 0x01	; 1
 536:	81 f0       	breq	.+32     	; 0x558 <UART_Initialize_WithoutInterrupt+0x5a>
 538:	36 c0       	rjmp	.+108    	; 0x5a6 <UART_Initialize_WithoutInterrupt+0xa8>
 53a:	23 30       	cpi	r18, 0x03	; 3
 53c:	09 f1       	breq	.+66     	; 0x580 <UART_Initialize_WithoutInterrupt+0x82>
 53e:	24 30       	cpi	r18, 0x04	; 4
 540:	49 f1       	breq	.+82     	; 0x594 <UART_Initialize_WithoutInterrupt+0x96>
 542:	31 c0       	rjmp	.+98     	; 0x5a6 <UART_Initialize_WithoutInterrupt+0xa8>
 544:	2a b1       	in	r18, 0x0a	; 10
 546:	2b 7f       	andi	r18, 0xFB	; 251
 548:	2a b9       	out	0x0a, r18	; 10
 54a:	20 b5       	in	r18, 0x20	; 32
 54c:	2b 7f       	andi	r18, 0xFB	; 251
 54e:	20 bd       	out	0x20, r18	; 32
 550:	20 b5       	in	r18, 0x20	; 32
 552:	2d 7f       	andi	r18, 0xFD	; 253
 554:	20 bd       	out	0x20, r18	; 32
 556:	27 c0       	rjmp	.+78     	; 0x5a6 <UART_Initialize_WithoutInterrupt+0xa8>
 558:	2a b1       	in	r18, 0x0a	; 10
 55a:	2b 7f       	andi	r18, 0xFB	; 251
 55c:	2a b9       	out	0x0a, r18	; 10
 55e:	20 b5       	in	r18, 0x20	; 32
 560:	2b 7f       	andi	r18, 0xFB	; 251
 562:	20 bd       	out	0x20, r18	; 32
 564:	20 b5       	in	r18, 0x20	; 32
 566:	22 60       	ori	r18, 0x02	; 2
 568:	20 bd       	out	0x20, r18	; 32
 56a:	1d c0       	rjmp	.+58     	; 0x5a6 <UART_Initialize_WithoutInterrupt+0xa8>
 56c:	2a b1       	in	r18, 0x0a	; 10
 56e:	2b 7f       	andi	r18, 0xFB	; 251
 570:	2a b9       	out	0x0a, r18	; 10
 572:	20 b5       	in	r18, 0x20	; 32
 574:	24 60       	ori	r18, 0x04	; 4
 576:	20 bd       	out	0x20, r18	; 32
 578:	20 b5       	in	r18, 0x20	; 32
 57a:	2d 7f       	andi	r18, 0xFD	; 253
 57c:	20 bd       	out	0x20, r18	; 32
 57e:	13 c0       	rjmp	.+38     	; 0x5a6 <UART_Initialize_WithoutInterrupt+0xa8>
 580:	2a b1       	in	r18, 0x0a	; 10
 582:	2b 7f       	andi	r18, 0xFB	; 251
 584:	2a b9       	out	0x0a, r18	; 10
 586:	20 b5       	in	r18, 0x20	; 32
 588:	24 60       	ori	r18, 0x04	; 4
 58a:	20 bd       	out	0x20, r18	; 32
 58c:	20 b5       	in	r18, 0x20	; 32
 58e:	22 60       	ori	r18, 0x02	; 2
 590:	20 bd       	out	0x20, r18	; 32
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <UART_Initialize_WithoutInterrupt+0xa8>
 594:	2a b1       	in	r18, 0x0a	; 10
 596:	24 60       	ori	r18, 0x04	; 4
 598:	2a b9       	out	0x0a, r18	; 10
 59a:	20 b5       	in	r18, 0x20	; 32
 59c:	24 60       	ori	r18, 0x04	; 4
 59e:	20 bd       	out	0x20, r18	; 32
 5a0:	20 b5       	in	r18, 0x20	; 32
 5a2:	22 60       	ori	r18, 0x02	; 2
 5a4:	20 bd       	out	0x20, r18	; 32
 5a6:	41 30       	cpi	r20, 0x01	; 1
 5a8:	59 f0       	breq	.+22     	; 0x5c0 <UART_Initialize_WithoutInterrupt+0xc2>
 5aa:	18 f0       	brcs	.+6      	; 0x5b2 <UART_Initialize_WithoutInterrupt+0xb4>
 5ac:	42 30       	cpi	r20, 0x02	; 2
 5ae:	79 f0       	breq	.+30     	; 0x5ce <UART_Initialize_WithoutInterrupt+0xd0>
 5b0:	14 c0       	rjmp	.+40     	; 0x5da <UART_Initialize_WithoutInterrupt+0xdc>
 5b2:	20 b5       	in	r18, 0x20	; 32
 5b4:	2f 7d       	andi	r18, 0xDF	; 223
 5b6:	20 bd       	out	0x20, r18	; 32
 5b8:	20 b5       	in	r18, 0x20	; 32
 5ba:	2f 7e       	andi	r18, 0xEF	; 239
 5bc:	20 bd       	out	0x20, r18	; 32
 5be:	0d c0       	rjmp	.+26     	; 0x5da <UART_Initialize_WithoutInterrupt+0xdc>
 5c0:	20 b5       	in	r18, 0x20	; 32
 5c2:	20 62       	ori	r18, 0x20	; 32
 5c4:	20 bd       	out	0x20, r18	; 32
 5c6:	20 b5       	in	r18, 0x20	; 32
 5c8:	2f 7e       	andi	r18, 0xEF	; 239
 5ca:	20 bd       	out	0x20, r18	; 32
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <UART_Initialize_WithoutInterrupt+0xdc>
 5ce:	20 b5       	in	r18, 0x20	; 32
 5d0:	20 62       	ori	r18, 0x20	; 32
 5d2:	20 bd       	out	0x20, r18	; 32
 5d4:	20 b5       	in	r18, 0x20	; 32
 5d6:	20 61       	ori	r18, 0x10	; 16
 5d8:	20 bd       	out	0x20, r18	; 32
 5da:	00 23       	and	r16, r16
 5dc:	19 f0       	breq	.+6      	; 0x5e4 <UART_Initialize_WithoutInterrupt+0xe6>
 5de:	01 30       	cpi	r16, 0x01	; 1
 5e0:	29 f0       	breq	.+10     	; 0x5ec <UART_Initialize_WithoutInterrupt+0xee>
 5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <UART_Initialize_WithoutInterrupt+0xf4>
 5e4:	20 b5       	in	r18, 0x20	; 32
 5e6:	27 7f       	andi	r18, 0xF7	; 247
 5e8:	20 bd       	out	0x20, r18	; 32
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <UART_Initialize_WithoutInterrupt+0xf4>
 5ec:	20 b5       	in	r18, 0x20	; 32
 5ee:	28 60       	ori	r18, 0x08	; 8
 5f0:	20 bd       	out	0x20, r18	; 32
 5f2:	9c 01       	movw	r18, r24
 5f4:	22 95       	swap	r18
 5f6:	32 95       	swap	r19
 5f8:	30 7f       	andi	r19, 0xF0	; 240
 5fa:	32 27       	eor	r19, r18
 5fc:	20 7f       	andi	r18, 0xF0	; 240
 5fe:	32 27       	eor	r19, r18
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	50 e0       	ldi	r21, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	71 e7       	ldi	r23, 0x71	; 113
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 af 11 	call	0x235e	; 0x235e <__divmodsi4>
 610:	21 50       	subi	r18, 0x01	; 1
 612:	31 09       	sbc	r19, r1
 614:	29 b9       	out	0x09, r18	; 9
 616:	30 bd       	out	0x20, r19	; 32
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

Disassembly of section .text.UART_Transmit_Character:

0000271a <UART_Transmit_Character>:

}
uart_status UART_Transmit_Character(uint8_t data)
{

	while ((!(UCSRA & (1 << UDRE))) ) {
    271a:	5d 9b       	sbis	0x0b, 5	; 11
    271c:	fe cf       	rjmp	.-4      	; 0x271a <UART_Transmit_Character>
		// Wait until the transmit buffer is empty
	}
	
	UDR = data;
    271e:	8c b9       	out	0x0c, r24	; 12
	//while (((UCSRA>>TXC)&0x01) != 1);//Wait until flag of transmitting received
	return UART_OK;
}
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	08 95       	ret

Disassembly of section .text.UART_Transmit_Word:

00002542 <UART_Transmit_Word>:
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}

uart_status UART_Transmit_Word(uint16_t data){
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	d8 2f       	mov	r29, r24
	uint8_t high_byte = (data >> 8) & 0xFF;
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
    2548:	89 2f       	mov	r24, r25
    254a:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_Transmit_Character>
    254e:	c8 2f       	mov	r28, r24
	s|= UART_Transmit_Character(low_byte);
    2550:	8d 2f       	mov	r24, r29
    2552:	0e 94 8d 13 	call	0x271a	; 0x271a <UART_Transmit_Character>
	return s;

}
    2556:	8c 2b       	or	r24, r28
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

Disassembly of section .text.pvPortMalloc:

00001bee <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1bf4:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1bf8:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <pucAlignedHeap.2045>
    1bfc:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <pucAlignedHeap.2045+0x1>
    1c00:	89 2b       	or	r24, r25
    1c02:	31 f4       	brne	.+12     	; 0x1c10 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1c04:	81 e7       	ldi	r24, 0x71	; 113
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	90 93 d6 06 	sts	0x06D6, r25	; 0x8006d6 <pucAlignedHeap.2045+0x1>
    1c0c:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <pucAlignedHeap.2045>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1c10:	20 91 d7 06 	lds	r18, 0x06D7	; 0x8006d7 <xNextFreeByte>
    1c14:	30 91 d8 06 	lds	r19, 0x06D8	; 0x8006d8 <xNextFreeByte+0x1>
    1c18:	c9 01       	movw	r24, r18
    1c1a:	8c 0f       	add	r24, r28
    1c1c:	9d 1f       	adc	r25, r29
    1c1e:	8b 3d       	cpi	r24, 0xDB	; 219
    1c20:	45 e0       	ldi	r20, 0x05	; 5
    1c22:	94 07       	cpc	r25, r20
    1c24:	70 f4       	brcc	.+28     	; 0x1c42 <pvPortMalloc+0x54>
    1c26:	28 17       	cp	r18, r24
    1c28:	39 07       	cpc	r19, r25
    1c2a:	70 f4       	brcc	.+28     	; 0x1c48 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1c2c:	c0 91 d5 06 	lds	r28, 0x06D5	; 0x8006d5 <pucAlignedHeap.2045>
    1c30:	d0 91 d6 06 	lds	r29, 0x06D6	; 0x8006d6 <pucAlignedHeap.2045+0x1>
    1c34:	c2 0f       	add	r28, r18
    1c36:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    1c38:	90 93 d8 06 	sts	0x06D8, r25	; 0x8006d8 <xNextFreeByte+0x1>
    1c3c:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <xNextFreeByte>
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1c42:	c0 e0       	ldi	r28, 0x00	; 0
    1c44:	d0 e0       	ldi	r29, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <pvPortMalloc+0x5e>
    1c48:	c0 e0       	ldi	r28, 0x00	; 0
    1c4a:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1c4c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1c50:	ce 01       	movw	r24, r28
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

Disassembly of section .text.vPortFree:

00002768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2768:	08 95       	ret

Disassembly of section .text.vListInitialise:

0000255e <vListInitialise>:
 * all the API functions to use the MPU wrappers.  That should only be done when
 * task.h is included from an application file. */
#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE

#include "FreeRTOS.h"
#include "list.h"
    255e:	fc 01       	movw	r30, r24

/* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
 * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
 * defined for the header files above, but not in this file, in order to
    2560:	03 96       	adiw	r24, 0x03	; 3
    2562:	92 83       	std	Z+2, r25	; 0x02
    2564:	81 83       	std	Z+1, r24	; 0x01
 * generate the correct privileged Vs unprivileged linkage and placement. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */

/*-----------------------------------------------------------
    2566:	2f ef       	ldi	r18, 0xFF	; 255
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	34 83       	std	Z+4, r19	; 0x04
    256c:	23 83       	std	Z+3, r18	; 0x03
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
    256e:	96 83       	std	Z+6, r25	; 0x06
    2570:	85 83       	std	Z+5, r24	; 0x05
{
    2572:	90 87       	std	Z+8, r25	; 0x08
    2574:	87 83       	std	Z+7, r24	; 0x07
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
    2576:	10 82       	st	Z, r1
    2578:	08 95       	ret

Disassembly of section .text.vListInitialiseItem:

00002742 <vListInitialiseItem>:
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2742:	fc 01       	movw	r30, r24
    2744:	11 86       	std	Z+9, r1	; 0x09
    2746:	10 86       	std	Z+8, r1	; 0x08
    2748:	08 95       	ret

Disassembly of section .text.vListInsertEnd:

00002184 <vListInsertEnd>:
    {
        pxList->xListEnd.pvOwner = NULL;
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	9c 01       	movw	r18, r24
    218a:	fb 01       	movw	r30, r22

    218c:	dc 01       	movw	r26, r24
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	cd 91       	ld	r28, X+
    2192:	dc 91       	ld	r29, X
    2194:	12 97       	sbiw	r26, 0x02	; 2
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    2196:	d3 83       	std	Z+3, r29	; 0x03
    2198:	c2 83       	std	Z+2, r28	; 0x02
    /* Make sure the list item is not recorded as being on a list. */
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	9d 81       	ldd	r25, Y+5	; 0x05
    219e:	95 83       	std	Z+5, r25	; 0x05
    21a0:	84 83       	std	Z+4, r24	; 0x04
    pxItem->pxContainer = NULL;

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	dc 01       	movw	r26, r24
    21a8:	13 96       	adiw	r26, 0x03	; 3
    21aa:	7c 93       	st	X, r23
    21ac:	6e 93       	st	-X, r22
    21ae:	12 97       	sbiw	r26, 0x02	; 2
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    21b0:	7d 83       	std	Y+5, r23	; 0x05
    21b2:	6c 83       	std	Y+4, r22	; 0x04
}
/*-----------------------------------------------------------*/

    21b4:	31 87       	std	Z+9, r19	; 0x09
    21b6:	20 87       	std	Z+8, r18	; 0x08
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
    21b8:	f9 01       	movw	r30, r18
    21ba:	80 81       	ld	r24, Z
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	80 83       	st	Z, r24
{
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	08 95       	ret

Disassembly of section .text.vListInsert:

00001cc0 <vListInsert>:
    ListItem_t * const pxIndex = pxList->pxIndex;

    /* Only effective when configASSERT() is also defined, these tests may catch
     * the list data structures being overwritten in memory.  They will not catch
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	eb 01       	movw	r28, r22
     * data errors caused by incorrect configuration or use of FreeRTOS. */
    listTEST_LIST_INTEGRITY( pxList );
    1cc6:	48 81       	ld	r20, Y
    1cc8:	59 81       	ldd	r21, Y+1	; 0x01

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    pxIndex->pxPrevious = pxNewListItem;

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1cca:	4f 3f       	cpi	r20, 0xFF	; 255
    1ccc:	2f ef       	ldi	r18, 0xFF	; 255
    1cce:	52 07       	cpc	r21, r18
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <vListInsert+0x1a>

    ( pxList->uxNumberOfItems )++;
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	a7 81       	ldd	r26, Z+7	; 0x07
    1cd6:	b0 85       	ldd	r27, Z+8	; 0x08
    1cd8:	0d c0       	rjmp	.+26     	; 0x1cf4 <vListInsert+0x34>
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1cda:	dc 01       	movw	r26, r24
    1cdc:	13 96       	adiw	r26, 0x03	; 3
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <vListInsert+0x22>
    1ce0:	df 01       	movw	r26, r30
    1ce2:	12 96       	adiw	r26, 0x02	; 2
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	13 97       	sbiw	r26, 0x03	; 3
    1cea:	20 81       	ld	r18, Z
    1cec:	31 81       	ldd	r19, Z+1	; 0x01
    1cee:	42 17       	cp	r20, r18
    1cf0:	53 07       	cpc	r21, r19
    1cf2:	b0 f7       	brcc	.-20     	; 0x1ce0 <vListInsert+0x20>
    else
    {
        /* *** NOTE ***********************************************************
        *  If you find your application is crashing here then likely causes are
        *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
        *  more tips, and ensure configASSERT() is defined!
    1cf4:	12 96       	adiw	r26, 0x02	; 2
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	13 97       	sbiw	r26, 0x03	; 3
    1cfc:	fb 83       	std	Y+3, r31	; 0x03
    1cfe:	ea 83       	std	Y+2, r30	; 0x02
        *  https://www.FreeRTOS.org/a00110.html#configASSERT
    1d00:	d5 83       	std	Z+5, r29	; 0x05
    1d02:	c4 83       	std	Z+4, r28	; 0x04
        *
    1d04:	bd 83       	std	Y+5, r27	; 0x05
    1d06:	ac 83       	std	Y+4, r26	; 0x04
        *   1) Stack overflow -
    1d08:	13 96       	adiw	r26, 0x03	; 3
    1d0a:	dc 93       	st	X, r29
    1d0c:	ce 93       	st	-X, r28
    1d0e:	12 97       	sbiw	r26, 0x02	; 2
        *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
        *   2) Incorrect interrupt priority assignment, especially on Cortex-M
        *      parts where numerically high priority values denote low actual
        *      interrupt priorities, which can seem counter intuitive.  See
    1d10:	99 87       	std	Y+9, r25	; 0x09
    1d12:	88 87       	std	Y+8, r24	; 0x08
        *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
        *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
    1d14:	fc 01       	movw	r30, r24
    1d16:	20 81       	ld	r18, Z
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	20 83       	st	Z, r18
        *      https://www.FreeRTOS.org/a00110.html
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret

Disassembly of section .text.uxListRemove:

00001f88 <uxListRemove>:
        *   3) Calling an API function from within a critical section or when
        *      the scheduler is suspended, or calling an API function that does
        *      not end in "FromISR" from an interrupt.
        *   4) Using a queue or semaphore before it has been initialised or
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	fc 01       	movw	r30, r24
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
    1f8e:	a0 85       	ldd	r26, Z+8	; 0x08
    1f90:	b1 85       	ldd	r27, Z+9	; 0x09
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
    1f92:	c2 81       	ldd	r28, Z+2	; 0x02
    1f94:	d3 81       	ldd	r29, Z+3	; 0x03
    1f96:	84 81       	ldd	r24, Z+4	; 0x04
    1f98:	95 81       	ldd	r25, Z+5	; 0x05
    1f9a:	9d 83       	std	Y+5, r25	; 0x05
    1f9c:	8c 83       	std	Y+4, r24	; 0x04
        **********************************************************************/
    1f9e:	c4 81       	ldd	r28, Z+4	; 0x04
    1fa0:	d5 81       	ldd	r29, Z+5	; 0x05
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	9b 83       	std	Y+3, r25	; 0x03
    1fa8:	8a 83       	std	Y+2, r24	; 0x02

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
        {
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	8d 91       	ld	r24, X+
    1fae:	9c 91       	ld	r25, X
    1fb0:	12 97       	sbiw	r26, 0x02	; 2
    1fb2:	e8 17       	cp	r30, r24
    1fb4:	f9 07       	cpc	r31, r25
    1fb6:	31 f4       	brne	.+12     	; 0x1fc4 <uxListRemove+0x3c>
    }

    1fb8:	84 81       	ldd	r24, Z+4	; 0x04
    1fba:	95 81       	ldd	r25, Z+5	; 0x05
    1fbc:	12 96       	adiw	r26, 0x02	; 2
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
    1fc2:	11 97       	sbiw	r26, 0x01	; 1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    pxNewListItem->pxPrevious = pxIterator;
    pxIterator->pxNext = pxNewListItem;

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    1fc4:	11 86       	std	Z+9, r1	; 0x09
    1fc6:	10 86       	std	Z+8, r1	; 0x08
    pxNewListItem->pxContainer = pxList;
    1fc8:	8c 91       	ld	r24, X
    1fca:	81 50       	subi	r24, 0x01	; 1
    1fcc:	8c 93       	st	X, r24

    ( pxList->uxNumberOfItems )++;
    1fce:	8c 91       	ld	r24, X
}
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

Disassembly of section .text.prvSetupTimerInterrupt:

00002632 <prvSetupTimerInterrupt>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    2632:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    2634:	89 ef       	ldi	r24, 0xF9	; 249
    2636:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    2638:	8b e0       	ldi	r24, 0x0B	; 11
    263a:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    263c:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    263e:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    2640:	89 bf       	out	0x39, r24	; 57
    2642:	08 95       	ret

Disassembly of section .text.pxPortInitialiseStack:

00000cf8 <pxPortInitialiseStack>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
 cf8:	31 e1       	ldi	r19, 0x11	; 17
 cfa:	fc 01       	movw	r30, r24
 cfc:	30 83       	st	Z, r19
 cfe:	31 97       	sbiw	r30, 0x01	; 1
 d00:	22 e2       	ldi	r18, 0x22	; 34
 d02:	20 83       	st	Z, r18
 d04:	31 97       	sbiw	r30, 0x01	; 1
 d06:	a3 e3       	ldi	r26, 0x33	; 51
 d08:	a0 83       	st	Z, r26
 d0a:	31 97       	sbiw	r30, 0x01	; 1
 d0c:	60 83       	st	Z, r22
 d0e:	31 97       	sbiw	r30, 0x01	; 1
 d10:	70 83       	st	Z, r23
 d12:	31 97       	sbiw	r30, 0x01	; 1
 d14:	10 82       	st	Z, r1
 d16:	31 97       	sbiw	r30, 0x01	; 1
 d18:	60 e8       	ldi	r22, 0x80	; 128
 d1a:	60 83       	st	Z, r22
 d1c:	31 97       	sbiw	r30, 0x01	; 1
 d1e:	10 82       	st	Z, r1
 d20:	31 97       	sbiw	r30, 0x01	; 1
 d22:	62 e0       	ldi	r22, 0x02	; 2
 d24:	60 83       	st	Z, r22
 d26:	31 97       	sbiw	r30, 0x01	; 1
 d28:	63 e0       	ldi	r22, 0x03	; 3
 d2a:	60 83       	st	Z, r22
 d2c:	31 97       	sbiw	r30, 0x01	; 1
 d2e:	64 e0       	ldi	r22, 0x04	; 4
 d30:	60 83       	st	Z, r22
 d32:	31 97       	sbiw	r30, 0x01	; 1
 d34:	65 e0       	ldi	r22, 0x05	; 5
 d36:	60 83       	st	Z, r22
 d38:	31 97       	sbiw	r30, 0x01	; 1
 d3a:	66 e0       	ldi	r22, 0x06	; 6
 d3c:	60 83       	st	Z, r22
 d3e:	31 97       	sbiw	r30, 0x01	; 1
 d40:	67 e0       	ldi	r22, 0x07	; 7
 d42:	60 83       	st	Z, r22
 d44:	31 97       	sbiw	r30, 0x01	; 1
 d46:	68 e0       	ldi	r22, 0x08	; 8
 d48:	60 83       	st	Z, r22
 d4a:	31 97       	sbiw	r30, 0x01	; 1
 d4c:	69 e0       	ldi	r22, 0x09	; 9
 d4e:	60 83       	st	Z, r22
 d50:	31 97       	sbiw	r30, 0x01	; 1
 d52:	60 e1       	ldi	r22, 0x10	; 16
 d54:	60 83       	st	Z, r22
 d56:	31 97       	sbiw	r30, 0x01	; 1
 d58:	30 83       	st	Z, r19
 d5a:	31 97       	sbiw	r30, 0x01	; 1
 d5c:	32 e1       	ldi	r19, 0x12	; 18
 d5e:	30 83       	st	Z, r19
 d60:	31 97       	sbiw	r30, 0x01	; 1
 d62:	33 e1       	ldi	r19, 0x13	; 19
 d64:	30 83       	st	Z, r19
 d66:	31 97       	sbiw	r30, 0x01	; 1
 d68:	34 e1       	ldi	r19, 0x14	; 20
 d6a:	30 83       	st	Z, r19
 d6c:	31 97       	sbiw	r30, 0x01	; 1
 d6e:	35 e1       	ldi	r19, 0x15	; 21
 d70:	30 83       	st	Z, r19
 d72:	31 97       	sbiw	r30, 0x01	; 1
 d74:	36 e1       	ldi	r19, 0x16	; 22
 d76:	30 83       	st	Z, r19
 d78:	31 97       	sbiw	r30, 0x01	; 1
 d7a:	37 e1       	ldi	r19, 0x17	; 23
 d7c:	30 83       	st	Z, r19
 d7e:	31 97       	sbiw	r30, 0x01	; 1
 d80:	38 e1       	ldi	r19, 0x18	; 24
 d82:	30 83       	st	Z, r19
 d84:	31 97       	sbiw	r30, 0x01	; 1
 d86:	39 e1       	ldi	r19, 0x19	; 25
 d88:	30 83       	st	Z, r19
 d8a:	31 97       	sbiw	r30, 0x01	; 1
 d8c:	30 e2       	ldi	r19, 0x20	; 32
 d8e:	30 83       	st	Z, r19
 d90:	31 97       	sbiw	r30, 0x01	; 1
 d92:	31 e2       	ldi	r19, 0x21	; 33
 d94:	30 83       	st	Z, r19
 d96:	31 97       	sbiw	r30, 0x01	; 1
 d98:	20 83       	st	Z, r18
 d9a:	31 97       	sbiw	r30, 0x01	; 1
 d9c:	23 e2       	ldi	r18, 0x23	; 35
 d9e:	20 83       	st	Z, r18
 da0:	31 97       	sbiw	r30, 0x01	; 1
 da2:	40 83       	st	Z, r20
 da4:	31 97       	sbiw	r30, 0x01	; 1
 da6:	50 83       	st	Z, r21
 da8:	31 97       	sbiw	r30, 0x01	; 1
 daa:	26 e2       	ldi	r18, 0x26	; 38
 dac:	20 83       	st	Z, r18
 dae:	31 97       	sbiw	r30, 0x01	; 1
 db0:	27 e2       	ldi	r18, 0x27	; 39
 db2:	20 83       	st	Z, r18
 db4:	31 97       	sbiw	r30, 0x01	; 1
 db6:	28 e2       	ldi	r18, 0x28	; 40
 db8:	20 83       	st	Z, r18
 dba:	31 97       	sbiw	r30, 0x01	; 1
 dbc:	29 e2       	ldi	r18, 0x29	; 41
 dbe:	20 83       	st	Z, r18
 dc0:	31 97       	sbiw	r30, 0x01	; 1
 dc2:	20 e3       	ldi	r18, 0x30	; 48
 dc4:	20 83       	st	Z, r18
 dc6:	31 97       	sbiw	r30, 0x01	; 1
 dc8:	21 e3       	ldi	r18, 0x31	; 49
 dca:	20 83       	st	Z, r18
 dcc:	86 97       	sbiw	r24, 0x26	; 38
 dce:	08 95       	ret

Disassembly of section .text.xPortStartScheduler:

00001d22 <xPortStartScheduler>:
    1d22:	0e 94 19 13 	call	0x2632	; 0x2632 <prvSetupTimerInterrupt>
    1d26:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1d2a:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1d2e:	cd 91       	ld	r28, X+
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	dd 91       	ld	r29, X+
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	ff 91       	pop	r31
    1d38:	ef 91       	pop	r30
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	bf 91       	pop	r27
    1d40:	af 91       	pop	r26
    1d42:	9f 91       	pop	r25
    1d44:	8f 91       	pop	r24
    1d46:	7f 91       	pop	r23
    1d48:	6f 91       	pop	r22
    1d4a:	5f 91       	pop	r21
    1d4c:	4f 91       	pop	r20
    1d4e:	3f 91       	pop	r19
    1d50:	2f 91       	pop	r18
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	bf 90       	pop	r11
    1d60:	af 90       	pop	r10
    1d62:	9f 90       	pop	r9
    1d64:	8f 90       	pop	r8
    1d66:	7f 90       	pop	r7
    1d68:	6f 90       	pop	r6
    1d6a:	5f 90       	pop	r5
    1d6c:	4f 90       	pop	r4
    1d6e:	3f 90       	pop	r3
    1d70:	2f 90       	pop	r2
    1d72:	1f 90       	pop	r1
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	0f 90       	pop	r0
    1d7a:	08 95       	ret
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	08 95       	ret

Disassembly of section .text.vPortEndScheduler:

0000276a <vPortEndScheduler>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    276a:	08 95       	ret

Disassembly of section .text.vPortYield:

00001100 <vPortYield>:
	{
		vTaskSwitchContext();
	}
	portRESTORE_CONTEXT();

	asm volatile ( "ret" );
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	0f 92       	push	r0
    1108:	1f 92       	push	r1
    110a:	11 24       	eor	r1, r1
    110c:	2f 92       	push	r2
    110e:	3f 92       	push	r3
    1110:	4f 92       	push	r4
    1112:	5f 92       	push	r5
    1114:	6f 92       	push	r6
    1116:	7f 92       	push	r7
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
    1148:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    114c:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1150:	0d b6       	in	r0, 0x3d	; 61
    1152:	0d 92       	st	X+, r0
    1154:	0e b6       	in	r0, 0x3e	; 62
    1156:	0d 92       	st	X+, r0
    1158:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <vTaskSwitchContext>
    115c:	a0 91 e3 06 	lds	r26, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1160:	b0 91 e4 06 	lds	r27, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1164:	cd 91       	ld	r28, X+
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	dd 91       	ld	r29, X+
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	5f 90       	pop	r5
    11a2:	4f 90       	pop	r4
    11a4:	3f 90       	pop	r3
    11a6:	2f 90       	pop	r2
    11a8:	1f 90       	pop	r1
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	08 95       	ret

Disassembly of section .text.__vector_7:

0000206c <__vector_7>:
	 * manual calls to taskYIELD();
	 */
	// Correct interrupt vector name for Timer1 Output Compare A
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal ) );
	void TIMER1_COMPA_vect( void )
	{
    206c:	1f 92       	push	r1
    206e:	0f 92       	push	r0
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	0f 92       	push	r0
    2074:	11 24       	eor	r1, r1
    2076:	2f 93       	push	r18
    2078:	3f 93       	push	r19
    207a:	4f 93       	push	r20
    207c:	5f 93       	push	r21
    207e:	6f 93       	push	r22
    2080:	7f 93       	push	r23
    2082:	8f 93       	push	r24
    2084:	9f 93       	push	r25
    2086:	af 93       	push	r26
    2088:	bf 93       	push	r27
    208a:	ef 93       	push	r30
    208c:	ff 93       	push	r31
		xTaskIncrementTick();
    208e:	0e 94 9e 03 	call	0x73c	; 0x73c <xTaskIncrementTick>
	}
    2092:	ff 91       	pop	r31
    2094:	ef 91       	pop	r30
    2096:	bf 91       	pop	r27
    2098:	af 91       	pop	r26
    209a:	9f 91       	pop	r25
    209c:	8f 91       	pop	r24
    209e:	7f 91       	pop	r23
    20a0:	6f 91       	pop	r22
    20a2:	5f 91       	pop	r21
    20a4:	4f 91       	pop	r20
    20a6:	3f 91       	pop	r19
    20a8:	2f 91       	pop	r18
    20aa:	0f 90       	pop	r0
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	0f 90       	pop	r0
    20b0:	1f 90       	pop	r1
    20b2:	18 95       	reti

Disassembly of section .text.prvIsQueueEmpty:

00002434 <prvIsQueueEmpty>:
     * updated. */
    taskENTER_CRITICAL();
    {
        int8_t cTxLock = pxQueue->cTxLock;

        /* See if data was added to the queue while it was locked. */
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	0f 92       	push	r0
        while( cTxLock > queueLOCKED_UNMODIFIED )
        {
    243a:	a8 2f       	mov	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	4a 96       	adiw	r24, 0x1a	; 26
    2440:	a1 1d       	adc	r26, r1
    2442:	fc 01       	movw	r30, r24
    2444:	84 91       	lpm	r24, Z
    2446:	a7 fd       	sbrc	r26, 7
    2448:	80 81       	ld	r24, Z
    244a:	81 11       	cpse	r24, r1
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <prvIsQueueEmpty+0x1e>
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <prvIsQueueEmpty+0x20>
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
                {
    2452:	80 e0       	ldi	r24, 0x00	; 0
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
                    {
                        /* The queue is a member of a queue set, and posting to
    2454:	0f 90       	pop	r0
    2456:	0f be       	out	0x3f, r0	; 63
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
    2458:	08 95       	ret

Disassembly of section .text.prvIsQueueFull:

000022c4 <prvIsQueueFull>:
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else
                    {
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	0f 92       	push	r0
                        break;
                    }
    22ca:	9b 01       	movw	r18, r22
    22cc:	48 2f       	mov	r20, r24
    22ce:	26 5e       	subi	r18, 0xE6	; 230
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	4f 4f       	sbci	r20, 0xFF	; 255
    22d4:	f9 01       	movw	r30, r18
    22d6:	24 91       	lpm	r18, Z
    22d8:	47 fd       	sbrc	r20, 7
    22da:	20 81       	ld	r18, Z
    22dc:	a8 2f       	mov	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	4b 96       	adiw	r24, 0x1b	; 27
    22e2:	a1 1d       	adc	r26, r1
    22e4:	fc 01       	movw	r30, r24
    22e6:	84 91       	lpm	r24, Z
    22e8:	a7 fd       	sbrc	r26, 7
    22ea:	80 81       	ld	r24, Z
    22ec:	28 13       	cpse	r18, r24
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <prvIsQueueFull+0x30>
                }
            }
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <prvIsQueueFull+0x32>
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
    22f4:	80 e0       	ldi	r24, 0x00	; 0
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22f6:	0f 90       	pop	r0
    22f8:	0f be       	out	0x3f, r0	; 63
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
    22fa:	08 95       	ret

Disassembly of section .text.prvCopyDataToQueue:

0000159c <prvCopyDataToQueue>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ec 01       	movw	r28, r24
    15a6:	02 2f       	mov	r16, r18
    15a8:	1a 8d       	ldd	r17, Y+26	; 0x1a
    15aa:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15ac:	22 23       	and	r18, r18
    15ae:	b9 f1       	breq	.+110    	; 0x161e <prvCopyDataToQueue+0x82>
    15b0:	01 11       	cpse	r16, r1
    15b2:	16 c0       	rjmp	.+44     	; 0x15e0 <prvCopyDataToQueue+0x44>
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ba:	0e 94 7e 11 	call	0x22fc	; 0x22fc <memcpy>
    15be:	2c 8d       	ldd	r18, Y+28	; 0x1c
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	82 0f       	add	r24, r18
    15c6:	91 1d       	adc	r25, r1
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	2c 81       	ldd	r18, Y+4	; 0x04
    15ce:	3d 81       	ldd	r19, Y+5	; 0x05
    15d0:	82 17       	cp	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	20 f1       	brcs	.+72     	; 0x161e <prvCopyDataToQueue+0x82>
    15d6:	88 81       	ld	r24, Y
    15d8:	99 81       	ldd	r25, Y+1	; 0x01
    15da:	9b 83       	std	Y+3, r25	; 0x03
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	1f c0       	rjmp	.+62     	; 0x161e <prvCopyDataToQueue+0x82>
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	8e 81       	ldd	r24, Y+6	; 0x06
    15e4:	9f 81       	ldd	r25, Y+7	; 0x07
    15e6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <memcpy>
    15ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 95       	neg	r25
    15f0:	81 95       	neg	r24
    15f2:	91 09       	sbc	r25, r1
    15f4:	2e 81       	ldd	r18, Y+6	; 0x06
    15f6:	3f 81       	ldd	r19, Y+7	; 0x07
    15f8:	28 0f       	add	r18, r24
    15fa:	39 1f       	adc	r19, r25
    15fc:	3f 83       	std	Y+7, r19	; 0x07
    15fe:	2e 83       	std	Y+6, r18	; 0x06
    1600:	48 81       	ld	r20, Y
    1602:	59 81       	ldd	r21, Y+1	; 0x01
    1604:	24 17       	cp	r18, r20
    1606:	35 07       	cpc	r19, r21
    1608:	30 f4       	brcc	.+12     	; 0x1616 <prvCopyDataToQueue+0x7a>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	82 0f       	add	r24, r18
    1610:	93 1f       	adc	r25, r19
    1612:	9f 83       	std	Y+7, r25	; 0x07
    1614:	8e 83       	std	Y+6, r24	; 0x06
    1616:	02 30       	cpi	r16, 0x02	; 2
    1618:	11 f4       	brne	.+4      	; 0x161e <prvCopyDataToQueue+0x82>
    161a:	11 11       	cpse	r17, r1
    161c:	11 50       	subi	r17, 0x01	; 1
    161e:	1f 5f       	subi	r17, 0xFF	; 255
    1620:	1a 8f       	std	Y+26, r17	; 0x1a
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

Disassembly of section .text.prvUnlockQueue:

00001aa4 <prvUnlockQueue>:
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
        }

    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    }

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	0f 92       	push	r0
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
    1ab2:	1e 8d       	ldd	r17, Y+30	; 0x1e
{
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;
    1ab4:	0d c0       	rjmp	.+26     	; 0x1ad0 <prvUnlockQueue+0x2c>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
    1ab6:	89 89       	ldd	r24, Y+17	; 0x11
    1ab8:	88 23       	and	r24, r24
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <prvUnlockQueue+0x30>
        }

    1abc:	be 01       	movw	r22, r28
    1abe:	6f 5e       	subi	r22, 0xEF	; 239
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	80 e8       	ldi	r24, 0x80	; 128
    1ac4:	0e 94 82 0a 	call	0x1504	; 0x1504 <xTaskRemoveFromEventList>
    1ac8:	81 11       	cpse	r24, r1
        if( xPosition == queueOVERWRITE )
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
            {
    1aca:	0e 94 a5 13 	call	0x274a	; 0x274a <vTaskMissedYield>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
    1ace:	11 50       	subi	r17, 0x01	; 1
static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    BaseType_t xReturn = pdFALSE;
    UBaseType_t uxMessagesWaiting;
    1ad0:	11 16       	cp	r1, r17
    1ad2:	8c f3       	brlt	.-30     	; 0x1ab6 <prvUnlockQueue+0x12>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	8e 8f       	std	Y+30, r24	; 0x1e
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;

    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    return xReturn;
}
/*-----------------------------------------------------------*/
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	0f 92       	push	r0

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
    1ae2:	1d 8d       	ldd	r17, Y+29	; 0x1d
                                  void * const pvBuffer )
{
    1ae4:	0d c0       	rjmp	.+26     	; 0x1b00 <prvUnlockQueue+0x5c>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    {
    1ae6:	88 85       	ldd	r24, Y+8	; 0x08
    1ae8:	88 23       	and	r24, r24
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <prvUnlockQueue+0x60>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */

    1aec:	be 01       	movw	r22, r28
    1aee:	68 5f       	subi	r22, 0xF8	; 248
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	80 e8       	ldi	r24, 0x80	; 128
    1af4:	0e 94 82 0a 	call	0x1504	; 0x1504 <xTaskRemoveFromEventList>
    1af8:	81 11       	cpse	r24, r1
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
        {
    1afa:	0e 94 a5 13 	call	0x274a	; 0x274a <vTaskMissedYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

    1afe:	11 50       	subi	r17, 0x01	; 1
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    1b00:	11 16       	cp	r1, r17
    1b02:	8c f3       	brlt	.-30     	; 0x1ae6 <prvUnlockQueue+0x42>
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
    1b04:	8f ef       	ldi	r24, 0xFF	; 255
    1b06:	8d 8f       	std	Y+29, r24	; 0x1d

    /* The lock counts contains the number of extra data items placed or
    1b08:	0f 90       	pop	r0
    1b0a:	0f be       	out	0x3f, r0	; 63
     * removed from the queue while the queue was locked.  When a queue is
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	08 95       	ret

Disassembly of section .text.xQueueGenericReset:

000016be <xQueueGenericReset>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	ec 01       	movw	r28, r24
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	0f 92       	push	r0
    16ca:	e8 81       	ld	r30, Y
    16cc:	f9 81       	ldd	r31, Y+1	; 0x01
    16ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	82 9f       	mul	r24, r18
    16d8:	a0 01       	movw	r20, r0
    16da:	83 9f       	mul	r24, r19
    16dc:	50 0d       	add	r21, r0
    16de:	92 9f       	mul	r25, r18
    16e0:	50 0d       	add	r21, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	4e 0f       	add	r20, r30
    16e6:	5f 1f       	adc	r21, r31
    16e8:	5d 83       	std	Y+5, r21	; 0x05
    16ea:	4c 83       	std	Y+4, r20	; 0x04
    16ec:	1a 8e       	std	Y+26, r1	; 0x1a
    16ee:	fb 83       	std	Y+3, r31	; 0x03
    16f0:	ea 83       	std	Y+2, r30	; 0x02
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	28 9f       	mul	r18, r24
    16f6:	a0 01       	movw	r20, r0
    16f8:	29 9f       	mul	r18, r25
    16fa:	50 0d       	add	r21, r0
    16fc:	38 9f       	mul	r19, r24
    16fe:	50 0d       	add	r21, r0
    1700:	11 24       	eor	r1, r1
    1702:	cf 01       	movw	r24, r30
    1704:	84 0f       	add	r24, r20
    1706:	95 1f       	adc	r25, r21
    1708:	9f 83       	std	Y+7, r25	; 0x07
    170a:	8e 83       	std	Y+6, r24	; 0x06
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	8d 8f       	std	Y+29, r24	; 0x1d
    1710:	8e 8f       	std	Y+30, r24	; 0x1e
    1712:	61 11       	cpse	r22, r1
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <xQueueGenericReset+0x6a>
    1716:	88 85       	ldd	r24, Y+8	; 0x08
    1718:	88 23       	and	r24, r24
    171a:	71 f0       	breq	.+28     	; 0x1738 <xQueueGenericReset+0x7a>
    171c:	28 96       	adiw	r28, 0x08	; 8
    171e:	be 01       	movw	r22, r28
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	0e 94 82 0a 	call	0x1504	; 0x1504 <xTaskRemoveFromEventList>
    1726:	08 c0       	rjmp	.+16     	; 0x1738 <xQueueGenericReset+0x7a>
    1728:	ce 01       	movw	r24, r28
    172a:	08 96       	adiw	r24, 0x08	; 8
    172c:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1730:	ce 01       	movw	r24, r28
    1732:	41 96       	adiw	r24, 0x11	; 17
    1734:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

Disassembly of section .text.prvInitialiseNewQueue:

0000245a <prvInitialiseNewQueue>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	f8 01       	movw	r30, r16
    {
        Queue_t * pxNewQueue = NULL;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

    2460:	61 11       	cpse	r22, r1
    2462:	03 c0       	rjmp	.+6      	; 0x246a <prvInitialiseNewQueue+0x10>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
        {
    2464:	11 83       	std	Z+1, r17	; 0x01
    2466:	00 83       	st	Z, r16
    2468:	02 c0       	rjmp	.+4      	; 0x246e <prvInitialiseNewQueue+0x14>
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    246a:	51 83       	std	Z+1, r21	; 0x01
    246c:	40 83       	st	Z, r20
            /* Allocate the queue and storage area.  Justification for MISRA
             * deviation as follows:  pvPortMalloc() always ensures returned memory
             * blocks are aligned per the requirements of the MCU stack.  In this case
             * pvPortMalloc() must return a pointer that is guaranteed to meet the
             * alignment requirements of the Queue_t structure - which in this case
    246e:	83 8f       	std	Z+27, r24	; 0x1b
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
    2470:	64 8f       	std	Z+28, r22	; 0x1c
             * are greater than or equal to the pointer to char requirements the cast
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	cf 01       	movw	r24, r30
    2476:	0e 94 5f 0b 	call	0x16be	; 0x16be <xQueueGenericReset>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */

                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	08 95       	ret

Disassembly of section .text.xQueueGenericCreate:

00001e94 <xQueueGenericCreate>:

    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	e8 2e       	mov	r14, r24
    1ea4:	f6 2e       	mov	r15, r22
    1ea6:	d4 2e       	mov	r13, r20
        Queue_t * pxNewQueue = NULL;

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );

    1ea8:	66 23       	and	r22, r22
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <xQueueGenericCreate+0x20>
            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
        {
            #if ( configASSERT_DEFINED == 1 )
    1eac:	86 9f       	mul	r24, r22
    1eae:	c0 01       	movw	r24, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <xQueueGenericCreate+0x24>
         * supplied. */
        configASSERT( pxStaticQueue );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
            ( pxStaticQueue != NULL ) &&

    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
            }
            #endif /* configASSERT_DEFINED */

    1eb8:	4f 96       	adiw	r24, 0x1f	; 31
    1eba:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <pvPortMalloc>
    1ebe:	ec 01       	movw	r28, r24
            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	49 f0       	breq	.+18     	; 0x1ed6 <xQueueGenericCreate+0x42>
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
        }
        else
        {
    1ec4:	8c 01       	movw	r16, r24
    1ec6:	2d 2d       	mov	r18, r13
    1ec8:	ac 01       	movw	r20, r24
    1eca:	41 5e       	subi	r20, 0xE1	; 225
    1ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ece:	6f 2d       	mov	r22, r15
    1ed0:	8e 2d       	mov	r24, r14
    1ed2:	0e 94 2d 12 	call	0x245a	; 0x245a <prvInitialiseNewQueue>

        return pxNewQueue;
    }

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	08 95       	ret

Disassembly of section .text.xQueueGenericSend:

0000061e <xQueueGenericSend>:
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 61e:	6f 92       	push	r6
 620:	7f 92       	push	r7
 622:	8f 92       	push	r8
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	00 d0       	rcall	.+0      	; 0x632 <xQueueGenericSend+0x14>
 632:	00 d0       	rcall	.+0      	; 0x634 <xQueueGenericSend+0x16>
 634:	0f 92       	push	r0
 636:	cd b7       	in	r28, 0x3d	; 61
 638:	de b7       	in	r29, 0x3e	; 62
 63a:	7c 01       	movw	r14, r24
 63c:	3a 01       	movw	r6, r20
 63e:	86 2e       	mov	r8, r22
 640:	3d 83       	std	Y+5, r19	; 0x05
 642:	2c 83       	std	Y+4, r18	; 0x04
 644:	10 e0       	ldi	r17, 0x00	; 0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	0f 92       	push	r0
 64c:	f7 01       	movw	r30, r14
 64e:	92 8d       	ldd	r25, Z+26	; 0x1a
 650:	83 8d       	ldd	r24, Z+27	; 0x1b
 652:	98 17       	cp	r25, r24
 654:	10 f0       	brcs	.+4      	; 0x65a <xQueueGenericSend+0x3c>
 656:	02 30       	cpi	r16, 0x02	; 2
 658:	a9 f4       	brne	.+42     	; 0x684 <xQueueGenericSend+0x66>
 65a:	20 2f       	mov	r18, r16
 65c:	68 2d       	mov	r22, r8
 65e:	a3 01       	movw	r20, r6
 660:	c7 01       	movw	r24, r14
 662:	0e 94 ce 0a 	call	0x159c	; 0x159c <prvCopyDataToQueue>
 666:	f7 01       	movw	r30, r14
 668:	81 89       	ldd	r24, Z+17	; 0x11
 66a:	88 23       	and	r24, r24
 66c:	39 f0       	breq	.+14     	; 0x67c <xQueueGenericSend+0x5e>
 66e:	f1 e1       	ldi	r31, 0x11	; 17
 670:	ef 0e       	add	r14, r31
 672:	f1 1c       	adc	r15, r1
 674:	b7 01       	movw	r22, r14
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	0e 94 82 0a 	call	0x1504	; 0x1504 <xTaskRemoveFromEventList>
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	4d c0       	rjmp	.+154    	; 0x71e <xQueueGenericSend+0x100>
 684:	8c 81       	ldd	r24, Y+4	; 0x04
 686:	9d 81       	ldd	r25, Y+5	; 0x05
 688:	89 2b       	or	r24, r25
 68a:	21 f4       	brne	.+8      	; 0x694 <xQueueGenericSend+0x76>
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	45 c0       	rjmp	.+138    	; 0x71e <xQueueGenericSend+0x100>
 694:	11 11       	cpse	r17, r1
 696:	05 c0       	rjmp	.+10     	; 0x6a2 <xQueueGenericSend+0x84>
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskInternalSetTimeOutState>
 6a0:	11 e0       	ldi	r17, 0x01	; 1
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <vTaskSuspendAll>
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	f8 94       	cli
 6ae:	0f 92       	push	r0
 6b0:	f7 01       	movw	r30, r14
 6b2:	85 8d       	ldd	r24, Z+29	; 0x1d
 6b4:	8f 3f       	cpi	r24, 0xFF	; 255
 6b6:	09 f4       	brne	.+2      	; 0x6ba <xQueueGenericSend+0x9c>
 6b8:	15 8e       	std	Z+29, r1	; 0x1d
 6ba:	f7 01       	movw	r30, r14
 6bc:	86 8d       	ldd	r24, Z+30	; 0x1e
 6be:	8f 3f       	cpi	r24, 0xFF	; 255
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <xQueueGenericSend+0xa6>
 6c2:	16 8e       	std	Z+30, r1	; 0x1e
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	be 01       	movw	r22, r28
 6ca:	6c 5f       	subi	r22, 0xFC	; 252
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	ce 01       	movw	r24, r28
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xTaskCheckForTimeOut>
 6d6:	81 11       	cpse	r24, r1
 6d8:	1c c0       	rjmp	.+56     	; 0x712 <xQueueGenericSend+0xf4>
 6da:	b7 01       	movw	r22, r14
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	0e 94 62 11 	call	0x22c4	; 0x22c4 <prvIsQueueFull>
 6e2:	88 23       	and	r24, r24
 6e4:	81 f0       	breq	.+32     	; 0x706 <xQueueGenericSend+0xe8>
 6e6:	6c 81       	ldd	r22, Y+4	; 0x04
 6e8:	7d 81       	ldd	r23, Y+5	; 0x05
 6ea:	c7 01       	movw	r24, r14
 6ec:	08 96       	adiw	r24, 0x08	; 8
 6ee:	0e 94 40 12 	call	0x2480	; 0x2480 <vTaskPlaceOnEventList>
 6f2:	c7 01       	movw	r24, r14
 6f4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <prvUnlockQueue>
 6f8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
 6fc:	81 11       	cpse	r24, r1
 6fe:	a3 cf       	rjmp	.-186    	; 0x646 <xQueueGenericSend+0x28>
 700:	0e 94 80 08 	call	0x1100	; 0x1100 <vPortYield>
 704:	a0 cf       	rjmp	.-192    	; 0x646 <xQueueGenericSend+0x28>
 706:	c7 01       	movw	r24, r14
 708:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <prvUnlockQueue>
 70c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
 710:	9a cf       	rjmp	.-204    	; 0x646 <xQueueGenericSend+0x28>
 712:	c7 01       	movw	r24, r14
 714:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <prvUnlockQueue>
 718:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	ff 90       	pop	r15
 732:	ef 90       	pop	r14
 734:	8f 90       	pop	r8
 736:	7f 90       	pop	r7
 738:	6f 90       	pop	r6
 73a:	08 95       	ret

Disassembly of section .text.xQueueSemaphoreTake:

00000850 <xQueueSemaphoreTake>:
 850:	ff 92       	push	r15
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	00 d0       	rcall	.+0      	; 0x85c <xQueueSemaphoreTake+0xc>
 85c:	00 d0       	rcall	.+0      	; 0x85e <xQueueSemaphoreTake+0xe>
 85e:	0f 92       	push	r0
 860:	cd b7       	in	r28, 0x3d	; 61
 862:	de b7       	in	r29, 0x3e	; 62
 864:	8c 01       	movw	r16, r24
 866:	7d 83       	std	Y+5, r23	; 0x05
 868:	6c 83       	std	Y+4, r22	; 0x04
 86a:	f1 2c       	mov	r15, r1
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	f8 94       	cli
 870:	0f 92       	push	r0
 872:	f8 01       	movw	r30, r16
 874:	82 8d       	ldd	r24, Z+26	; 0x1a
 876:	88 23       	and	r24, r24
 878:	79 f0       	breq	.+30     	; 0x898 <__stack+0x39>
 87a:	81 50       	subi	r24, 0x01	; 1
 87c:	82 8f       	std	Z+26, r24	; 0x1a
 87e:	80 85       	ldd	r24, Z+8	; 0x08
 880:	88 23       	and	r24, r24
 882:	31 f0       	breq	.+12     	; 0x890 <__stack+0x31>
 884:	08 5f       	subi	r16, 0xF8	; 248
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	b8 01       	movw	r22, r16
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	0e 94 82 0a 	call	0x1504	; 0x1504 <xTaskRemoveFromEventList>
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	55 c0       	rjmp	.+170    	; 0x942 <__stack+0xe3>
 898:	8c 81       	ldd	r24, Y+4	; 0x04
 89a:	9d 81       	ldd	r25, Y+5	; 0x05
 89c:	89 2b       	or	r24, r25
 89e:	21 f4       	brne	.+8      	; 0x8a8 <__stack+0x49>
 8a0:	0f 90       	pop	r0
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	4d c0       	rjmp	.+154    	; 0x942 <__stack+0xe3>
 8a8:	f1 10       	cpse	r15, r1
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <__stack+0x59>
 8ac:	ce 01       	movw	r24, r28
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskInternalSetTimeOutState>
 8b4:	ff 24       	eor	r15, r15
 8b6:	f3 94       	inc	r15
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <vTaskSuspendAll>
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	f8 94       	cli
 8c4:	0f 92       	push	r0
 8c6:	f8 01       	movw	r30, r16
 8c8:	85 8d       	ldd	r24, Z+29	; 0x1d
 8ca:	8f 3f       	cpi	r24, 0xFF	; 255
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <__stack+0x71>
 8ce:	15 8e       	std	Z+29, r1	; 0x1d
 8d0:	f8 01       	movw	r30, r16
 8d2:	86 8d       	ldd	r24, Z+30	; 0x1e
 8d4:	8f 3f       	cpi	r24, 0xFF	; 255
 8d6:	09 f4       	brne	.+2      	; 0x8da <__stack+0x7b>
 8d8:	16 8e       	std	Z+30, r1	; 0x1e
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	be 01       	movw	r22, r28
 8e0:	6c 5f       	subi	r22, 0xFC	; 252
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	ce 01       	movw	r24, r28
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xTaskCheckForTimeOut>
 8ec:	81 11       	cpse	r24, r1
 8ee:	1c c0       	rjmp	.+56     	; 0x928 <__stack+0xc9>
 8f0:	b8 01       	movw	r22, r16
 8f2:	80 e8       	ldi	r24, 0x80	; 128
 8f4:	0e 94 1a 12 	call	0x2434	; 0x2434 <prvIsQueueEmpty>
 8f8:	88 23       	and	r24, r24
 8fa:	81 f0       	breq	.+32     	; 0x91c <__stack+0xbd>
 8fc:	6c 81       	ldd	r22, Y+4	; 0x04
 8fe:	7d 81       	ldd	r23, Y+5	; 0x05
 900:	c8 01       	movw	r24, r16
 902:	41 96       	adiw	r24, 0x11	; 17
 904:	0e 94 40 12 	call	0x2480	; 0x2480 <vTaskPlaceOnEventList>
 908:	c8 01       	movw	r24, r16
 90a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <prvUnlockQueue>
 90e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
 912:	81 11       	cpse	r24, r1
 914:	ab cf       	rjmp	.-170    	; 0x86c <__stack+0xd>
 916:	0e 94 80 08 	call	0x1100	; 0x1100 <vPortYield>
 91a:	a8 cf       	rjmp	.-176    	; 0x86c <__stack+0xd>
 91c:	c8 01       	movw	r24, r16
 91e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <prvUnlockQueue>
 922:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
 926:	a2 cf       	rjmp	.-188    	; 0x86c <__stack+0xd>
 928:	c8 01       	movw	r24, r16
 92a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <prvUnlockQueue>
 92e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
 932:	b8 01       	movw	r22, r16
 934:	80 e8       	ldi	r24, 0x80	; 128
 936:	0e 94 1a 12 	call	0x2434	; 0x2434 <prvIsQueueEmpty>
 93a:	88 23       	and	r24, r24
 93c:	09 f4       	brne	.+2      	; 0x940 <__stack+0xe1>
 93e:	96 cf       	rjmp	.-212    	; 0x86c <__stack+0xd>
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	ff 90       	pop	r15
 956:	08 95       	ret

Disassembly of section .text.prvTaskIsTaskSuspended:

000021c6 <prvTaskIsTaskSuspended>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    21c6:	a0 e8       	ldi	r26, 0x80	; 128
    21c8:	9c 01       	movw	r18, r24
    21ca:	4a 2f       	mov	r20, r26
    21cc:	26 5f       	subi	r18, 0xF6	; 246
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	4f 4f       	sbci	r20, 0xFF	; 255
    21d2:	f9 01       	movw	r30, r18
    21d4:	54 2f       	mov	r21, r20
    21d6:	0e 94 33 13 	call	0x2666	; 0x2666 <__xload_2>
    21da:	66 5a       	subi	r22, 0xA6	; 166
    21dc:	76 40       	sbci	r23, 0x06	; 6
    21de:	71 f4       	brne	.+28     	; 0x21fc <prvTaskIsTaskSuspended+0x36>
    21e0:	44 96       	adiw	r24, 0x14	; 20
    21e2:	a1 1d       	adc	r26, r1
    21e4:	fc 01       	movw	r30, r24
    21e6:	5a 2f       	mov	r21, r26
    21e8:	0e 94 33 13 	call	0x2666	; 0x2666 <__xload_2>
    21ec:	86 e0       	ldi	r24, 0x06	; 6
    21ee:	68 3b       	cpi	r22, 0xB8	; 184
    21f0:	78 07       	cpc	r23, r24
    21f2:	31 f0       	breq	.+12     	; 0x2200 <prvTaskIsTaskSuspended+0x3a>
    21f4:	67 2b       	or	r22, r23
    21f6:	31 f0       	breq	.+12     	; 0x2204 <prvTaskIsTaskSuspended+0x3e>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	08 95       	ret
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	08 95       	ret
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	08 95       	ret
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	08 95       	ret

Disassembly of section .text.prvResetNextTaskUnblockTime:

00002286 <prvResetNextTaskUnblockTime>:
    2286:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
    228a:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
    228e:	80 81       	ld	r24, Z
    2290:	81 11       	cpse	r24, r1
    2292:	07 c0       	rjmp	.+14     	; 0x22a2 <prvResetNextTaskUnblockTime+0x1c>
    2294:	8f ef       	ldi	r24, 0xFF	; 255
    2296:	9f ef       	ldi	r25, 0xFF	; 255
    2298:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
    229c:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
    22a0:	08 95       	ret
    22a2:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
    22a6:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
    22aa:	05 80       	ldd	r0, Z+5	; 0x05
    22ac:	f6 81       	ldd	r31, Z+6	; 0x06
    22ae:	e0 2d       	mov	r30, r0
    22b0:	06 80       	ldd	r0, Z+6	; 0x06
    22b2:	f7 81       	ldd	r31, Z+7	; 0x07
    22b4:	e0 2d       	mov	r30, r0
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
    22be:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
    22c2:	08 95       	ret

Disassembly of section .text.prvDeleteTCB:

0000257a <prvDeleteTCB>:
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	ec 01       	movw	r28, r24
    2580:	8f 89       	ldd	r24, Y+23	; 0x17
    2582:	98 8d       	ldd	r25, Y+24	; 0x18
    2584:	0e 94 b4 13 	call	0x2768	; 0x2768 <vPortFree>
    2588:	ce 01       	movw	r24, r28
    258a:	0e 94 b4 13 	call	0x2768	; 0x2768 <vPortFree>
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	08 95       	ret

Disassembly of section .text.prvInitialiseNewTask:

00000958 <prvInitialiseNewTask>:
 958:	6f 92       	push	r6
 95a:	7f 92       	push	r7
 95c:	8f 92       	push	r8
 95e:	9f 92       	push	r9
 960:	af 92       	push	r10
 962:	bf 92       	push	r11
 964:	cf 92       	push	r12
 966:	df 92       	push	r13
 968:	ef 92       	push	r14
 96a:	ff 92       	push	r15
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	3c 01       	movw	r6, r24
 97a:	a6 2f       	mov	r26, r22
 97c:	ca 01       	movw	r24, r20
 97e:	f4 01       	movw	r30, r8
 980:	47 89       	ldd	r20, Z+23	; 0x17
 982:	50 8d       	ldd	r21, Z+24	; 0x18
 984:	01 50       	subi	r16, 0x01	; 1
 986:	11 09       	sbc	r17, r1
 988:	04 0f       	add	r16, r20
 98a:	15 1f       	adc	r17, r21
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	a1 05       	cpc	r26, r1
 990:	d1 f4       	brne	.+52     	; 0x9c6 <prvInitialiseNewTask+0x6e>
 992:	1f c0       	rjmp	.+62     	; 0x9d2 <prvInitialiseNewTask+0x7a>
 994:	27 2f       	mov	r18, r23
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	ac 01       	movw	r20, r24
 99a:	6a 2f       	mov	r22, r26
 99c:	42 0f       	add	r20, r18
 99e:	53 1f       	adc	r21, r19
 9a0:	61 1d       	adc	r22, r1
 9a2:	37 fd       	sbrc	r19, 7
 9a4:	6a 95       	dec	r22
 9a6:	fa 01       	movw	r30, r20
 9a8:	b4 91       	lpm	r27, Z
 9aa:	67 fd       	sbrc	r22, 7
 9ac:	b0 81       	ld	r27, Z
 9ae:	f4 01       	movw	r30, r8
 9b0:	e2 0f       	add	r30, r18
 9b2:	f3 1f       	adc	r31, r19
 9b4:	b1 8f       	std	Z+25, r27	; 0x19
 9b6:	fa 01       	movw	r30, r20
 9b8:	24 91       	lpm	r18, Z
 9ba:	67 fd       	sbrc	r22, 7
 9bc:	20 81       	ld	r18, Z
 9be:	22 23       	and	r18, r18
 9c0:	29 f0       	breq	.+10     	; 0x9cc <prvInitialiseNewTask+0x74>
 9c2:	7f 5f       	subi	r23, 0xFF	; 255
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <prvInitialiseNewTask+0x70>
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	78 30       	cpi	r23, 0x08	; 8
 9ca:	20 f3       	brcs	.-56     	; 0x994 <prvInitialiseNewTask+0x3c>
 9cc:	f4 01       	movw	r30, r8
 9ce:	10 a2       	std	Z+32, r1	; 0x20
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <prvInitialiseNewTask+0x7e>
 9d2:	f4 01       	movw	r30, r8
 9d4:	11 8e       	std	Z+25, r1	; 0x19
 9d6:	f9 e0       	ldi	r31, 0x09	; 9
 9d8:	fc 15       	cp	r31, r12
 9da:	20 f4       	brcc	.+8      	; 0x9e4 <prvInitialiseNewTask+0x8c>
 9dc:	0f 2e       	mov	r0, r31
 9de:	f9 e0       	ldi	r31, 0x09	; 9
 9e0:	cf 2e       	mov	r12, r31
 9e2:	f0 2d       	mov	r31, r0
 9e4:	f4 01       	movw	r30, r8
 9e6:	c6 8a       	std	Z+22, r12	; 0x16
 9e8:	c4 01       	movw	r24, r8
 9ea:	02 96       	adiw	r24, 0x02	; 2
 9ec:	0e 94 a1 13 	call	0x2742	; 0x2742 <vListInitialiseItem>
 9f0:	c4 01       	movw	r24, r8
 9f2:	0c 96       	adiw	r24, 0x0c	; 12
 9f4:	0e 94 a1 13 	call	0x2742	; 0x2742 <vListInitialiseItem>
 9f8:	f4 01       	movw	r30, r8
 9fa:	91 86       	std	Z+9, r9	; 0x09
 9fc:	80 86       	std	Z+8, r8	; 0x08
 9fe:	8a e0       	ldi	r24, 0x0A	; 10
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	8c 19       	sub	r24, r12
 a04:	91 09       	sbc	r25, r1
 a06:	95 87       	std	Z+13, r25	; 0x0d
 a08:	84 87       	std	Z+12, r24	; 0x0c
 a0a:	93 8a       	std	Z+19, r9	; 0x13
 a0c:	82 8a       	std	Z+18, r8	; 0x12
 a0e:	11 a2       	std	Z+33, r1	; 0x21
 a10:	12 a2       	std	Z+34, r1	; 0x22
 a12:	13 a2       	std	Z+35, r1	; 0x23
 a14:	14 a2       	std	Z+36, r1	; 0x24
 a16:	15 a2       	std	Z+37, r1	; 0x25
 a18:	a7 01       	movw	r20, r14
 a1a:	b3 01       	movw	r22, r6
 a1c:	c8 01       	movw	r24, r16
 a1e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <pxPortInitialiseStack>
 a22:	f4 01       	movw	r30, r8
 a24:	91 83       	std	Z+1, r25	; 0x01
 a26:	80 83       	st	Z, r24
 a28:	a1 14       	cp	r10, r1
 a2a:	b1 04       	cpc	r11, r1
 a2c:	19 f0       	breq	.+6      	; 0xa34 <prvInitialiseNewTask+0xdc>
 a2e:	f5 01       	movw	r30, r10
 a30:	91 82       	std	Z+1, r9	; 0x01
 a32:	80 82       	st	Z, r8
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	ff 90       	pop	r15
 a3e:	ef 90       	pop	r14
 a40:	df 90       	pop	r13
 a42:	cf 90       	pop	r12
 a44:	bf 90       	pop	r11
 a46:	af 90       	pop	r10
 a48:	9f 90       	pop	r9
 a4a:	8f 90       	pop	r8
 a4c:	7f 90       	pop	r7
 a4e:	6f 90       	pop	r6
 a50:	08 95       	ret

Disassembly of section .text.prvInitialiseTaskLists:

00001b14 <prvInitialiseTaskLists>:
    1b14:	cf 93       	push	r28
    1b16:	c0 e0       	ldi	r28, 0x00	; 0
    1b18:	10 c0       	rjmp	.+32     	; 0x1b3a <prvInitialiseTaskLists+0x26>
    1b1a:	8c 2f       	mov	r24, r28
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9c 01       	movw	r18, r24
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	22 0f       	add	r18, r18
    1b2a:	33 1f       	adc	r19, r19
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	84 5b       	subi	r24, 0xB4	; 180
    1b32:	99 4f       	sbci	r25, 0xF9	; 249
    1b34:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1b38:	cf 5f       	subi	r28, 0xFF	; 255
    1b3a:	ca 30       	cpi	r28, 0x0A	; 10
    1b3c:	70 f3       	brcs	.-36     	; 0x1b1a <prvInitialiseTaskLists+0x6>
    1b3e:	8a ec       	ldi	r24, 0xCA	; 202
    1b40:	96 e0       	ldi	r25, 0x06	; 6
    1b42:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1b46:	81 ec       	ldi	r24, 0xC1	; 193
    1b48:	96 e0       	ldi	r25, 0x06	; 6
    1b4a:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1b4e:	88 eb       	ldi	r24, 0xB8	; 184
    1b50:	96 e0       	ldi	r25, 0x06	; 6
    1b52:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1b56:	8f ea       	ldi	r24, 0xAF	; 175
    1b58:	96 e0       	ldi	r25, 0x06	; 6
    1b5a:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1b5e:	86 ea       	ldi	r24, 0xA6	; 166
    1b60:	96 e0       	ldi	r25, 0x06	; 6
    1b62:	0e 94 af 12 	call	0x255e	; 0x255e <vListInitialise>
    1b66:	8a ec       	ldi	r24, 0xCA	; 202
    1b68:	96 e0       	ldi	r25, 0x06	; 6
    1b6a:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <pxDelayedTaskList+0x1>
    1b6e:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <pxDelayedTaskList>
    1b72:	81 ec       	ldi	r24, 0xC1	; 193
    1b74:	96 e0       	ldi	r25, 0x06	; 6
    1b76:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
    1b7a:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxOverflowDelayedTaskList>
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

Disassembly of section .text.prvAddNewTaskToReadyList:

00001262 <prvAddNewTaskToReadyList>:
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	0f 92       	push	r0
    126e:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxCurrentNumberOfTasks>
    1278:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    127c:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1280:	89 2b       	or	r24, r25
    1282:	59 f4       	brne	.+22     	; 0x129a <prvAddNewTaskToReadyList+0x38>
    1284:	d0 93 e4 06 	sts	0x06E4, r29	; 0x8006e4 <pxCurrentTCB+0x1>
    1288:	c0 93 e3 06 	sts	0x06E3, r28	; 0x8006e3 <pxCurrentTCB>
    128c:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	99 f4       	brne	.+38     	; 0x12ba <prvAddNewTaskToReadyList+0x58>
    1294:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <prvInitialiseTaskLists>
    1298:	10 c0       	rjmp	.+32     	; 0x12ba <prvAddNewTaskToReadyList+0x58>
    129a:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    129e:	81 11       	cpse	r24, r1
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <prvAddNewTaskToReadyList+0x58>
    12a2:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    12a6:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    12aa:	96 89       	ldd	r25, Z+22	; 0x16
    12ac:	8e 89       	ldd	r24, Y+22	; 0x16
    12ae:	89 17       	cp	r24, r25
    12b0:	20 f0       	brcs	.+8      	; 0x12ba <prvAddNewTaskToReadyList+0x58>
    12b2:	d0 93 e4 06 	sts	0x06E4, r29	; 0x8006e4 <pxCurrentTCB+0x1>
    12b6:	c0 93 e3 06 	sts	0x06E3, r28	; 0x8006e3 <pxCurrentTCB>
    12ba:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxTaskNumber>
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxTaskNumber>
    12c4:	2e 89       	ldd	r18, Y+22	; 0x16
    12c6:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    12ca:	82 17       	cp	r24, r18
    12cc:	10 f4       	brcc	.+4      	; 0x12d2 <prvAddNewTaskToReadyList+0x70>
    12ce:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <uxTopReadyPriority>
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	be 01       	movw	r22, r28
    12d6:	6e 5f       	subi	r22, 0xFE	; 254
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	c9 01       	movw	r24, r18
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	84 5b       	subi	r24, 0xB4	; 180
    12ee:	99 4f       	sbci	r25, 0xF9	; 249
    12f0:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    12fc:	88 23       	and	r24, r24
    12fe:	21 f0       	breq	.+8      	; 0x1308 <prvAddNewTaskToReadyList+0xa6>
    1300:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1304:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

Disassembly of section .text.prvCheckTasksWaitingTermination:

00001fd6 <prvCheckTasksWaitingTermination>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	1c c0       	rjmp	.+56     	; 0x2014 <prvCheckTasksWaitingTermination+0x3e>
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	0f 92       	push	r0
    1fe2:	e0 91 b4 06 	lds	r30, 0x06B4	; 0x8006b4 <xTasksWaitingTermination+0x5>
    1fe6:	f0 91 b5 06 	lds	r31, 0x06B5	; 0x8006b5 <xTasksWaitingTermination+0x6>
    1fea:	c6 81       	ldd	r28, Z+6	; 0x06
    1fec:	d7 81       	ldd	r29, Z+7	; 0x07
    1fee:	ce 01       	movw	r24, r28
    1ff0:	02 96       	adiw	r24, 0x02	; 2
    1ff2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    1ff6:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    1ffa:	81 50       	subi	r24, 0x01	; 1
    1ffc:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <uxCurrentNumberOfTasks>
    2000:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxDeletedTasksWaitingCleanUp>
    2004:	81 50       	subi	r24, 0x01	; 1
    2006:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <uxDeletedTasksWaitingCleanUp>
    200a:	0f 90       	pop	r0
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	ce 01       	movw	r24, r28
    2010:	0e 94 bd 12 	call	0x257a	; 0x257a <prvDeleteTCB>
    2014:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxDeletedTasksWaitingCleanUp>
    2018:	81 11       	cpse	r24, r1
    201a:	e0 cf       	rjmp	.-64     	; 0x1fdc <prvCheckTasksWaitingTermination+0x6>
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	08 95       	ret

Disassembly of section .text.prvIdleTask:

00002724 <prvIdleTask>:
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    2724:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <prvCheckTasksWaitingTermination>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
            vTaskInternalSetTimeOutState( pxTimeOut );
            xReturn = pdFALSE;
        }
    2728:	0e 94 80 08 	call	0x1100	; 0x1100 <vPortYield>
    272c:	fb cf       	rjmp	.-10     	; 0x2724 <prvIdleTask>

Disassembly of section .text.prvAddCurrentTaskToDelayedList:

000011b2 <prvAddCurrentTaskToDelayedList>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
    11be:	f6 2e       	mov	r15, r22
    11c0:	00 91 dd 06 	lds	r16, 0x06DD	; 0x8006dd <xTickCount>
    11c4:	10 91 de 06 	lds	r17, 0x06DE	; 0x8006de <xTickCount+0x1>
    11c8:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    11cc:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    11d0:	02 96       	adiw	r24, 0x02	; 2
    11d2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    11d6:	cf 3f       	cpi	r28, 0xFF	; 255
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	d8 07       	cpc	r29, r24
    11dc:	69 f4       	brne	.+26     	; 0x11f8 <prvAddCurrentTaskToDelayedList+0x46>
    11de:	ff 20       	and	r15, r15
    11e0:	59 f0       	breq	.+22     	; 0x11f8 <prvAddCurrentTaskToDelayedList+0x46>
    11e2:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    11e6:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    11ea:	6e 5f       	subi	r22, 0xFE	; 254
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	86 ea       	ldi	r24, 0xA6	; 166
    11f0:	96 e0       	ldi	r25, 0x06	; 6
    11f2:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
    11f6:	2f c0       	rjmp	.+94     	; 0x1256 <prvAddCurrentTaskToDelayedList+0xa4>
    11f8:	c0 0f       	add	r28, r16
    11fa:	d1 1f       	adc	r29, r17
    11fc:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1200:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1204:	d3 83       	std	Z+3, r29	; 0x03
    1206:	c2 83       	std	Z+2, r28	; 0x02
    1208:	c0 17       	cp	r28, r16
    120a:	d1 07       	cpc	r29, r17
    120c:	68 f4       	brcc	.+26     	; 0x1228 <prvAddCurrentTaskToDelayedList+0x76>
    120e:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1212:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1216:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxOverflowDelayedTaskList>
    121a:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
    121e:	6e 5f       	subi	r22, 0xFE	; 254
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <vListInsert>
    1226:	17 c0       	rjmp	.+46     	; 0x1256 <prvAddCurrentTaskToDelayedList+0xa4>
    1228:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    122c:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1230:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
    1234:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
    1238:	6e 5f       	subi	r22, 0xFE	; 254
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <vListInsert>
    1240:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <xNextTaskUnblockTime>
    1244:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <xNextTaskUnblockTime+0x1>
    1248:	c8 17       	cp	r28, r24
    124a:	d9 07       	cpc	r29, r25
    124c:	20 f4       	brcc	.+8      	; 0x1256 <prvAddCurrentTaskToDelayedList+0xa4>
    124e:	d0 93 dc 06 	sts	0x06DC, r29	; 0x8006dc <xNextTaskUnblockTime+0x1>
    1252:	c0 93 db 06 	sts	0x06DB, r28	; 0x8006db <xNextTaskUnblockTime>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	08 95       	ret

Disassembly of section .text.xTaskCreate:

00000f78 <xTaskCreate>:
     f78:	4f 92       	push	r4
     f7a:	5f 92       	push	r5
     f7c:	6f 92       	push	r6
     f7e:	7f 92       	push	r7
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	00 d0       	rcall	.+0      	; 0xf9a <xTaskCreate+0x22>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <xTaskCreate+0x24>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	3c 01       	movw	r6, r24
     fa4:	49 83       	std	Y+1, r20	; 0x01
     fa6:	5a 83       	std	Y+2, r21	; 0x02
     fa8:	6b 83       	std	Y+3, r22	; 0x03
     faa:	49 01       	movw	r8, r18
     fac:	28 01       	movw	r4, r16
     fae:	c9 01       	movw	r24, r18
     fb0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <pvPortMalloc>
     fb4:	8c 01       	movw	r16, r24
     fb6:	89 2b       	or	r24, r25
     fb8:	81 f0       	breq	.+32     	; 0xfda <xTaskCreate+0x62>
     fba:	86 e2       	ldi	r24, 0x26	; 38
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <pvPortMalloc>
     fc2:	9d 83       	std	Y+5, r25	; 0x05
     fc4:	8c 83       	std	Y+4, r24	; 0x04
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <xTaskCreate+0x5a>
     fca:	fc 01       	movw	r30, r24
     fcc:	10 8f       	std	Z+24, r17	; 0x18
     fce:	07 8b       	std	Z+23, r16	; 0x17
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <xTaskCreate+0x66>
     fd2:	c8 01       	movw	r24, r16
     fd4:	0e 94 b4 13 	call	0x2768	; 0x2768 <vPortFree>
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <xTaskCreate+0x66>
     fda:	1d 82       	std	Y+5, r1	; 0x05
     fdc:	1c 82       	std	Y+4, r1	; 0x04
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	89 2b       	or	r24, r25
     fe4:	d1 f0       	breq	.+52     	; 0x101a <xTaskCreate+0xa2>
     fe6:	84 01       	movw	r16, r8
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	1f 92       	push	r1
     fee:	1f 92       	push	r1
     ff0:	1f 92       	push	r1
     ff2:	8c 80       	ldd	r8, Y+4	; 0x04
     ff4:	9d 80       	ldd	r9, Y+5	; 0x05
     ff6:	56 01       	movw	r10, r12
     ff8:	ce 2c       	mov	r12, r14
     ffa:	72 01       	movw	r14, r4
     ffc:	49 81       	ldd	r20, Y+1	; 0x01
     ffe:	5a 81       	ldd	r21, Y+2	; 0x02
    1000:	6b 81       	ldd	r22, Y+3	; 0x03
    1002:	c3 01       	movw	r24, r6
    1004:	0e 94 ac 04 	call	0x958	; 0x958 <prvInitialiseNewTask>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	0e 94 31 09 	call	0x1262	; 0x1262 <prvAddNewTaskToReadyList>
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	01 c0       	rjmp	.+2      	; 0x101c <xTaskCreate+0xa4>
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	08 95       	ret

Disassembly of section .text.vTaskResume:

00001940 <vTaskResume>:
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	20 91 e3 06 	lds	r18, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    194c:	30 91 e4 06 	lds	r19, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1950:	82 17       	cp	r24, r18
    1952:	93 07       	cpc	r25, r19
    1954:	61 f1       	breq	.+88     	; 0x19ae <vTaskResume+0x6e>
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	51 f1       	breq	.+84     	; 0x19ae <vTaskResume+0x6e>
    195a:	ec 01       	movw	r28, r24
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	0f 92       	push	r0
    1962:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <prvTaskIsTaskSuspended>
    1966:	88 23       	and	r24, r24
    1968:	01 f1       	breq	.+64     	; 0x19aa <vTaskResume+0x6a>
    196a:	8e 01       	movw	r16, r28
    196c:	0e 5f       	subi	r16, 0xFE	; 254
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	c8 01       	movw	r24, r16
    1972:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    1976:	8e 89       	ldd	r24, Y+22	; 0x16
    1978:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    197c:	98 17       	cp	r25, r24
    197e:	10 f4       	brcc	.+4      	; 0x1984 <vTaskResume+0x44>
    1980:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9c 01       	movw	r18, r24
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	22 0f       	add	r18, r18
    198e:	33 1f       	adc	r19, r19
    1990:	22 0f       	add	r18, r18
    1992:	33 1f       	adc	r19, r19
    1994:	82 0f       	add	r24, r18
    1996:	93 1f       	adc	r25, r19
    1998:	b8 01       	movw	r22, r16
    199a:	84 5b       	subi	r24, 0xB4	; 180
    199c:	99 4f       	sbci	r25, 0xF9	; 249
    199e:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
    19a2:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    19a6:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

Disassembly of section .text.vTaskStartScheduler:

00001d80 <vTaskStartScheduler>:
    1d80:	cf 92       	push	r12
    1d82:	df 92       	push	r13
    1d84:	ef 92       	push	r14
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	0f 2e       	mov	r0, r31
    1d8c:	f9 ed       	ldi	r31, 0xD9	; 217
    1d8e:	cf 2e       	mov	r12, r31
    1d90:	f6 e0       	ldi	r31, 0x06	; 6
    1d92:	df 2e       	mov	r13, r31
    1d94:	f0 2d       	mov	r31, r0
    1d96:	e1 2c       	mov	r14, r1
    1d98:	00 e0       	ldi	r16, 0x00	; 0
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	24 e6       	ldi	r18, 0x64	; 100
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	46 e1       	ldi	r20, 0x16	; 22
    1da2:	51 e0       	ldi	r21, 0x01	; 1
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	82 e9       	ldi	r24, 0x92	; 146
    1da8:	93 e1       	ldi	r25, 0x13	; 19
    1daa:	0e 94 bc 07 	call	0xf78	; 0xf78 <xTaskCreate>
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	81 f4       	brne	.+32     	; 0x1dd2 <vTaskStartScheduler+0x52>
    1db2:	f8 94       	cli
    1db4:	8f ef       	ldi	r24, 0xFF	; 255
    1db6:	9f ef       	ldi	r25, 0xFF	; 255
    1db8:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
    1dbc:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <xSchedulerRunning>
    1dc6:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <xTickCount+0x1>
    1dca:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <xTickCount>
    1dce:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <xPortStartScheduler>
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ef 90       	pop	r14
    1dd8:	df 90       	pop	r13
    1dda:	cf 90       	pop	r12
    1ddc:	08 95       	ret

Disassembly of section .text.vTaskEndScheduler:

000026ea <vTaskEndScheduler>:

void vTaskSuspendAll( void )
{
    /* A critical section is not required as the variable is of type
     * BaseType_t.  Please read Richard Barry's reply in the following link to a
     * post in the FreeRTOS support forum before reporting this as a bug! -
    26ea:	f8 94       	cli
     * https://goo.gl/wu4acr */
    26ec:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <xSchedulerRunning>

    26f0:	0e 94 b5 13 	call	0x276a	; 0x276a <vPortEndScheduler>
    26f4:	08 95       	ret

Disassembly of section .text.vTaskSuspendAll:

000026f6 <vTaskSuspendAll>:
    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    26f6:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
    26fa:	8f 5f       	subi	r24, 0xFF	; 255
    26fc:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <uxSchedulerSuspended>
    2700:	08 95       	ret

Disassembly of section .text.xTaskIncrementTick:

0000073c <xTaskIncrementTick>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
 74c:	81 11       	cpse	r24, r1
 74e:	73 c0       	rjmp	.+230    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 750:	e0 90 dd 06 	lds	r14, 0x06DD	; 0x8006dd <xTickCount>
 754:	f0 90 de 06 	lds	r15, 0x06DE	; 0x8006de <xTickCount+0x1>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	e8 1a       	sub	r14, r24
 75c:	f8 0a       	sbc	r15, r24
 75e:	f0 92 de 06 	sts	0x06DE, r15	; 0x8006de <xTickCount+0x1>
 762:	e0 92 dd 06 	sts	0x06DD, r14	; 0x8006dd <xTickCount>
 766:	e1 14       	cp	r14, r1
 768:	f1 04       	cpc	r15, r1
 76a:	b9 f4       	brne	.+46     	; 0x79a <xTaskIncrementTick+0x5e>
 76c:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
 770:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
 774:	20 91 df 06 	lds	r18, 0x06DF	; 0x8006df <pxOverflowDelayedTaskList>
 778:	30 91 e0 06 	lds	r19, 0x06E0	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
 77c:	30 93 e2 06 	sts	0x06E2, r19	; 0x8006e2 <pxDelayedTaskList+0x1>
 780:	20 93 e1 06 	sts	0x06E1, r18	; 0x8006e1 <pxDelayedTaskList>
 784:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxOverflowDelayedTaskList+0x1>
 788:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxOverflowDelayedTaskList>
 78c:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <xNumOfOverflows>
 790:	8f 5f       	subi	r24, 0xFF	; 255
 792:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <xNumOfOverflows>
 796:	0e 94 43 11 	call	0x2286	; 0x2286 <prvResetNextTaskUnblockTime>
 79a:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <xNextTaskUnblockTime>
 79e:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <xNextTaskUnblockTime+0x1>
 7a2:	e8 16       	cp	r14, r24
 7a4:	f9 06       	cpc	r15, r25
 7a6:	08 f4       	brcc	.+2      	; 0x7aa <xTaskIncrementTick+0x6e>
 7a8:	4b c0       	rjmp	.+150    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7aa:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
 7ae:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
 7b2:	80 81       	ld	r24, Z
 7b4:	81 11       	cpse	r24, r1
 7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <xTaskIncrementTick+0x8a>
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	9f ef       	ldi	r25, 0xFF	; 255
 7bc:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
 7c0:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
 7c4:	3d c0       	rjmp	.+122    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7c6:	e0 91 e1 06 	lds	r30, 0x06E1	; 0x8006e1 <pxDelayedTaskList>
 7ca:	f0 91 e2 06 	lds	r31, 0x06E2	; 0x8006e2 <pxDelayedTaskList+0x1>
 7ce:	05 80       	ldd	r0, Z+5	; 0x05
 7d0:	f6 81       	ldd	r31, Z+6	; 0x06
 7d2:	e0 2d       	mov	r30, r0
 7d4:	c6 81       	ldd	r28, Z+6	; 0x06
 7d6:	d7 81       	ldd	r29, Z+7	; 0x07
 7d8:	8a 81       	ldd	r24, Y+2	; 0x02
 7da:	9b 81       	ldd	r25, Y+3	; 0x03
 7dc:	e8 16       	cp	r14, r24
 7de:	f9 06       	cpc	r15, r25
 7e0:	28 f4       	brcc	.+10     	; 0x7ec <xTaskIncrementTick+0xb0>
 7e2:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <xNextTaskUnblockTime+0x1>
 7e6:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <xNextTaskUnblockTime>
 7ea:	2a c0       	rjmp	.+84     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7ec:	8e 01       	movw	r16, r28
 7ee:	0e 5f       	subi	r16, 0xFE	; 254
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	c8 01       	movw	r24, r16
 7f4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
 7f8:	8c 89       	ldd	r24, Y+20	; 0x14
 7fa:	9d 89       	ldd	r25, Y+21	; 0x15
 7fc:	89 2b       	or	r24, r25
 7fe:	21 f0       	breq	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	ce 01       	movw	r24, r28
 802:	0c 96       	adiw	r24, 0x0c	; 12
 804:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
 808:	8e 89       	ldd	r24, Y+22	; 0x16
 80a:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
 80e:	98 17       	cp	r25, r24
 810:	10 f4       	brcc	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	9c 01       	movw	r18, r24
 81a:	22 0f       	add	r18, r18
 81c:	33 1f       	adc	r19, r19
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	82 0f       	add	r24, r18
 828:	93 1f       	adc	r25, r19
 82a:	b8 01       	movw	r22, r16
 82c:	84 5b       	subi	r24, 0xB4	; 180
 82e:	99 4f       	sbci	r25, 0xF9	; 249
 830:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
 834:	ba cf       	rjmp	.-140    	; 0x7aa <xTaskIncrementTick+0x6e>
 836:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <uxPendedTicks>
 83a:	8f 5f       	subi	r24, 0xFF	; 255
 83c:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <uxPendedTicks>
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	df 91       	pop	r29
 844:	cf 91       	pop	r28
 846:	1f 91       	pop	r17
 848:	0f 91       	pop	r16
 84a:	ff 90       	pop	r15
 84c:	ef 90       	pop	r14
 84e:	08 95       	ret

Disassembly of section .text.xTaskResumeAll:

00000dd0 <xTaskResumeAll>:
 dd0:	0f 93       	push	r16
 dd2:	1f 93       	push	r17
 dd4:	cf 93       	push	r28
 dd6:	df 93       	push	r29
 dd8:	0f b6       	in	r0, 0x3f	; 63
 dda:	f8 94       	cli
 ddc:	0f 92       	push	r0
 dde:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
 de2:	81 50       	subi	r24, 0x01	; 1
 de4:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <uxSchedulerSuspended>
 de8:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
 dec:	81 11       	cpse	r24, r1
 dee:	52 c0       	rjmp	.+164    	; 0xe94 <xTaskResumeAll+0xc4>
 df0:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
 df4:	81 11       	cpse	r24, r1
 df6:	33 c0       	rjmp	.+102    	; 0xe5e <xTaskResumeAll+0x8e>
 df8:	4d c0       	rjmp	.+154    	; 0xe94 <xTaskResumeAll+0xc4>
 dfa:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <xPendingReadyList+0x5>
 dfe:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <xPendingReadyList+0x6>
 e02:	c6 81       	ldd	r28, Z+6	; 0x06
 e04:	d7 81       	ldd	r29, Z+7	; 0x07
 e06:	ce 01       	movw	r24, r28
 e08:	0c 96       	adiw	r24, 0x0c	; 12
 e0a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
 e0e:	8e 01       	movw	r16, r28
 e10:	0e 5f       	subi	r16, 0xFE	; 254
 e12:	1f 4f       	sbci	r17, 0xFF	; 255
 e14:	c8 01       	movw	r24, r16
 e16:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
 e1a:	8e 89       	ldd	r24, Y+22	; 0x16
 e1c:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
 e20:	98 17       	cp	r25, r24
 e22:	10 f4       	brcc	.+4      	; 0xe28 <xTaskResumeAll+0x58>
 e24:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
 e28:	90 e0       	ldi	r25, 0x00	; 0
 e2a:	9c 01       	movw	r18, r24
 e2c:	22 0f       	add	r18, r18
 e2e:	33 1f       	adc	r19, r19
 e30:	22 0f       	add	r18, r18
 e32:	33 1f       	adc	r19, r19
 e34:	22 0f       	add	r18, r18
 e36:	33 1f       	adc	r19, r19
 e38:	82 0f       	add	r24, r18
 e3a:	93 1f       	adc	r25, r19
 e3c:	b8 01       	movw	r22, r16
 e3e:	84 5b       	subi	r24, 0xB4	; 180
 e40:	99 4f       	sbci	r25, 0xF9	; 249
 e42:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
 e46:	9e 89       	ldd	r25, Y+22	; 0x16
 e48:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
 e4c:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
 e50:	86 89       	ldd	r24, Z+22	; 0x16
 e52:	98 17       	cp	r25, r24
 e54:	30 f0       	brcs	.+12     	; 0xe62 <xTaskResumeAll+0x92>
 e56:	81 e0       	ldi	r24, 0x01	; 1
 e58:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
 e5c:	02 c0       	rjmp	.+4      	; 0xe62 <xTaskResumeAll+0x92>
 e5e:	c0 e0       	ldi	r28, 0x00	; 0
 e60:	d0 e0       	ldi	r29, 0x00	; 0
 e62:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <xPendingReadyList>
 e66:	81 11       	cpse	r24, r1
 e68:	c8 cf       	rjmp	.-112    	; 0xdfa <xTaskResumeAll+0x2a>
 e6a:	cd 2b       	or	r28, r29
 e6c:	11 f0       	breq	.+4      	; 0xe72 <xTaskResumeAll+0xa2>
 e6e:	0e 94 43 11 	call	0x2286	; 0x2286 <prvResetNextTaskUnblockTime>
 e72:	c0 91 f3 06 	lds	r28, 0x06F3	; 0x8006f3 <uxPendedTicks>
 e76:	cc 23       	and	r28, r28
 e78:	59 f0       	breq	.+22     	; 0xe90 <xTaskResumeAll+0xc0>
 e7a:	0e 94 9e 03 	call	0x73c	; 0x73c <xTaskIncrementTick>
 e7e:	88 23       	and	r24, r24
 e80:	19 f0       	breq	.+6      	; 0xe88 <xTaskResumeAll+0xb8>
 e82:	81 e0       	ldi	r24, 0x01	; 1
 e84:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
 e88:	c1 50       	subi	r28, 0x01	; 1
 e8a:	b9 f7       	brne	.-18     	; 0xe7a <xTaskResumeAll+0xaa>
 e8c:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <uxPendedTicks>
 e90:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xYieldPending>
 e94:	0f 90       	pop	r0
 e96:	0f be       	out	0x3f, r0	; 63
 e98:	80 e0       	ldi	r24, 0x00	; 0
 e9a:	df 91       	pop	r29
 e9c:	cf 91       	pop	r28
 e9e:	1f 91       	pop	r17
 ea0:	0f 91       	pop	r16
 ea2:	08 95       	ret

Disassembly of section .text.vTaskDelay:

000023b8 <vTaskDelay>:
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	ec 01       	movw	r28, r24
    23be:	89 2b       	or	r24, r25
    23c0:	49 f0       	breq	.+18     	; 0x23d4 <vTaskDelay+0x1c>
    23c2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <vTaskSuspendAll>
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	ce 01       	movw	r24, r28
    23ca:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <prvAddCurrentTaskToDelayedList>
    23ce:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <xTaskResumeAll>
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <vTaskDelay+0x1e>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	81 11       	cpse	r24, r1
    23d8:	02 c0       	rjmp	.+4      	; 0x23de <vTaskDelay+0x26>
    23da:	0e 94 80 08 	call	0x1100	; 0x1100 <vPortYield>
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

Disassembly of section .text.vTaskSwitchContext:

000013b8 <vTaskSwitchContext>:
    13b8:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
    13bc:	88 23       	and	r24, r24
    13be:	21 f0       	breq	.+8      	; 0x13c8 <vTaskSwitchContext+0x10>
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
    13c6:	08 95       	ret
    13c8:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <xYieldPending>
    13cc:	20 91 f5 06 	lds	r18, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <vTaskSwitchContext+0x1c>
    13d2:	21 50       	subi	r18, 0x01	; 1
    13d4:	82 2f       	mov	r24, r18
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	fc 01       	movw	r30, r24
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	e8 0f       	add	r30, r24
    13e8:	f9 1f       	adc	r31, r25
    13ea:	e4 5b       	subi	r30, 0xB4	; 180
    13ec:	f9 4f       	sbci	r31, 0xF9	; 249
    13ee:	30 81       	ld	r19, Z
    13f0:	33 23       	and	r19, r19
    13f2:	79 f3       	breq	.-34     	; 0x13d2 <vTaskSwitchContext+0x1a>
    13f4:	ac 01       	movw	r20, r24
    13f6:	44 0f       	add	r20, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	44 0f       	add	r20, r20
    13fc:	55 1f       	adc	r21, r21
    13fe:	44 0f       	add	r20, r20
    1400:	55 1f       	adc	r21, r21
    1402:	48 0f       	add	r20, r24
    1404:	59 1f       	adc	r21, r25
    1406:	df 01       	movw	r26, r30
    1408:	01 80       	ldd	r0, Z+1	; 0x01
    140a:	f2 81       	ldd	r31, Z+2	; 0x02
    140c:	e0 2d       	mov	r30, r0
    140e:	02 80       	ldd	r0, Z+2	; 0x02
    1410:	f3 81       	ldd	r31, Z+3	; 0x03
    1412:	e0 2d       	mov	r30, r0
    1414:	12 96       	adiw	r26, 0x02	; 2
    1416:	fc 93       	st	X, r31
    1418:	ee 93       	st	-X, r30
    141a:	11 97       	sbiw	r26, 0x01	; 1
    141c:	41 5b       	subi	r20, 0xB1	; 177
    141e:	59 4f       	sbci	r21, 0xF9	; 249
    1420:	e4 17       	cp	r30, r20
    1422:	f5 07       	cpc	r31, r21
    1424:	29 f4       	brne	.+10     	; 0x1430 <vTaskSwitchContext+0x78>
    1426:	42 81       	ldd	r20, Z+2	; 0x02
    1428:	53 81       	ldd	r21, Z+3	; 0x03
    142a:	fd 01       	movw	r30, r26
    142c:	52 83       	std	Z+2, r21	; 0x02
    142e:	41 83       	std	Z+1, r20	; 0x01
    1430:	fc 01       	movw	r30, r24
    1432:	ee 0f       	add	r30, r30
    1434:	ff 1f       	adc	r31, r31
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	8e 0f       	add	r24, r30
    1440:	9f 1f       	adc	r25, r31
    1442:	fc 01       	movw	r30, r24
    1444:	e4 5b       	subi	r30, 0xB4	; 180
    1446:	f9 4f       	sbci	r31, 0xF9	; 249
    1448:	01 80       	ldd	r0, Z+1	; 0x01
    144a:	f2 81       	ldd	r31, Z+2	; 0x02
    144c:	e0 2d       	mov	r30, r0
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	97 81       	ldd	r25, Z+7	; 0x07
    1452:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <pxCurrentTCB+0x1>
    1456:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <pxCurrentTCB>
    145a:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <uxTopReadyPriority>
    145e:	08 95       	ret

Disassembly of section .text.vTaskSuspend:

00001460 <vTaskSuspend>:
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	ec 01       	movw	r28, r24
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	0f 92       	push	r0
    1470:	89 2b       	or	r24, r25
    1472:	21 f4       	brne	.+8      	; 0x147c <vTaskSuspend+0x1c>
    1474:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    1478:	d0 91 e4 06 	lds	r29, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    147c:	8e 01       	movw	r16, r28
    147e:	0e 5f       	subi	r16, 0xFE	; 254
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	c8 01       	movw	r24, r16
    1484:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    1488:	8c 89       	ldd	r24, Y+20	; 0x14
    148a:	9d 89       	ldd	r25, Y+21	; 0x15
    148c:	89 2b       	or	r24, r25
    148e:	21 f0       	breq	.+8      	; 0x1498 <vTaskSuspend+0x38>
    1490:	ce 01       	movw	r24, r28
    1492:	0c 96       	adiw	r24, 0x0c	; 12
    1494:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    1498:	b8 01       	movw	r22, r16
    149a:	86 ea       	ldi	r24, 0xA6	; 166
    149c:	96 e0       	ldi	r25, 0x06	; 6
    149e:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
    14a2:	8d a1       	ldd	r24, Y+37	; 0x25
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <vTaskSuspend+0x4a>
    14a8:	1d a2       	std	Y+37, r1	; 0x25
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    14b2:	88 23       	and	r24, r24
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <vTaskSuspend+0x64>
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	0f 92       	push	r0
    14bc:	0e 94 43 11 	call	0x2286	; 0x2286 <prvResetNextTaskUnblockTime>
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    14c8:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    14cc:	c8 17       	cp	r28, r24
    14ce:	d9 07       	cpc	r29, r25
    14d0:	a1 f4       	brne	.+40     	; 0x14fa <vTaskSuspend+0x9a>
    14d2:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <xSchedulerRunning>
    14d6:	88 23       	and	r24, r24
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <vTaskSuspend+0x80>
    14da:	0e 94 80 08 	call	0x1100	; 0x1100 <vPortYield>
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <vTaskSuspend+0x9a>
    14e0:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <xSuspendedTaskList>
    14e4:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <uxCurrentNumberOfTasks>
    14e8:	98 13       	cpse	r25, r24
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <vTaskSuspend+0x96>
    14ec:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <pxCurrentTCB+0x1>
    14f0:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <pxCurrentTCB>
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <vTaskSuspend+0x9a>
    14f6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <vTaskSwitchContext>
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

Disassembly of section .text.vTaskPlaceOnEventList:

00002480 <vTaskPlaceOnEventList>:
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	eb 01       	movw	r28, r22
    2486:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    248a:	70 91 e4 06 	lds	r23, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    248e:	64 5f       	subi	r22, 0xF4	; 244
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <vListInsert>
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	ce 01       	movw	r24, r28
    249a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <prvAddCurrentTaskToDelayedList>
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

Disassembly of section .text.xTaskRemoveFromEventList:

00001504 <xTaskRemoveFromEventList>:
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	a8 2f       	mov	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	05 96       	adiw	r24, 0x05	; 5
    1512:	a1 1d       	adc	r26, r1
    1514:	fc 01       	movw	r30, r24
    1516:	5a 2f       	mov	r21, r26
    1518:	0e 94 33 13 	call	0x2666	; 0x2666 <__xload_2>
    151c:	fb 01       	movw	r30, r22
    151e:	c6 81       	ldd	r28, Z+6	; 0x06
    1520:	d7 81       	ldd	r29, Z+7	; 0x07
    1522:	8e 01       	movw	r16, r28
    1524:	04 5f       	subi	r16, 0xF4	; 244
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	c8 01       	movw	r24, r16
    152a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    152e:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <uxSchedulerSuspended>
    1532:	81 11       	cpse	r24, r1
    1534:	1c c0       	rjmp	.+56     	; 0x156e <xTaskRemoveFromEventList+0x6a>
    1536:	0a 50       	subi	r16, 0x0A	; 10
    1538:	11 09       	sbc	r17, r1
    153a:	c8 01       	movw	r24, r16
    153c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <uxListRemove>
    1540:	8e 89       	ldd	r24, Y+22	; 0x16
    1542:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopReadyPriority>
    1546:	98 17       	cp	r25, r24
    1548:	10 f4       	brcc	.+4      	; 0x154e <xTaskRemoveFromEventList+0x4a>
    154a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopReadyPriority>
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 01       	movw	r18, r24
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	22 0f       	add	r18, r18
    1558:	33 1f       	adc	r19, r19
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	82 0f       	add	r24, r18
    1560:	93 1f       	adc	r25, r19
    1562:	b8 01       	movw	r22, r16
    1564:	84 5b       	subi	r24, 0xB4	; 180
    1566:	99 4f       	sbci	r25, 0xF9	; 249
    1568:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <xTaskRemoveFromEventList+0x74>
    156e:	b8 01       	movw	r22, r16
    1570:	88 eb       	ldi	r24, 0xB8	; 184
    1572:	96 e0       	ldi	r25, 0x06	; 6
    1574:	0e 94 c2 10 	call	0x2184	; 0x2184 <vListInsertEnd>
    1578:	9e 89       	ldd	r25, Y+22	; 0x16
    157a:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <pxCurrentTCB>
    157e:	f0 91 e4 06 	lds	r31, 0x06E4	; 0x8006e4 <pxCurrentTCB+0x1>
    1582:	86 89       	ldd	r24, Z+22	; 0x16
    1584:	89 17       	cp	r24, r25
    1586:	20 f4       	brcc	.+8      	; 0x1590 <xTaskRemoveFromEventList+0x8c>
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
    158e:	01 c0       	rjmp	.+2      	; 0x1592 <xTaskRemoveFromEventList+0x8e>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

Disassembly of section .text.vTaskInternalSetTimeOutState:

000025f4 <vTaskInternalSetTimeOutState>:
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
        }
        #endif
    }
    else
    25f4:	20 91 f1 06 	lds	r18, 0x06F1	; 0x8006f1 <xNumOfOverflows>
    25f8:	fc 01       	movw	r30, r24
    25fa:	20 83       	st	Z, r18
    {
    25fc:	20 91 dd 06 	lds	r18, 0x06DD	; 0x8006dd <xTickCount>
    2600:	30 91 de 06 	lds	r19, 0x06DE	; 0x8006de <xTickCount+0x1>
    2604:	32 83       	std	Z+2, r19	; 0x02
    2606:	21 83       	std	Z+1, r18	; 0x01
    2608:	08 95       	ret

Disassembly of section .text.xTaskCheckForTimeOut:

000019b8 <xTaskCheckForTimeOut>:
            /* If a task is blocked on a kernel object then xNextTaskUnblockTime
             * might be set to the blocked task's time out time.  If the task is
             * unblocked for a reason other than a timeout xNextTaskUnblockTime is
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	0f 92       	push	r0
    19c4:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <xTickCount>
    19c8:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <xTickCount+0x1>
    19cc:	dc 01       	movw	r26, r24
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	4d 91       	ld	r20, X+
    19d2:	5c 91       	ld	r21, X
    19d4:	12 97       	sbiw	r26, 0x02	; 2
    19d6:	df 01       	movw	r26, r30
    19d8:	a4 1b       	sub	r26, r20
    19da:	b5 0b       	sbc	r27, r21
    19dc:	eb 01       	movw	r28, r22
    19de:	28 81       	ld	r18, Y
    19e0:	39 81       	ldd	r19, Y+1	; 0x01
    19e2:	2f 3f       	cpi	r18, 0xFF	; 255
    19e4:	df ef       	ldi	r29, 0xFF	; 255
    19e6:	3d 07       	cpc	r19, r29
    19e8:	d1 f0       	breq	.+52     	; 0x1a1e <xTaskCheckForTimeOut+0x66>
    19ea:	ec 01       	movw	r28, r24
    19ec:	18 81       	ld	r17, Y
    19ee:	c0 91 f1 06 	lds	r28, 0x06F1	; 0x8006f1 <xNumOfOverflows>
    19f2:	1c 17       	cp	r17, r28
    19f4:	19 f0       	breq	.+6      	; 0x19fc <xTaskCheckForTimeOut+0x44>
    19f6:	e4 17       	cp	r30, r20
    19f8:	f5 07       	cpc	r31, r21
    19fa:	98 f4       	brcc	.+38     	; 0x1a22 <xTaskCheckForTimeOut+0x6a>
    19fc:	a2 17       	cp	r26, r18
    19fe:	b3 07       	cpc	r27, r19
    1a00:	48 f4       	brcc	.+18     	; 0x1a14 <xTaskCheckForTimeOut+0x5c>
    1a02:	fb 01       	movw	r30, r22
    1a04:	2a 1b       	sub	r18, r26
    1a06:	3b 0b       	sbc	r19, r27
    1a08:	31 83       	std	Z+1, r19	; 0x01
    1a0a:	20 83       	st	Z, r18
    1a0c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskInternalSetTimeOutState>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	08 c0       	rjmp	.+16     	; 0x1a24 <xTaskCheckForTimeOut+0x6c>
    1a14:	fb 01       	movw	r30, r22
    1a16:	11 82       	std	Z+1, r1	; 0x01
    1a18:	10 82       	st	Z, r1
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	03 c0       	rjmp	.+6      	; 0x1a24 <xTaskCheckForTimeOut+0x6c>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <xTaskCheckForTimeOut+0x6c>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	08 95       	ret

Disassembly of section .text.vTaskMissedYield:

0000274a <vTaskMissedYield>:
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <xYieldPending>
    2750:	08 95       	ret

Disassembly of section .text:

0000272e <__cmpsf2>:
    272e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__fp_cmp>
    2732:	08 f4       	brcc	.+2      	; 0x2736 <__cmpsf2+0x8>
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	08 95       	ret

Disassembly of section .text:

00001dde <__fixunssfsi>:
    1dde:	0e 94 86 10 	call	0x210c	; 0x210c <__fp_splitA>
    1de2:	88 f0       	brcs	.+34     	; 0x1e06 <__fixunssfsi+0x28>
    1de4:	9f 57       	subi	r25, 0x7F	; 127
    1de6:	98 f0       	brcs	.+38     	; 0x1e0e <__fixunssfsi+0x30>
    1de8:	b9 2f       	mov	r27, r25
    1dea:	99 27       	eor	r25, r25
    1dec:	b7 51       	subi	r27, 0x17	; 23
    1dee:	b0 f0       	brcs	.+44     	; 0x1e1c <__fixunssfsi+0x3e>
    1df0:	e1 f0       	breq	.+56     	; 0x1e2a <__fixunssfsi+0x4c>
    1df2:	66 0f       	add	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	1a f0       	brmi	.+6      	; 0x1e02 <__fixunssfsi+0x24>
    1dfc:	ba 95       	dec	r27
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <__fixunssfsi+0x14>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <__fixunssfsi+0x4c>
    1e02:	b1 30       	cpi	r27, 0x01	; 1
    1e04:	91 f0       	breq	.+36     	; 0x1e2a <__fixunssfsi+0x4c>
    1e06:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_zero>
    1e0a:	b1 e0       	ldi	r27, 0x01	; 1
    1e0c:	08 95       	ret
    1e0e:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__fp_zero>
    1e12:	67 2f       	mov	r22, r23
    1e14:	78 2f       	mov	r23, r24
    1e16:	88 27       	eor	r24, r24
    1e18:	b8 5f       	subi	r27, 0xF8	; 248
    1e1a:	39 f0       	breq	.+14     	; 0x1e2a <__fixunssfsi+0x4c>
    1e1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e1e:	cc f3       	brlt	.-14     	; 0x1e12 <__fixunssfsi+0x34>
    1e20:	86 95       	lsr	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	b3 95       	inc	r27
    1e28:	d9 f7       	brne	.-10     	; 0x1e20 <__fixunssfsi+0x42>
    1e2a:	3e f4       	brtc	.+14     	; 0x1e3a <__fixunssfsi+0x5c>
    1e2c:	90 95       	com	r25
    1e2e:	80 95       	com	r24
    1e30:	70 95       	com	r23
    1e32:	61 95       	neg	r22
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	8f 4f       	sbci	r24, 0xFF	; 255
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	08 95       	ret

Disassembly of section .text:

000018c6 <__floatunsisf>:
    18c6:	e8 94       	clt
    18c8:	09 c0       	rjmp	.+18     	; 0x18dc <__floatsisf+0x12>

000018ca <__floatsisf>:
    18ca:	97 fb       	bst	r25, 7
    18cc:	3e f4       	brtc	.+14     	; 0x18dc <__floatsisf+0x12>
    18ce:	90 95       	com	r25
    18d0:	80 95       	com	r24
    18d2:	70 95       	com	r23
    18d4:	61 95       	neg	r22
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	99 23       	and	r25, r25
    18de:	a9 f0       	breq	.+42     	; 0x190a <__floatsisf+0x40>
    18e0:	f9 2f       	mov	r31, r25
    18e2:	96 e9       	ldi	r25, 0x96	; 150
    18e4:	bb 27       	eor	r27, r27
    18e6:	93 95       	inc	r25
    18e8:	f6 95       	lsr	r31
    18ea:	87 95       	ror	r24
    18ec:	77 95       	ror	r23
    18ee:	67 95       	ror	r22
    18f0:	b7 95       	ror	r27
    18f2:	f1 11       	cpse	r31, r1
    18f4:	f8 cf       	rjmp	.-16     	; 0x18e6 <__floatsisf+0x1c>
    18f6:	fa f4       	brpl	.+62     	; 0x1936 <__floatsisf+0x6c>
    18f8:	bb 0f       	add	r27, r27
    18fa:	11 f4       	brne	.+4      	; 0x1900 <__floatsisf+0x36>
    18fc:	60 ff       	sbrs	r22, 0
    18fe:	1b c0       	rjmp	.+54     	; 0x1936 <__floatsisf+0x6c>
    1900:	6f 5f       	subi	r22, 0xFF	; 255
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	16 c0       	rjmp	.+44     	; 0x1936 <__floatsisf+0x6c>
    190a:	88 23       	and	r24, r24
    190c:	11 f0       	breq	.+4      	; 0x1912 <__floatsisf+0x48>
    190e:	96 e9       	ldi	r25, 0x96	; 150
    1910:	11 c0       	rjmp	.+34     	; 0x1934 <__floatsisf+0x6a>
    1912:	77 23       	and	r23, r23
    1914:	21 f0       	breq	.+8      	; 0x191e <__floatsisf+0x54>
    1916:	9e e8       	ldi	r25, 0x8E	; 142
    1918:	87 2f       	mov	r24, r23
    191a:	76 2f       	mov	r23, r22
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__floatsisf+0x5e>
    191e:	66 23       	and	r22, r22
    1920:	71 f0       	breq	.+28     	; 0x193e <__floatsisf+0x74>
    1922:	96 e8       	ldi	r25, 0x86	; 134
    1924:	86 2f       	mov	r24, r22
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	2a f0       	brmi	.+10     	; 0x1936 <__floatsisf+0x6c>
    192c:	9a 95       	dec	r25
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	da f7       	brpl	.-10     	; 0x192c <__floatsisf+0x62>
    1936:	88 0f       	add	r24, r24
    1938:	96 95       	lsr	r25
    193a:	87 95       	ror	r24
    193c:	97 f9       	bld	r25, 7
    193e:	08 95       	ret

Disassembly of section .text:

000020b4 <__fp_cmp>:
    20b4:	99 0f       	add	r25, r25
    20b6:	00 08       	sbc	r0, r0
    20b8:	55 0f       	add	r21, r21
    20ba:	aa 0b       	sbc	r26, r26
    20bc:	e0 e8       	ldi	r30, 0x80	; 128
    20be:	fe ef       	ldi	r31, 0xFE	; 254
    20c0:	16 16       	cp	r1, r22
    20c2:	17 06       	cpc	r1, r23
    20c4:	e8 07       	cpc	r30, r24
    20c6:	f9 07       	cpc	r31, r25
    20c8:	c0 f0       	brcs	.+48     	; 0x20fa <__fp_cmp+0x46>
    20ca:	12 16       	cp	r1, r18
    20cc:	13 06       	cpc	r1, r19
    20ce:	e4 07       	cpc	r30, r20
    20d0:	f5 07       	cpc	r31, r21
    20d2:	98 f0       	brcs	.+38     	; 0x20fa <__fp_cmp+0x46>
    20d4:	62 1b       	sub	r22, r18
    20d6:	73 0b       	sbc	r23, r19
    20d8:	84 0b       	sbc	r24, r20
    20da:	95 0b       	sbc	r25, r21
    20dc:	39 f4       	brne	.+14     	; 0x20ec <__fp_cmp+0x38>
    20de:	0a 26       	eor	r0, r26
    20e0:	61 f0       	breq	.+24     	; 0x20fa <__fp_cmp+0x46>
    20e2:	23 2b       	or	r18, r19
    20e4:	24 2b       	or	r18, r20
    20e6:	25 2b       	or	r18, r21
    20e8:	21 f4       	brne	.+8      	; 0x20f2 <__fp_cmp+0x3e>
    20ea:	08 95       	ret
    20ec:	0a 26       	eor	r0, r26
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <__fp_cmp+0x3e>
    20f0:	a1 40       	sbci	r26, 0x01	; 1
    20f2:	a6 95       	lsr	r26
    20f4:	8f ef       	ldi	r24, 0xFF	; 255
    20f6:	81 1d       	adc	r24, r1
    20f8:	81 1d       	adc	r24, r1
    20fa:	08 95       	ret

Disassembly of section .text:

000020fc <__fp_split3>:
    20fc:	57 fd       	sbrc	r21, 7
    20fe:	90 58       	subi	r25, 0x80	; 128
    2100:	44 0f       	add	r20, r20
    2102:	55 1f       	adc	r21, r21
    2104:	59 f0       	breq	.+22     	; 0x211c <__fp_splitA+0x10>
    2106:	5f 3f       	cpi	r21, 0xFF	; 255
    2108:	71 f0       	breq	.+28     	; 0x2126 <__fp_splitA+0x1a>
    210a:	47 95       	ror	r20

0000210c <__fp_splitA>:
    210c:	88 0f       	add	r24, r24
    210e:	97 fb       	bst	r25, 7
    2110:	99 1f       	adc	r25, r25
    2112:	61 f0       	breq	.+24     	; 0x212c <__fp_splitA+0x20>
    2114:	9f 3f       	cpi	r25, 0xFF	; 255
    2116:	79 f0       	breq	.+30     	; 0x2136 <__fp_splitA+0x2a>
    2118:	87 95       	ror	r24
    211a:	08 95       	ret
    211c:	12 16       	cp	r1, r18
    211e:	13 06       	cpc	r1, r19
    2120:	14 06       	cpc	r1, r20
    2122:	55 1f       	adc	r21, r21
    2124:	f2 cf       	rjmp	.-28     	; 0x210a <__fp_split3+0xe>
    2126:	46 95       	lsr	r20
    2128:	f1 df       	rcall	.-30     	; 0x210c <__fp_splitA>
    212a:	08 c0       	rjmp	.+16     	; 0x213c <__fp_splitA+0x30>
    212c:	16 16       	cp	r1, r22
    212e:	17 06       	cpc	r1, r23
    2130:	18 06       	cpc	r1, r24
    2132:	99 1f       	adc	r25, r25
    2134:	f1 cf       	rjmp	.-30     	; 0x2118 <__fp_splitA+0xc>
    2136:	86 95       	lsr	r24
    2138:	71 05       	cpc	r23, r1
    213a:	61 05       	cpc	r22, r1
    213c:	08 94       	sec
    213e:	08 95       	ret

Disassembly of section .text:

00002684 <__fp_zero>:
    2684:	e8 94       	clt

00002686 <__fp_szero>:
    2686:	bb 27       	eor	r27, r27
    2688:	66 27       	eor	r22, r22
    268a:	77 27       	eor	r23, r23
    268c:	cb 01       	movw	r24, r22
    268e:	97 f9       	bld	r25, 7
    2690:	08 95       	ret

Disassembly of section .text:

00002738 <__gesf2>:
    2738:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__fp_cmp>
    273c:	08 f4       	brcc	.+2      	; 0x2740 <__gesf2+0x8>
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	08 95       	ret

Disassembly of section .text:

00002752 <__mulsf3>:
    2752:	0e 94 52 07 	call	0xea4	; 0xea4 <__mulsf3x>
    2756:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__fp_round>

Disassembly of section .text:

00000ea4 <__mulsf3x>:
 ea4:	0f c0       	rjmp	.+30     	; 0xec4 <__mulsf3x+0x20>
 ea6:	0e 94 49 13 	call	0x2692	; 0x2692 <__fp_pscA>
 eaa:	38 f0       	brcs	.+14     	; 0xeba <__mulsf3x+0x16>
 eac:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__fp_pscB>
 eb0:	20 f0       	brcs	.+8      	; 0xeba <__mulsf3x+0x16>
 eb2:	95 23       	and	r25, r21
 eb4:	11 f0       	breq	.+4      	; 0xeba <__mulsf3x+0x16>
 eb6:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_inf>
 eba:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__fp_nan>
 ebe:	11 24       	eor	r1, r1
 ec0:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__fp_szero>
 ec4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__fp_split3>
 ec8:	70 f3       	brcs	.-36     	; 0xea6 <__mulsf3x+0x2>

00000eca <__mulsf3_pse>:
 eca:	95 9f       	mul	r25, r21
 ecc:	c1 f3       	breq	.-16     	; 0xebe <__mulsf3x+0x1a>
 ece:	95 0f       	add	r25, r21
 ed0:	50 e0       	ldi	r21, 0x00	; 0
 ed2:	55 1f       	adc	r21, r21
 ed4:	62 9f       	mul	r22, r18
 ed6:	f0 01       	movw	r30, r0
 ed8:	72 9f       	mul	r23, r18
 eda:	bb 27       	eor	r27, r27
 edc:	f0 0d       	add	r31, r0
 ede:	b1 1d       	adc	r27, r1
 ee0:	63 9f       	mul	r22, r19
 ee2:	aa 27       	eor	r26, r26
 ee4:	f0 0d       	add	r31, r0
 ee6:	b1 1d       	adc	r27, r1
 ee8:	aa 1f       	adc	r26, r26
 eea:	64 9f       	mul	r22, r20
 eec:	66 27       	eor	r22, r22
 eee:	b0 0d       	add	r27, r0
 ef0:	a1 1d       	adc	r26, r1
 ef2:	66 1f       	adc	r22, r22
 ef4:	82 9f       	mul	r24, r18
 ef6:	22 27       	eor	r18, r18
 ef8:	b0 0d       	add	r27, r0
 efa:	a1 1d       	adc	r26, r1
 efc:	62 1f       	adc	r22, r18
 efe:	73 9f       	mul	r23, r19
 f00:	b0 0d       	add	r27, r0
 f02:	a1 1d       	adc	r26, r1
 f04:	62 1f       	adc	r22, r18
 f06:	83 9f       	mul	r24, r19
 f08:	a0 0d       	add	r26, r0
 f0a:	61 1d       	adc	r22, r1
 f0c:	22 1f       	adc	r18, r18
 f0e:	74 9f       	mul	r23, r20
 f10:	33 27       	eor	r19, r19
 f12:	a0 0d       	add	r26, r0
 f14:	61 1d       	adc	r22, r1
 f16:	23 1f       	adc	r18, r19
 f18:	84 9f       	mul	r24, r20
 f1a:	60 0d       	add	r22, r0
 f1c:	21 1d       	adc	r18, r1
 f1e:	82 2f       	mov	r24, r18
 f20:	76 2f       	mov	r23, r22
 f22:	6a 2f       	mov	r22, r26
 f24:	11 24       	eor	r1, r1
 f26:	9f 57       	subi	r25, 0x7F	; 127
 f28:	50 40       	sbci	r21, 0x00	; 0
 f2a:	9a f0       	brmi	.+38     	; 0xf52 <__mulsf3_pse+0x88>
 f2c:	f1 f0       	breq	.+60     	; 0xf6a <__mulsf3_pse+0xa0>
 f2e:	88 23       	and	r24, r24
 f30:	4a f0       	brmi	.+18     	; 0xf44 <__mulsf3_pse+0x7a>
 f32:	ee 0f       	add	r30, r30
 f34:	ff 1f       	adc	r31, r31
 f36:	bb 1f       	adc	r27, r27
 f38:	66 1f       	adc	r22, r22
 f3a:	77 1f       	adc	r23, r23
 f3c:	88 1f       	adc	r24, r24
 f3e:	91 50       	subi	r25, 0x01	; 1
 f40:	50 40       	sbci	r21, 0x00	; 0
 f42:	a9 f7       	brne	.-22     	; 0xf2e <__mulsf3_pse+0x64>
 f44:	9e 3f       	cpi	r25, 0xFE	; 254
 f46:	51 05       	cpc	r21, r1
 f48:	80 f0       	brcs	.+32     	; 0xf6a <__mulsf3_pse+0xa0>
 f4a:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_inf>
 f4e:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__fp_szero>
 f52:	5f 3f       	cpi	r21, 0xFF	; 255
 f54:	e4 f3       	brlt	.-8      	; 0xf4e <__mulsf3_pse+0x84>
 f56:	98 3e       	cpi	r25, 0xE8	; 232
 f58:	d4 f3       	brlt	.-12     	; 0xf4e <__mulsf3_pse+0x84>
 f5a:	86 95       	lsr	r24
 f5c:	77 95       	ror	r23
 f5e:	67 95       	ror	r22
 f60:	b7 95       	ror	r27
 f62:	f7 95       	ror	r31
 f64:	e7 95       	ror	r30
 f66:	9f 5f       	subi	r25, 0xFF	; 255
 f68:	c1 f7       	brne	.-16     	; 0xf5a <__mulsf3_pse+0x90>
 f6a:	fe 2b       	or	r31, r30
 f6c:	88 0f       	add	r24, r24
 f6e:	91 1d       	adc	r25, r1
 f70:	96 95       	lsr	r25
 f72:	87 95       	ror	r24
 f74:	97 f9       	bld	r25, 7
 f76:	08 95       	ret

Disassembly of section .text:

00002702 <__fp_inf>:
    2702:	97 f9       	bld	r25, 7
    2704:	9f 67       	ori	r25, 0x7F	; 127
    2706:	80 e8       	ldi	r24, 0x80	; 128
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	08 95       	ret

Disassembly of section .text:

0000275a <__fp_nan>:
    275a:	9f ef       	ldi	r25, 0xFF	; 255
    275c:	80 ec       	ldi	r24, 0xC0	; 192
    275e:	08 95       	ret

Disassembly of section .text:

00002692 <__fp_pscA>:
    2692:	00 24       	eor	r0, r0
    2694:	0a 94       	dec	r0
    2696:	16 16       	cp	r1, r22
    2698:	17 06       	cpc	r1, r23
    269a:	18 06       	cpc	r1, r24
    269c:	09 06       	cpc	r0, r25
    269e:	08 95       	ret

Disassembly of section .text:

000026a0 <__fp_pscB>:
    26a0:	00 24       	eor	r0, r0
    26a2:	0a 94       	dec	r0
    26a4:	12 16       	cp	r1, r18
    26a6:	13 06       	cpc	r1, r19
    26a8:	14 06       	cpc	r1, r20
    26aa:	05 06       	cpc	r0, r21
    26ac:	08 95       	ret

Disassembly of section .text:

000024a4 <__fp_round>:
    24a4:	09 2e       	mov	r0, r25
    24a6:	03 94       	inc	r0
    24a8:	00 0c       	add	r0, r0
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <__fp_round+0xc>
    24ac:	88 23       	and	r24, r24
    24ae:	52 f0       	brmi	.+20     	; 0x24c4 <__fp_round+0x20>
    24b0:	bb 0f       	add	r27, r27
    24b2:	40 f4       	brcc	.+16     	; 0x24c4 <__fp_round+0x20>
    24b4:	bf 2b       	or	r27, r31
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0x18>
    24b8:	60 ff       	sbrs	r22, 0
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <__fp_round+0x20>
    24bc:	6f 5f       	subi	r22, 0xFF	; 255
    24be:	7f 4f       	sbci	r23, 0xFF	; 255
    24c0:	8f 4f       	sbci	r24, 0xFF	; 255
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	08 95       	ret

Disassembly of section .text.libgcc.div:

000023e4 <__divmodhi4>:
    23e4:	97 fb       	bst	r25, 7
    23e6:	07 2e       	mov	r0, r23
    23e8:	16 f4       	brtc	.+4      	; 0x23ee <__divmodhi4+0xa>
    23ea:	00 94       	com	r0
    23ec:	07 d0       	rcall	.+14     	; 0x23fc <__divmodhi4_neg1>
    23ee:	77 fd       	sbrc	r23, 7
    23f0:	09 d0       	rcall	.+18     	; 0x2404 <__divmodhi4_neg2>
    23f2:	0e 94 06 12 	call	0x240c	; 0x240c <__udivmodhi4>
    23f6:	07 fc       	sbrc	r0, 7
    23f8:	05 d0       	rcall	.+10     	; 0x2404 <__divmodhi4_neg2>
    23fa:	3e f4       	brtc	.+14     	; 0x240a <__divmodhi4_exit>

000023fc <__divmodhi4_neg1>:
    23fc:	90 95       	com	r25
    23fe:	81 95       	neg	r24
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	08 95       	ret

00002404 <__divmodhi4_neg2>:
    2404:	70 95       	com	r23
    2406:	61 95       	neg	r22
    2408:	7f 4f       	sbci	r23, 0xFF	; 255

0000240a <__divmodhi4_exit>:
    240a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002140 <__udivmodsi4>:
    2140:	a1 e2       	ldi	r26, 0x21	; 33
    2142:	1a 2e       	mov	r1, r26
    2144:	aa 1b       	sub	r26, r26
    2146:	bb 1b       	sub	r27, r27
    2148:	fd 01       	movw	r30, r26
    214a:	0d c0       	rjmp	.+26     	; 0x2166 <__udivmodsi4_ep>

0000214c <__udivmodsi4_loop>:
    214c:	aa 1f       	adc	r26, r26
    214e:	bb 1f       	adc	r27, r27
    2150:	ee 1f       	adc	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	a2 17       	cp	r26, r18
    2156:	b3 07       	cpc	r27, r19
    2158:	e4 07       	cpc	r30, r20
    215a:	f5 07       	cpc	r31, r21
    215c:	20 f0       	brcs	.+8      	; 0x2166 <__udivmodsi4_ep>
    215e:	a2 1b       	sub	r26, r18
    2160:	b3 0b       	sbc	r27, r19
    2162:	e4 0b       	sbc	r30, r20
    2164:	f5 0b       	sbc	r31, r21

00002166 <__udivmodsi4_ep>:
    2166:	66 1f       	adc	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	88 1f       	adc	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	1a 94       	dec	r1
    2170:	69 f7       	brne	.-38     	; 0x214c <__udivmodsi4_loop>
    2172:	60 95       	com	r22
    2174:	70 95       	com	r23
    2176:	80 95       	com	r24
    2178:	90 95       	com	r25
    217a:	9b 01       	movw	r18, r22
    217c:	ac 01       	movw	r20, r24
    217e:	bd 01       	movw	r22, r26
    2180:	cf 01       	movw	r24, r30
    2182:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000235e <__divmodsi4>:
    235e:	05 2e       	mov	r0, r21
    2360:	97 fb       	bst	r25, 7
    2362:	1e f4       	brtc	.+6      	; 0x236a <__divmodsi4+0xc>
    2364:	00 94       	com	r0
    2366:	0e 94 2b 13 	call	0x2656	; 0x2656 <__negsi2>
    236a:	57 fd       	sbrc	r21, 7
    236c:	07 d0       	rcall	.+14     	; 0x237c <__divmodsi4_neg2>
    236e:	0e 94 a0 10 	call	0x2140	; 0x2140 <__udivmodsi4>
    2372:	07 fc       	sbrc	r0, 7
    2374:	03 d0       	rcall	.+6      	; 0x237c <__divmodsi4_neg2>
    2376:	4e f4       	brtc	.+18     	; 0x238a <__divmodsi4_exit>
    2378:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__negsi2>

0000237c <__divmodsi4_neg2>:
    237c:	50 95       	com	r21
    237e:	40 95       	com	r20
    2380:	30 95       	com	r19
    2382:	21 95       	neg	r18
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	4f 4f       	sbci	r20, 0xFF	; 255
    2388:	5f 4f       	sbci	r21, 0xFF	; 255

0000238a <__divmodsi4_exit>:
    238a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00002656 <__negsi2>:
    2656:	90 95       	com	r25
    2658:	80 95       	com	r24
    265a:	70 95       	com	r23
    265c:	61 95       	neg	r22
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	8f 4f       	sbci	r24, 0xFF	; 255
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	08 95       	ret

Disassembly of section .text.libgcc:

0000270e <__tablejump2__>:
    270e:	ee 0f       	add	r30, r30
    2710:	ff 1f       	adc	r31, r31
    2712:	05 90       	lpm	r0, Z+
    2714:	f4 91       	lpm	r31, Z
    2716:	e0 2d       	mov	r30, r0
    2718:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00002524 <__umulhisi3>:
    2524:	a2 9f       	mul	r26, r18
    2526:	b0 01       	movw	r22, r0
    2528:	b3 9f       	mul	r27, r19
    252a:	c0 01       	movw	r24, r0
    252c:	a3 9f       	mul	r26, r19
    252e:	70 0d       	add	r23, r0
    2530:	81 1d       	adc	r24, r1
    2532:	11 24       	eor	r1, r1
    2534:	91 1d       	adc	r25, r1
    2536:	b2 9f       	mul	r27, r18
    2538:	70 0d       	add	r23, r0
    253a:	81 1d       	adc	r24, r1
    253c:	11 24       	eor	r1, r1
    253e:	91 1d       	adc	r25, r1
    2540:	08 95       	ret

Disassembly of section .text.libgcc:

00002666 <__xload_2>:
    2666:	57 fd       	sbrc	r21, 7
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <__xload_2+0xa>
    266a:	65 91       	lpm	r22, Z+
    266c:	75 91       	lpm	r23, Z+
    266e:	08 95       	ret
    2670:	61 91       	ld	r22, Z+
    2672:	71 91       	ld	r23, Z+
    2674:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000240c <__udivmodhi4>:
    240c:	aa 1b       	sub	r26, r26
    240e:	bb 1b       	sub	r27, r27
    2410:	51 e1       	ldi	r21, 0x11	; 17
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <__udivmodhi4_ep>

00002414 <__udivmodhi4_loop>:
    2414:	aa 1f       	adc	r26, r26
    2416:	bb 1f       	adc	r27, r27
    2418:	a6 17       	cp	r26, r22
    241a:	b7 07       	cpc	r27, r23
    241c:	10 f0       	brcs	.+4      	; 0x2422 <__udivmodhi4_ep>
    241e:	a6 1b       	sub	r26, r22
    2420:	b7 0b       	sbc	r27, r23

00002422 <__udivmodhi4_ep>:
    2422:	88 1f       	adc	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	5a 95       	dec	r21
    2428:	a9 f7       	brne	.-22     	; 0x2414 <__udivmodhi4_loop>
    242a:	80 95       	com	r24
    242c:	90 95       	com	r25
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000276c <_fini>:
    276c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000276e <__funcs_on_exit>:
    276e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00002770 <__simulator_exit>:
    2770:	08 95       	ret

Disassembly of section .text.exit:

0000260a <exit>:
    260a:	ec 01       	movw	r28, r24
    260c:	0e 94 b7 13 	call	0x276e	; 0x276e <__funcs_on_exit>
    2610:	0e 94 b6 13 	call	0x276c	; 0x276c <_fini>
    2614:	ce 01       	movw	r24, r28
    2616:	0e 94 b8 13 	call	0x2770	; 0x2770 <__simulator_exit>
    261a:	ce 01       	movw	r24, r28
    261c:	0e 94 b2 13 	call	0x2764	; 0x2764 <_Exit>

Disassembly of section .text.memcpy:

000022fc <memcpy>:
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	6a 01       	movw	r12, r20
    2304:	e6 2e       	mov	r14, r22
    2306:	dc 01       	movw	r26, r24
    2308:	28 0f       	add	r18, r24
    230a:	39 1f       	adc	r19, r25
    230c:	a2 17       	cp	r26, r18
    230e:	b3 07       	cpc	r27, r19
    2310:	51 f0       	breq	.+20     	; 0x2326 <memcpy+0x2a>
    2312:	f6 01       	movw	r30, r12
    2314:	44 91       	lpm	r20, Z
    2316:	e7 fc       	sbrc	r14, 7
    2318:	40 81       	ld	r20, Z
    231a:	4d 93       	st	X+, r20
    231c:	4f ef       	ldi	r20, 0xFF	; 255
    231e:	c4 1a       	sub	r12, r20
    2320:	d4 0a       	sbc	r13, r20
    2322:	e4 0a       	sbc	r14, r20
    2324:	f3 cf       	rjmp	.-26     	; 0x230c <memcpy+0x10>
    2326:	ef 90       	pop	r14
    2328:	df 90       	pop	r13
    232a:	cf 90       	pop	r12
    232c:	08 95       	ret

Disassembly of section .text._Exit:

00002764 <_Exit>:
    2764:	0e 94 66 00 	call	0xcc	; 0xcc <_exit>

Disassembly of section .text.avrlibc:

00002644 <eeprom_read_byte>:
    2644:	cb 01       	movw	r24, r22
    2646:	e1 99       	sbic	0x1c, 1	; 28
    2648:	fe cf       	rjmp	.-4      	; 0x2646 <eeprom_read_byte+0x2>
    264a:	9f bb       	out	0x1f, r25	; 31
    264c:	8e bb       	out	0x1e, r24	; 30
    264e:	e0 9a       	sbi	0x1c, 0	; 28
    2650:	99 27       	eor	r25, r25
    2652:	8d b3       	in	r24, 0x1d	; 29
    2654:	08 95       	ret

Disassembly of section .text.avrlibc:

000024c6 <eeprom_update_byte>:
    24c6:	26 2f       	mov	r18, r22

000024c8 <eeprom_update_r18>:
    24c8:	e1 99       	sbic	0x1c, 1	; 28
    24ca:	fe cf       	rjmp	.-4      	; 0x24c8 <eeprom_update_r18>
    24cc:	9f bb       	out	0x1f, r25	; 31
    24ce:	8e bb       	out	0x1e, r24	; 30
    24d0:	e0 9a       	sbi	0x1c, 0	; 28
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	0d b2       	in	r0, 0x1d	; 29
    24d6:	02 16       	cp	r0, r18
    24d8:	31 f0       	breq	.+12     	; 0x24e6 <eeprom_update_r18+0x1e>
    24da:	2d bb       	out	0x1d, r18	; 29
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	e2 9a       	sbi	0x1c, 2	; 28
    24e2:	e1 9a       	sbi	0x1c, 1	; 28
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	08 95       	ret

Disassembly of section .text.avrlibc:

00002594 <eeprom_write_byte>:
    2594:	26 2f       	mov	r18, r22

00002596 <eeprom_write_r18>:
    2596:	e1 99       	sbic	0x1c, 1	; 28
    2598:	fe cf       	rjmp	.-4      	; 0x2596 <eeprom_write_r18>
    259a:	9f bb       	out	0x1f, r25	; 31
    259c:	8e bb       	out	0x1e, r24	; 30
    259e:	2d bb       	out	0x1d, r18	; 29
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	e2 9a       	sbi	0x1c, 2	; 28
    25a6:	e1 9a       	sbi	0x1c, 1	; 28
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	08 95       	ret
