
Task1_source_code_U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a74  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000007e  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000418d  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ccb  00000000  00000000  00004f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001675  00000000  00000000  00005bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000460  00000000  00000000  00007268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fd7  00000000  00000000  00007aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00008ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000009d2  000009d2  00000a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.handle_Mes 00000132  000000be  000000be  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.BUZZER_Initialize 0000000c  00000918  00000918  000009ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.BUZZER_ON 0000000c  00000924  00000924  000009b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.BUZZER_OFF 0000000c  00000930  00000930  000009c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LED1_Initialize 0000000c  0000093c  0000093c  000009d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LED1_ON 0000000c  00000948  00000948  000009dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LED1_OFF 0000000c  00000954  00000954  000009e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LED2_Initialize 0000000c  00000960  00000960  000009f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LED2_ON 0000000c  0000096c  0000096c  00000a00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LED2_OFF 0000000c  00000978  00000978  00000a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LED3_Initialize 0000000c  00000984  00000984  00000a18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LED3_ON 0000000c  00000990  00000990  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LED3_OFF 0000000c  0000099c  0000099c  00000a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.DC_Initialize 00000050  000006d8  000006d8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.DC_Start 00000094  000004d4  000004d4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.DC_Stop 0000004c  00000728  00000728  000007bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.DC_Change_Speed 00000024  00000878  00000878  0000090c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.ServoMotor_Initialize 00000020  0000089c  0000089c  00000930  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.ServoMotor_Rotate 0000001a  000008bc  000008bc  00000950  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.main    00000082  00000568  00000568  000005fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.speed    00000002  00800060  00800060  00000a74  2**0
                  ALLOC
 35 .bss.currentState 00000001  00800064  00800064  00000a74  2**0
                  ALLOC
 36 .bss.UART_Rdata 00000002  00800062  00800062  00000a74  2**0
                  ALLOC
 37 .text.ADC_Initialize 0000000e  000008fc  000008fc  00000990  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.ADC_Read 00000074  00000664  00000664  000006f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.DIO_SetPinDirection 000000e2  00000310  00000310  000003a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.DIO_SetPinValue 000000e2  000003f2  000003f2  00000486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.UART_Initialize_WithoutInterrupt 00000120  000001f0  000001f0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.UART_Receive_Character 0000000e  0000090a  0000090a  0000099e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.Reassemble_uint16 0000000a  000009b4  000009b4  00000a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.UART_Receive_Word 0000004a  00000774  00000774  00000808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000a  000009be  000009be  00000a52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         0000007a  000005ea  000005ea  0000067e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         00000048  000007be  000007be  00000852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text         0000000a  000009c8  000009c8  00000a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.libgcc.div 00000044  00000806  00000806  0000089a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.libgcc.div 0000002e  0000084a  0000084a  000008de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.libgcc.div 00000010  000008ec  000008ec  00000980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.libgcc  0000000c  000009a8  000009a8  00000a3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.__dummy_fini 00000002  000009da  000009da  00000a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__dummy_funcs_on_exit 00000002  000009dc  000009dc  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_simulator_exit 00000002  000009de  000009de  00000a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.exit    00000016  000008d6  000008d6  0000096a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text._Exit   00000004  000009d6  000009d6  00000a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
   8:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
   c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  10:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  14:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  18:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  1c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  20:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  24:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  28:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  2c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  30:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  34:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  38:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  3c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  40:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  44:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  48:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  4c:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  50:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__bad_interrupt>
  54:	3f 03       	fmul	r19, r23
  56:	43 03       	mulsu	r20, r19
  58:	48 03       	fmul	r20, r16
  5a:	4d 03       	fmul	r20, r21
  5c:	52 03       	mulsu	r21, r18
  5e:	57 03       	mulsu	r21, r23
  60:	5c 03       	fmul	r21, r20
  62:	61 03       	mulsu	r22, r17

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	00 65       	ori	r16, 0x50	; 80
  68:	80 00       	.word	0x0080	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	e4 e6       	ldi	r30, 0x64	; 100
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	17 c0       	rjmp	.+46     	; 0xac <__do_clear_bss+0x8>
  7e:	b5 91       	lpm	r27, Z+
  80:	a5 91       	lpm	r26, Z+
  82:	35 91       	lpm	r19, Z+
  84:	25 91       	lpm	r18, Z+
  86:	05 91       	lpm	r16, Z+
  88:	07 fd       	sbrc	r16, 7
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <__do_clear_bss>
  8c:	95 91       	lpm	r25, Z+
  8e:	85 91       	lpm	r24, Z+
  90:	ef 01       	movw	r28, r30
  92:	f9 2f       	mov	r31, r25
  94:	e8 2f       	mov	r30, r24
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	a2 17       	cp	r26, r18
  9c:	b3 07       	cpc	r27, r19
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0x20>
  a0:	fe 01       	movw	r30, r28
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_clear_bss+0x8>

000000a4 <__do_clear_bss>:
  a4:	1d 92       	st	X+, r1
  a6:	a2 17       	cp	r26, r18
  a8:	b3 07       	cpc	r27, r19
  aa:	e1 f7       	brne	.-8      	; 0xa4 <__do_clear_bss>
  ac:	e9 36       	cpi	r30, 0x69	; 105
  ae:	f4 07       	cpc	r31, r20
  b0:	31 f7       	brne	.-52     	; 0x7e <__do_copy_data+0x8>
  b2:	0e 94 b4 02 	call	0x568	; 0x568 <main>
  b6:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <exit>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>

Disassembly of section .text:

000009d2 <__bad_interrupt>:
 9d2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.handle_Mes:

000000be <handle_Mes>:
 *  Author: youefkh05
 */ 

#include "APP.h"

void handle_Mes(temp T,dc_motor DC_MOT, E2PROM_State* S){
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
  d2:	16 2f       	mov	r17, r22
  d4:	5a 01       	movw	r10, r20
	
	// off all LED and Buzzer
	LED1_OFF();
  d6:	0e 94 aa 04 	call	0x954	; 0x954 <LED1_OFF>
	LED2_OFF();
  da:	0e 94 bc 04 	call	0x978	; 0x978 <LED2_OFF>
	LED3_OFF();
  de:	0e 94 ce 04 	call	0x99c	; 0x99c <LED3_OFF>
	BUZZER_OFF();
  e2:	0e 94 98 04 	call	0x930	; 0x930 <BUZZER_OFF>
	DC_Start(DC_MOT,DC_CW);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	81 2f       	mov	r24, r17
  ea:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DC_Start>
	
	if(T<=20.0){
  ee:	be 01       	movw	r22, r28
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__floatunsisf>
  f8:	6b 01       	movw	r12, r22
  fa:	7c 01       	movw	r14, r24
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 ea       	ldi	r20, 0xA0	; 160
 102:	51 e4       	ldi	r21, 0x41	; 65
 104:	0e 94 df 04 	call	0x9be	; 0x9be <__cmpsf2>
 108:	18 16       	cp	r1, r24
 10a:	2c f0       	brlt	.+10     	; 0x116 <handle_Mes+0x58>
		LED3_ON();
 10c:	0e 94 c8 04 	call	0x990	; 0x990 <LED3_ON>
		*S=Normal_state;
 110:	f5 01       	movw	r30, r10
 112:	10 82       	st	Z, r1
 114:	63 c0       	rjmp	.+198    	; 0x1dc <handle_Mes+0x11e>
	}
	else if (T>20.0 && T<=40.0){
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 ea       	ldi	r20, 0xA0	; 160
 11c:	51 e4       	ldi	r21, 0x41	; 65
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__gesf2>
 126:	18 16       	cp	r1, r24
 128:	7c f4       	brge	.+30     	; 0x148 <handle_Mes+0x8a>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	40 e2       	ldi	r20, 0x20	; 32
 130:	52 e4       	ldi	r21, 0x42	; 66
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	0e 94 df 04 	call	0x9be	; 0x9be <__cmpsf2>
 13a:	18 16       	cp	r1, r24
 13c:	2c f0       	brlt	.+10     	; 0x148 <handle_Mes+0x8a>
		LED2_ON();
 13e:	0e 94 b6 04 	call	0x96c	; 0x96c <LED2_ON>
		*S=Normal_state;
 142:	f5 01       	movw	r30, r10
 144:	10 82       	st	Z, r1
 146:	4a c0       	rjmp	.+148    	; 0x1dc <handle_Mes+0x11e>
	}
	else if (T>40.0 && T<=50.0){
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 e2       	ldi	r20, 0x20	; 32
 14e:	52 e4       	ldi	r21, 0x42	; 66
 150:	c7 01       	movw	r24, r14
 152:	b6 01       	movw	r22, r12
 154:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__gesf2>
 158:	18 16       	cp	r1, r24
 15a:	6c f4       	brge	.+26     	; 0x176 <handle_Mes+0xb8>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	48 e4       	ldi	r20, 0x48	; 72
 162:	52 e4       	ldi	r21, 0x42	; 66
 164:	c7 01       	movw	r24, r14
 166:	b6 01       	movw	r22, r12
 168:	0e 94 df 04 	call	0x9be	; 0x9be <__cmpsf2>
 16c:	18 16       	cp	r1, r24
 16e:	1c f0       	brlt	.+6      	; 0x176 <handle_Mes+0xb8>
		LED1_ON();
 170:	0e 94 a4 04 	call	0x948	; 0x948 <LED1_ON>
 174:	33 c0       	rjmp	.+102    	; 0x1dc <handle_Mes+0x11e>
	}
	else if (T==Off_Mes)
 176:	cf 3f       	cpi	r28, 0xFF	; 255
 178:	d1 05       	cpc	r29, r1
 17a:	49 f4       	brne	.+18     	; 0x18e <handle_Mes+0xd0>
	{
		*S=Off_state;
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	f5 01       	movw	r30, r10
 180:	80 83       	st	Z, r24
		LED1_ON();
 182:	0e 94 a4 04 	call	0x948	; 0x948 <LED1_ON>
		DC_Stop(DC_MOT);
 186:	81 2f       	mov	r24, r17
 188:	0e 94 94 03 	call	0x728	; 0x728 <DC_Stop>
 18c:	27 c0       	rjmp	.+78     	; 0x1dc <handle_Mes+0x11e>
	}
	else if (T==Emergency_Mes)
 18e:	cc 32       	cpi	r28, 0x2C	; 44
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	df 07       	cpc	r29, r31
 194:	41 f4       	brne	.+16     	; 0x1a6 <handle_Mes+0xe8>
	{
		*S=Emergency_state;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	f5 01       	movw	r30, r10
 19a:	80 83       	st	Z, r24
		LED1_ON();
 19c:	0e 94 a4 04 	call	0x948	; 0x948 <LED1_ON>
		BUZZER_ON();
 1a0:	0e 94 92 04 	call	0x924	; 0x924 <BUZZER_ON>
 1a4:	1b c0       	rjmp	.+54     	; 0x1dc <handle_Mes+0x11e>
	}
	else if (T==Abnormal_Mes)
 1a6:	ce 35       	cpi	r28, 0x5E	; 94
 1a8:	d1 40       	sbci	r29, 0x01	; 1
 1aa:	79 f4       	brne	.+30     	; 0x1ca <handle_Mes+0x10c>
	{
		*S=Abnormal_Mes;
 1ac:	8e e5       	ldi	r24, 0x5E	; 94
 1ae:	f5 01       	movw	r30, r10
 1b0:	80 83       	st	Z, r24
		LED1_ON();
 1b2:	0e 94 a4 04 	call	0x948	; 0x948 <LED1_ON>
		BUZZER_ON();
 1b6:	0e 94 92 04 	call	0x924	; 0x924 <BUZZER_ON>
		DC_Stop(DC_MOT);
 1ba:	81 2f       	mov	r24, r17
 1bc:	0e 94 94 03 	call	0x728	; 0x728 <DC_Stop>
		ServoMotor_Rotate(angle_P90);
 1c0:	8c e2       	ldi	r24, 0x2C	; 44
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <ServoMotor_Rotate>
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <handle_Mes+0x11e>
		
	}
	else {
		//for debugg
		LED1_ON();
 1ca:	0e 94 a4 04 	call	0x948	; 0x948 <LED1_ON>
		LED2_ON();
 1ce:	0e 94 b6 04 	call	0x96c	; 0x96c <LED2_ON>
		LED3_ON();
 1d2:	0e 94 c8 04 	call	0x990	; 0x990 <LED3_ON>
		*S=Emergency_state;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	f5 01       	movw	r30, r10
 1da:	80 83       	st	Z, r24
	}
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	bf 90       	pop	r11
 1ec:	af 90       	pop	r10
 1ee:	08 95       	ret

Disassembly of section .text.BUZZER_Initialize:

00000918 <BUZZER_Initialize>:



void BUZZER_Initialize(void)
{
	DIO_SetPinDirection(BUZZER_PORT, BUZZER_PIN, BUZZER_OUTPUT);
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	64 e0       	ldi	r22, 0x04	; 4
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
 922:	08 95       	ret

Disassembly of section .text.BUZZER_ON:

00000924 <BUZZER_ON>:
}
void BUZZER_ON(void)
{
	DIO_SetPinValue(BUZZER_PORT, BUZZER_PIN, BUZZER_HIGH);
 924:	41 e0       	ldi	r20, 0x01	; 1
 926:	64 e0       	ldi	r22, 0x04	; 4
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 92e:	08 95       	ret

Disassembly of section .text.BUZZER_OFF:

00000930 <BUZZER_OFF>:
}
void BUZZER_OFF(void)
{
	DIO_SetPinValue(BUZZER_PORT, BUZZER_PIN, BUZZER_LOW);
 930:	40 e0       	ldi	r20, 0x00	; 0
 932:	64 e0       	ldi	r22, 0x04	; 4
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 93a:	08 95       	ret

Disassembly of section .text.LED1_Initialize:

0000093c <LED1_Initialize>:



void LED1_Initialize(void)
{
	DIO_SetPinDirection(LED1_PORT, LED1_PIN, LED1_OUTPUT);
 93c:	41 e0       	ldi	r20, 0x01	; 1
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
 946:	08 95       	ret

Disassembly of section .text.LED1_ON:

00000948 <LED1_ON>:
}
void LED1_ON(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_HIGH);
 948:	41 e0       	ldi	r20, 0x01	; 1
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 952:	08 95       	ret

Disassembly of section .text.LED1_OFF:

00000954 <LED1_OFF>:
}
void LED1_OFF(void)
{
	DIO_SetPinValue(LED1_PORT, LED1_PIN, LED1_LOW);
 954:	40 e0       	ldi	r20, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 95e:	08 95       	ret

Disassembly of section .text.LED2_Initialize:

00000960 <LED2_Initialize>:

#include "LED2_Private.h"

void LED2_Initialize(void)
{
	DIO_SetPinDirection(LED2_PORT, LED2_PIN, LED2_OUTPUT);
 960:	41 e0       	ldi	r20, 0x01	; 1
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
 96a:	08 95       	ret

Disassembly of section .text.LED2_ON:

0000096c <LED2_ON>:
}
void LED2_ON(void)
{
	DIO_SetPinValue(LED2_PORT, LED2_PIN, LED2_HIGH);
 96c:	41 e0       	ldi	r20, 0x01	; 1
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 976:	08 95       	ret

Disassembly of section .text.LED2_OFF:

00000978 <LED2_OFF>:
}
void LED2_OFF(void)
{
	DIO_SetPinValue(LED2_PORT, LED2_PIN, LED2_LOW);
 978:	40 e0       	ldi	r20, 0x00	; 0
 97a:	61 e0       	ldi	r22, 0x01	; 1
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 982:	08 95       	ret

Disassembly of section .text.LED3_Initialize:

00000984 <LED3_Initialize>:

#include "LED3_Private.h"

void LED3_Initialize(void)
{
	DIO_SetPinDirection(LED3_PORT, LED3_PIN, LED3_OUTPUT);
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	62 e0       	ldi	r22, 0x02	; 2
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
 98e:	08 95       	ret

Disassembly of section .text.LED3_ON:

00000990 <LED3_ON>:
}
void LED3_ON(void)
{
	DIO_SetPinValue(LED3_PORT, LED3_PIN, LED3_HIGH);
 990:	41 e0       	ldi	r20, 0x01	; 1
 992:	62 e0       	ldi	r22, 0x02	; 2
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 99a:	08 95       	ret

Disassembly of section .text.LED3_OFF:

0000099c <LED3_OFF>:
}
void LED3_OFF(void)
{
	DIO_SetPinValue(LED3_PORT, LED3_PIN, LED3_LOW);
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	62 e0       	ldi	r22, 0x02	; 2
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 9a6:	08 95       	ret

Disassembly of section .text.DC_Initialize:

000006d8 <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{	
	switch(motor)
 6d8:	88 23       	and	r24, r24
 6da:	19 f0       	breq	.+6      	; 0x6e2 <DC_Initialize+0xa>
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	a1 f0       	breq	.+40     	; 0x708 <DC_Initialize+0x30>
 6e0:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	63 e0       	ldi	r22, 0x03	; 3
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
 6ec:	41 e0       	ldi	r20, 0x01	; 1
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
 6f6:	41 e0       	ldi	r20, 0x01	; 1
 6f8:	62 e0       	ldi	r22, 0x02	; 2
 6fa:	82 e0       	ldi	r24, 0x02	; 2
 6fc:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
		TCNT0 = 0;			/* Set timer0 count zero */
 700:	12 be       	out	0x32, r1	; 50
		TCCR0 = (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)|(1<<CS01);/* Set Fast PWM with Fosc/64 Timer0 clock */
 702:	8b e6       	ldi	r24, 0x6B	; 107
 704:	83 bf       	out	0x33, r24	; 51
		break;
 706:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
 708:	41 e0       	ldi	r20, 0x01	; 1
 70a:	62 e0       	ldi	r22, 0x02	; 2
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	62 e0       	ldi	r22, 0x02	; 2
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	62 e0       	ldi	r22, 0x02	; 2
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
 726:	08 95       	ret

Disassembly of section .text.DC_Start:

000004d4 <DC_Start>:
	}
	
}

void DC_Start(dc_motor motor, dc_motor_direction direction)
{	
 4d4:	cf 93       	push	r28
 4d6:	c6 2f       	mov	r28, r22
	switch(motor)
 4d8:	88 23       	and	r24, r24
 4da:	19 f0       	breq	.+6      	; 0x4e2 <DC_Start+0xe>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	19 f1       	breq	.+70     	; 0x526 <DC_Start+0x52>
 4e0:	41 c0       	rjmp	.+130    	; 0x564 <DC_Start+0x90>
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_HIGH);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		OCR0 = 125;	//mid speed
 4ec:	8d e7       	ldi	r24, 0x7D	; 125
 4ee:	8c bf       	out	0x3c, r24	; 60
		switch(direction)
 4f0:	cc 23       	and	r28, r28
 4f2:	19 f0       	breq	.+6      	; 0x4fa <DC_Start+0x26>
 4f4:	c1 30       	cpi	r28, 0x01	; 1
 4f6:	61 f0       	breq	.+24     	; 0x510 <DC_Start+0x3c>
 4f8:	35 c0       	rjmp	.+106    	; 0x564 <DC_Start+0x90>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_HIGH);
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	62 e0       	ldi	r22, 0x02	; 2
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			break;
 50e:	2a c0       	rjmp	.+84     	; 0x564 <DC_Start+0x90>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_HIGH);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	62 e0       	ldi	r22, 0x02	; 2
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			break;
 524:	1f c0       	rjmp	.+62     	; 0x564 <DC_Start+0x90>
		}
		break;
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_HIGH);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		switch(direction)
 530:	cc 23       	and	r28, r28
 532:	19 f0       	breq	.+6      	; 0x53a <DC_Start+0x66>
 534:	c1 30       	cpi	r28, 0x01	; 1
 536:	61 f0       	breq	.+24     	; 0x550 <DC_Start+0x7c>
 538:	15 c0       	rjmp	.+42     	; 0x564 <DC_Start+0x90>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_HIGH);
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	62 e0       	ldi	r22, 0x02	; 2
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			break;
 54e:	0a c0       	rjmp	.+20     	; 0x564 <DC_Start+0x90>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	82 e0       	ldi	r24, 0x02	; 2
 556:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_HIGH);
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
			break;
		}
		break;
	}
}
 564:	cf 91       	pop	r28
 566:	08 95       	ret

Disassembly of section .text.DC_Stop:

00000728 <DC_Stop>:

void DC_Stop(dc_motor motor)
{
	switch(motor)
 728:	88 23       	and	r24, r24
 72a:	19 f0       	breq	.+6      	; 0x732 <DC_Stop+0xa>
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	91 f0       	breq	.+36     	; 0x754 <DC_Stop+0x2c>
 730:	08 95       	ret
	{
		case DC_Motor1:
		OCR0=0;
 732:	1c be       	out	0x3c, r1	; 60
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_LOW);
 734:	40 e0       	ldi	r20, 0x00	; 0
 736:	63 e0       	ldi	r22, 0x03	; 3
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
 73e:	40 e0       	ldi	r20, 0x00	; 0
 740:	61 e0       	ldi	r22, 0x01	; 1
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
 748:	40 e0       	ldi	r20, 0x00	; 0
 74a:	62 e0       	ldi	r22, 0x02	; 2
 74c:	82 e0       	ldi	r24, 0x02	; 2
 74e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		break;
 752:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_LOW);
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	62 e0       	ldi	r22, 0x02	; 2
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	62 e0       	ldi	r22, 0x02	; 2
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	62 e0       	ldi	r22, 0x02	; 2
 76c:	82 e0       	ldi	r24, 0x02	; 2
 76e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinValue>
 772:	08 95       	ret

Disassembly of section .text.DC_Change_Speed:

00000878 <DC_Change_Speed>:
		break;
	}
}

void DC_Change_Speed(dc_motor motor,uint16_t speed)
{	switch (motor){
 878:	88 23       	and	r24, r24
 87a:	19 f0       	breq	.+6      	; 0x882 <DC_Change_Speed+0xa>
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	39 f0       	breq	.+14     	; 0x88e <DC_Change_Speed+0x16>
 880:	08 95       	ret
		case DC_Motor1:
			OCR0 = speed/4;
 882:	76 95       	lsr	r23
 884:	67 95       	ror	r22
 886:	76 95       	lsr	r23
 888:	67 95       	ror	r22
 88a:	6c bf       	out	0x3c, r22	; 60
		break;
 88c:	08 95       	ret
		case DC_Motor2:
			OCR1A = speed/4;
 88e:	76 95       	lsr	r23
 890:	67 95       	ror	r22
 892:	76 95       	lsr	r23
 894:	67 95       	ror	r22
 896:	7b bd       	out	0x2b, r23	; 43
 898:	6a bd       	out	0x2a, r22	; 42
 89a:	08 95       	ret

Disassembly of section .text.ServoMotor_Initialize:

0000089c <ServoMotor_Initialize>:

#include "Servo_Private.h"

void ServoMotor_Initialize(void)
{
	DIO_SetPinDirection(SERVO_PORT, SERVO_PIN, DIO_OUTPUT);
 89c:	82 b3       	in	r24, 0x12	; 18
 89e:	41 e0       	ldi	r20, 0x01	; 1
 8a0:	65 e0       	ldi	r22, 0x05	; 5
 8a2:	0e 94 88 01 	call	0x310	; 0x310 <DIO_SetPinDirection>
	TCNT1 = 0;			/* Set timer1 count zero */
 8a6:	1d bc       	out	0x2d, r1	; 45
 8a8:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
 8aa:	83 ec       	ldi	r24, 0xC3	; 195
 8ac:	99 e0       	ldi	r25, 0x09	; 9
 8ae:	97 bd       	out	0x27, r25	; 39
 8b0:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 8b2:	82 e8       	ldi	r24, 0x82	; 130
 8b4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 8b6:	8b e1       	ldi	r24, 0x1B	; 27
 8b8:	8e bd       	out	0x2e, r24	; 46
 8ba:	08 95       	ret

Disassembly of section .text.ServoMotor_Rotate:

000008bc <ServoMotor_Rotate>:
	
}

void ServoMotor_Rotate(servo_angle angle)
{
	OCR1A=((ICR1+1)/4)-angle;
 8bc:	26 b5       	in	r18, 0x26	; 38
 8be:	37 b5       	in	r19, 0x27	; 39
 8c0:	2f 5f       	subi	r18, 0xFF	; 255
 8c2:	3f 4f       	sbci	r19, 0xFF	; 255
 8c4:	36 95       	lsr	r19
 8c6:	27 95       	ror	r18
 8c8:	36 95       	lsr	r19
 8ca:	27 95       	ror	r18
 8cc:	28 1b       	sub	r18, r24
 8ce:	39 0b       	sbc	r19, r25
 8d0:	3b bd       	out	0x2b, r19	; 43
 8d2:	2a bd       	out	0x2a, r18	; 42
 8d4:	08 95       	ret

Disassembly of section .text.main:

00000568 <main>:
uint16_t UART_Rdata=0;
volatile E2PROM_State currentState =Normal_state;
uint16_t speed=0;

int main(void)
{	
 568:	0f 93       	push	r16
	/*		Initializations		*/
	
	dc_motor DC_mach1=DC_Motor1;
	DC_Initialize(DC_mach1);
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DC_Initialize>
	ServoMotor_Initialize();
 570:	0e 94 4e 04 	call	0x89c	; 0x89c <ServoMotor_Initialize>
	LED1_Initialize();
 574:	0e 94 9e 04 	call	0x93c	; 0x93c <LED1_Initialize>
	LED2_Initialize();
 578:	0e 94 b0 04 	call	0x960	; 0x960 <LED2_Initialize>
	LED3_Initialize();
 57c:	0e 94 c2 04 	call	0x984	; 0x984 <LED3_Initialize>
	//LED4_Initialize();
	BUZZER_Initialize();
 580:	0e 94 8c 04 	call	0x918	; 0x918 <BUZZER_Initialize>
	ADC_Initialize(5, 1024);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	85 e0       	ldi	r24, 0x05	; 5
 588:	0e 94 7e 04 	call	0x8fc	; 0x8fc <ADC_Initialize>
	uart_status UART_State= UART_Initialize_WithoutInterrupt(UART_9600,Synchronous, Disable , Bits_8, Bit_1);
 58c:	00 e0       	ldi	r16, 0x00	; 0
 58e:	23 e0       	ldi	r18, 0x03	; 3
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	80 e6       	ldi	r24, 0x60	; 96
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <UART_Initialize_WithoutInterrupt>
	if(UART_State==UART_NOK){
 59c:	88 23       	and	r24, r24
 59e:	09 f1       	breq	.+66     	; 0x5e2 <main+0x7a>
	
	
	
	
	//Start the machine
	ServoMotor_Rotate(angle_0);
 5a0:	86 eb       	ldi	r24, 0xB6	; 182
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <ServoMotor_Rotate>
	DC_Start(DC_mach1,DC_CW);
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DC_Start>
	
	/*	Main	Code	*/
    while(1)
    {	
		/* Recieve the message (Temperature)	*/
		UART_State= UART_Receive_Word(&UART_Rdata);
 5b0:	82 e6       	ldi	r24, 0x62	; 98
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 ba 03 	call	0x774	; 0x774 <UART_Receive_Word>
		
		speed=ADC_Read(POT1_PIN);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 32 03 	call	0x664	; 0x664 <ADC_Read>
 5be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		DC_Change_Speed(DC_mach1,speed);
 5c6:	bc 01       	movw	r22, r24
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	0e 94 3c 04 	call	0x878	; 0x878 <DC_Change_Speed>
		//Send the message (Speed)	
		UART_Transmit_Speed(speed);
		*/
		
		/* Handle the message	*/
		handle_Mes(UART_Rdata,DC_mach1,&currentState);
 5ce:	44 e6       	ldi	r20, 0x64	; 100
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <UART_Rdata>
 5d8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <UART_Rdata+0x1>
 5dc:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
 5e0:	e7 cf       	rjmp	.-50     	; 0x5b0 <main+0x48>
    }
}
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0f 91       	pop	r16
 5e8:	08 95       	ret

Disassembly of section .text.ADC_Initialize:

000008fc <ADC_Initialize>:

#include "ADC_Private.h"

void ADC_Initialize(adc_vref voltage , adc_prescaler prescaler)
{
	ADMUX |= 0x40;
 8fc:	87 b1       	in	r24, 0x07	; 7
 8fe:	80 64       	ori	r24, 0x40	; 64
 900:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xA7;
 902:	86 b1       	in	r24, 0x06	; 6
 904:	87 6a       	ori	r24, 0xA7	; 167
 906:	86 b9       	out	0x06, r24	; 6
 908:	08 95       	ret

Disassembly of section .text.ADC_Read:

00000664 <ADC_Read>:
}

uint16_t ADC_Read(adc_channel channel)
{
 664:	e8 2f       	mov	r30, r24
	uint16_t val = 0;

	// Clear the ADC result register by reading it once
	uint16_t dummy = ADC_VAL;
 666:	84 b1       	in	r24, 0x04	; 4
 668:	95 b1       	in	r25, 0x05	; 5
 
	// Select the ADC channel
	switch (channel)
 66a:	8e 2f       	mov	r24, r30
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	88 30       	cpi	r24, 0x08	; 8
 670:	91 05       	cpc	r25, r1
 672:	50 f5       	brcc	.+84     	; 0x6c8 <ADC_Read+0x64>
 674:	fc 01       	movw	r30, r24
 676:	e6 5d       	subi	r30, 0xD6	; 214
 678:	ff 4f       	sbci	r31, 0xFF	; 255
 67a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__tablejump2__>
	{
		case ADC_0:
		ADMUX = (ADMUX & 0xF8) | 0x00; // Clear the channel bits and set ADC0
 67e:	87 b1       	in	r24, 0x07	; 7
 680:	88 7f       	andi	r24, 0xF8	; 248
 682:	87 b9       	out	0x07, r24	; 7
		break;
 684:	21 c0       	rjmp	.+66     	; 0x6c8 <ADC_Read+0x64>
		case ADC_1:
		ADMUX = (ADMUX & 0xF8) | 0x01; // Clear the channel bits and set ADC1
 686:	87 b1       	in	r24, 0x07	; 7
 688:	88 7f       	andi	r24, 0xF8	; 248
 68a:	81 60       	ori	r24, 0x01	; 1
 68c:	87 b9       	out	0x07, r24	; 7
		break;
 68e:	1c c0       	rjmp	.+56     	; 0x6c8 <ADC_Read+0x64>
		case ADC_2:
		ADMUX = (ADMUX & 0xF8) | 0x02; // Clear the channel bits and set ADC2
 690:	87 b1       	in	r24, 0x07	; 7
 692:	88 7f       	andi	r24, 0xF8	; 248
 694:	82 60       	ori	r24, 0x02	; 2
 696:	87 b9       	out	0x07, r24	; 7
		break;
 698:	17 c0       	rjmp	.+46     	; 0x6c8 <ADC_Read+0x64>
		case ADC_3:
		ADMUX = (ADMUX & 0xF8) | 0x03; // Clear the channel bits and set ADC3
 69a:	87 b1       	in	r24, 0x07	; 7
 69c:	88 7f       	andi	r24, 0xF8	; 248
 69e:	83 60       	ori	r24, 0x03	; 3
 6a0:	87 b9       	out	0x07, r24	; 7
		break;
 6a2:	12 c0       	rjmp	.+36     	; 0x6c8 <ADC_Read+0x64>
		case ADC_4:
		ADMUX = (ADMUX & 0xF8) | 0x04; // Clear the channel bits and set ADC4
 6a4:	87 b1       	in	r24, 0x07	; 7
 6a6:	88 7f       	andi	r24, 0xF8	; 248
 6a8:	84 60       	ori	r24, 0x04	; 4
 6aa:	87 b9       	out	0x07, r24	; 7
		break;
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <ADC_Read+0x64>
		case ADC_5:
		ADMUX = (ADMUX & 0xF8) | 0x05; // Clear the channel bits and set ADC5
 6ae:	87 b1       	in	r24, 0x07	; 7
 6b0:	88 7f       	andi	r24, 0xF8	; 248
 6b2:	85 60       	ori	r24, 0x05	; 5
 6b4:	87 b9       	out	0x07, r24	; 7
		break;
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <ADC_Read+0x64>
		case ADC_6:
		ADMUX = (ADMUX & 0xF8) | 0x06; // Clear the channel bits and set ADC6
 6b8:	87 b1       	in	r24, 0x07	; 7
 6ba:	88 7f       	andi	r24, 0xF8	; 248
 6bc:	86 60       	ori	r24, 0x06	; 6
 6be:	87 b9       	out	0x07, r24	; 7
		break;
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <ADC_Read+0x64>
		case ADC_7:
		ADMUX = (ADMUX & 0xF8) | 0x07; // Clear the channel bits and set ADC7
 6c2:	87 b1       	in	r24, 0x07	; 7
 6c4:	87 60       	ori	r24, 0x07	; 7
 6c6:	87 b9       	out	0x07, r24	; 7
		break;
	}

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 6c8:	86 b1       	in	r24, 0x06	; 6
 6ca:	80 64       	ori	r24, 0x40	; 64
 6cc:	86 b9       	out	0x06, r24	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 6ce:	36 99       	sbic	0x06, 6	; 6
 6d0:	fe cf       	rjmp	.-4      	; 0x6ce <ADC_Read+0x6a>

	// Read the converted value
	val = ADC_VAL;
 6d2:	84 b1       	in	r24, 0x04	; 4
 6d4:	95 b1       	in	r25, 0x05	; 5

	return val;
}
 6d6:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

00000310 <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 310:	44 23       	and	r20, r20
 312:	19 f0       	breq	.+6      	; 0x31a <DIO_SetPinDirection+0xa>
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	c9 f1       	breq	.+114    	; 0x38a <DIO_SetPinDirection+0x7a>
 318:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	91 f0       	breq	.+36     	; 0x342 <DIO_SetPinDirection+0x32>
 31e:	28 f0       	brcs	.+10     	; 0x32a <DIO_SetPinDirection+0x1a>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	d9 f0       	breq	.+54     	; 0x35a <DIO_SetPinDirection+0x4a>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	29 f1       	breq	.+74     	; 0x372 <DIO_SetPinDirection+0x62>
 328:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 32a:	2a b3       	in	r18, 0x1a	; 26
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPinDirection+0x26>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPinDirection+0x22>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	8a bb       	out	0x1a, r24	; 26
			break;
 340:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 342:	27 b3       	in	r18, 0x17	; 23
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_SetPinDirection+0x3e>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_SetPinDirection+0x3a>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	87 bb       	out	0x17, r24	; 23
			break;
 358:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 35a:	24 b3       	in	r18, 0x14	; 20
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_SetPinDirection+0x56>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_SetPinDirection+0x52>
 36a:	80 95       	com	r24
 36c:	82 23       	and	r24, r18
 36e:	84 bb       	out	0x14, r24	; 20
			break;
 370:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 372:	21 b3       	in	r18, 0x11	; 17
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_SetPinDirection+0x6e>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_SetPinDirection+0x6a>
 382:	80 95       	com	r24
 384:	82 23       	and	r24, r18
 386:	81 bb       	out	0x11, r24	; 17
			break;
 388:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	89 f0       	breq	.+34     	; 0x3b0 <DIO_SetPinDirection+0xa0>
 38e:	28 f0       	brcs	.+10     	; 0x39a <DIO_SetPinDirection+0x8a>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	c9 f0       	breq	.+50     	; 0x3c6 <DIO_SetPinDirection+0xb6>
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	11 f1       	breq	.+68     	; 0x3dc <DIO_SetPinDirection+0xcc>
 398:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 39a:	2a b3       	in	r18, 0x1a	; 26
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_SetPinDirection+0x96>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_SetPinDirection+0x92>
 3aa:	82 2b       	or	r24, r18
 3ac:	8a bb       	out	0x1a, r24	; 26
			break;
 3ae:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 3b0:	27 b3       	in	r18, 0x17	; 23
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_SetPinDirection+0xac>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_SetPinDirection+0xa8>
 3c0:	82 2b       	or	r24, r18
 3c2:	87 bb       	out	0x17, r24	; 23
			break;
 3c4:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 3c6:	24 b3       	in	r18, 0x14	; 20
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_SetPinDirection+0xc2>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_SetPinDirection+0xbe>
 3d6:	82 2b       	or	r24, r18
 3d8:	84 bb       	out	0x14, r24	; 20
			break;
 3da:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 3dc:	21 b3       	in	r18, 0x11	; 17
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_SetPinDirection+0xd8>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_SetPinDirection+0xd4>
 3ec:	82 2b       	or	r24, r18
 3ee:	81 bb       	out	0x11, r24	; 17
 3f0:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

000003f2 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 3f2:	44 23       	and	r20, r20
 3f4:	19 f0       	breq	.+6      	; 0x3fc <DIO_SetPinValue+0xa>
 3f6:	41 30       	cpi	r20, 0x01	; 1
 3f8:	c9 f1       	breq	.+114    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3fa:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	91 f0       	breq	.+36     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 400:	28 f0       	brcs	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	d9 f0       	breq	.+54     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	29 f1       	breq	.+74     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 40a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 40c:	2b b3       	in	r18, 0x1b	; 27
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	8b bb       	out	0x1b, r24	; 27
			break;
 422:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 424:	28 b3       	in	r18, 0x18	; 24
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	80 95       	com	r24
 436:	82 23       	and	r24, r18
 438:	88 bb       	out	0x18, r24	; 24
			break;
 43a:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 43c:	25 b3       	in	r18, 0x15	; 21
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	85 bb       	out	0x15, r24	; 21
			break;
 452:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 454:	22 b3       	in	r18, 0x12	; 18
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	80 95       	com	r24
 466:	82 23       	and	r24, r18
 468:	82 bb       	out	0x12, r24	; 18
			break;
 46a:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	89 f0       	breq	.+34     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 470:	28 f0       	brcs	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	c9 f0       	breq	.+50     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 476:	83 30       	cpi	r24, 0x03	; 3
 478:	11 f1       	breq	.+68     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 47a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 48c:	82 2b       	or	r24, r18
 48e:	8b bb       	out	0x1b, r24	; 27
			break;
 490:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 492:	28 b3       	in	r18, 0x18	; 24
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	6a 95       	dec	r22
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	82 2b       	or	r24, r18
 4a4:	88 bb       	out	0x18, r24	; 24
			break;
 4a6:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 4a8:	25 b3       	in	r18, 0x15	; 21
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	82 2b       	or	r24, r18
 4ba:	85 bb       	out	0x15, r24	; 21
			break;
 4bc:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 4be:	22 b3       	in	r18, 0x12	; 18
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ce:	82 2b       	or	r24, r18
 4d0:	82 bb       	out	0x12, r24	; 18
 4d2:	08 95       	ret

Disassembly of section .text.UART_Initialize_WithoutInterrupt:

000001f0 <UART_Initialize_WithoutInterrupt>:
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
	s|= UART_Transmit_Character(low_byte);
	return s;

}
 1f0:	0f 93       	push	r16
 1f2:	31 b3       	in	r19, 0x11	; 17
 1f4:	32 60       	ori	r19, 0x02	; 2
 1f6:	31 bb       	out	0x11, r19	; 17
 1f8:	31 b3       	in	r19, 0x11	; 17
 1fa:	3e 7f       	andi	r19, 0xFE	; 254
 1fc:	31 bb       	out	0x11, r19	; 17
 1fe:	3a b1       	in	r19, 0x0a	; 10
 200:	38 61       	ori	r19, 0x18	; 24
 202:	3a b9       	out	0x0a, r19	; 10
 204:	66 23       	and	r22, r22
 206:	19 f0       	breq	.+6      	; 0x20e <UART_Initialize_WithoutInterrupt+0x1e>
 208:	61 30       	cpi	r22, 0x01	; 1
 20a:	29 f0       	breq	.+10     	; 0x216 <UART_Initialize_WithoutInterrupt+0x26>
 20c:	07 c0       	rjmp	.+14     	; 0x21c <UART_Initialize_WithoutInterrupt+0x2c>
 20e:	30 b5       	in	r19, 0x20	; 32
 210:	3f 77       	andi	r19, 0x7F	; 127
 212:	30 bd       	out	0x20, r19	; 32
 214:	03 c0       	rjmp	.+6      	; 0x21c <UART_Initialize_WithoutInterrupt+0x2c>
 216:	30 b5       	in	r19, 0x20	; 32
 218:	30 68       	ori	r19, 0x80	; 128
 21a:	30 bd       	out	0x20, r19	; 32
 21c:	22 30       	cpi	r18, 0x02	; 2
 21e:	f9 f0       	breq	.+62     	; 0x25e <UART_Initialize_WithoutInterrupt+0x6e>
 220:	28 f4       	brcc	.+10     	; 0x22c <UART_Initialize_WithoutInterrupt+0x3c>
 222:	22 23       	and	r18, r18
 224:	41 f0       	breq	.+16     	; 0x236 <UART_Initialize_WithoutInterrupt+0x46>
 226:	21 30       	cpi	r18, 0x01	; 1
 228:	81 f0       	breq	.+32     	; 0x24a <UART_Initialize_WithoutInterrupt+0x5a>
 22a:	36 c0       	rjmp	.+108    	; 0x298 <UART_Initialize_WithoutInterrupt+0xa8>
 22c:	23 30       	cpi	r18, 0x03	; 3
 22e:	09 f1       	breq	.+66     	; 0x272 <UART_Initialize_WithoutInterrupt+0x82>
 230:	24 30       	cpi	r18, 0x04	; 4
 232:	49 f1       	breq	.+82     	; 0x286 <UART_Initialize_WithoutInterrupt+0x96>
 234:	31 c0       	rjmp	.+98     	; 0x298 <UART_Initialize_WithoutInterrupt+0xa8>
 236:	2a b1       	in	r18, 0x0a	; 10
 238:	2b 7f       	andi	r18, 0xFB	; 251
 23a:	2a b9       	out	0x0a, r18	; 10
 23c:	20 b5       	in	r18, 0x20	; 32
 23e:	2b 7f       	andi	r18, 0xFB	; 251
 240:	20 bd       	out	0x20, r18	; 32
 242:	20 b5       	in	r18, 0x20	; 32
 244:	2d 7f       	andi	r18, 0xFD	; 253
 246:	20 bd       	out	0x20, r18	; 32
 248:	27 c0       	rjmp	.+78     	; 0x298 <UART_Initialize_WithoutInterrupt+0xa8>
 24a:	2a b1       	in	r18, 0x0a	; 10
 24c:	2b 7f       	andi	r18, 0xFB	; 251
 24e:	2a b9       	out	0x0a, r18	; 10
 250:	20 b5       	in	r18, 0x20	; 32
 252:	2b 7f       	andi	r18, 0xFB	; 251
 254:	20 bd       	out	0x20, r18	; 32
 256:	20 b5       	in	r18, 0x20	; 32
 258:	22 60       	ori	r18, 0x02	; 2
 25a:	20 bd       	out	0x20, r18	; 32
 25c:	1d c0       	rjmp	.+58     	; 0x298 <UART_Initialize_WithoutInterrupt+0xa8>
 25e:	2a b1       	in	r18, 0x0a	; 10
 260:	2b 7f       	andi	r18, 0xFB	; 251
 262:	2a b9       	out	0x0a, r18	; 10
 264:	20 b5       	in	r18, 0x20	; 32
 266:	24 60       	ori	r18, 0x04	; 4
 268:	20 bd       	out	0x20, r18	; 32
 26a:	20 b5       	in	r18, 0x20	; 32
 26c:	2d 7f       	andi	r18, 0xFD	; 253
 26e:	20 bd       	out	0x20, r18	; 32
 270:	13 c0       	rjmp	.+38     	; 0x298 <UART_Initialize_WithoutInterrupt+0xa8>
 272:	2a b1       	in	r18, 0x0a	; 10
 274:	2b 7f       	andi	r18, 0xFB	; 251
 276:	2a b9       	out	0x0a, r18	; 10
 278:	20 b5       	in	r18, 0x20	; 32
 27a:	24 60       	ori	r18, 0x04	; 4
 27c:	20 bd       	out	0x20, r18	; 32
 27e:	20 b5       	in	r18, 0x20	; 32
 280:	22 60       	ori	r18, 0x02	; 2
 282:	20 bd       	out	0x20, r18	; 32
 284:	09 c0       	rjmp	.+18     	; 0x298 <UART_Initialize_WithoutInterrupt+0xa8>
 286:	2a b1       	in	r18, 0x0a	; 10
 288:	24 60       	ori	r18, 0x04	; 4
 28a:	2a b9       	out	0x0a, r18	; 10
 28c:	20 b5       	in	r18, 0x20	; 32
 28e:	24 60       	ori	r18, 0x04	; 4
 290:	20 bd       	out	0x20, r18	; 32
 292:	20 b5       	in	r18, 0x20	; 32
 294:	22 60       	ori	r18, 0x02	; 2
 296:	20 bd       	out	0x20, r18	; 32
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	59 f0       	breq	.+22     	; 0x2b2 <UART_Initialize_WithoutInterrupt+0xc2>
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <UART_Initialize_WithoutInterrupt+0xb4>
 29e:	42 30       	cpi	r20, 0x02	; 2
 2a0:	79 f0       	breq	.+30     	; 0x2c0 <UART_Initialize_WithoutInterrupt+0xd0>
 2a2:	14 c0       	rjmp	.+40     	; 0x2cc <UART_Initialize_WithoutInterrupt+0xdc>
 2a4:	20 b5       	in	r18, 0x20	; 32
 2a6:	2f 7d       	andi	r18, 0xDF	; 223
 2a8:	20 bd       	out	0x20, r18	; 32
 2aa:	20 b5       	in	r18, 0x20	; 32
 2ac:	2f 7e       	andi	r18, 0xEF	; 239
 2ae:	20 bd       	out	0x20, r18	; 32
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <UART_Initialize_WithoutInterrupt+0xdc>
 2b2:	20 b5       	in	r18, 0x20	; 32
 2b4:	20 62       	ori	r18, 0x20	; 32
 2b6:	20 bd       	out	0x20, r18	; 32
 2b8:	20 b5       	in	r18, 0x20	; 32
 2ba:	2f 7e       	andi	r18, 0xEF	; 239
 2bc:	20 bd       	out	0x20, r18	; 32
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <UART_Initialize_WithoutInterrupt+0xdc>
 2c0:	20 b5       	in	r18, 0x20	; 32
 2c2:	20 62       	ori	r18, 0x20	; 32
 2c4:	20 bd       	out	0x20, r18	; 32
 2c6:	20 b5       	in	r18, 0x20	; 32
 2c8:	20 61       	ori	r18, 0x10	; 16
 2ca:	20 bd       	out	0x20, r18	; 32
 2cc:	00 23       	and	r16, r16
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <UART_Initialize_WithoutInterrupt+0xe6>
 2d0:	01 30       	cpi	r16, 0x01	; 1
 2d2:	29 f0       	breq	.+10     	; 0x2de <UART_Initialize_WithoutInterrupt+0xee>
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <UART_Initialize_WithoutInterrupt+0xf4>
 2d6:	20 b5       	in	r18, 0x20	; 32
 2d8:	27 7f       	andi	r18, 0xF7	; 247
 2da:	20 bd       	out	0x20, r18	; 32
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <UART_Initialize_WithoutInterrupt+0xf4>
 2de:	20 b5       	in	r18, 0x20	; 32
 2e0:	28 60       	ori	r18, 0x08	; 8
 2e2:	20 bd       	out	0x20, r18	; 32
 2e4:	9c 01       	movw	r18, r24
 2e6:	22 95       	swap	r18
 2e8:	32 95       	swap	r19
 2ea:	30 7f       	andi	r19, 0xF0	; 240
 2ec:	32 27       	eor	r19, r18
 2ee:	20 7f       	andi	r18, 0xF0	; 240
 2f0:	32 27       	eor	r19, r18
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	71 e7       	ldi	r23, 0x71	; 113
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 25 04 	call	0x84a	; 0x84a <__divmodsi4>
 302:	21 50       	subi	r18, 0x01	; 1
 304:	31 09       	sbc	r19, r1
 306:	29 b9       	out	0x09, r18	; 9
 308:	30 bd       	out	0x20, r19	; 32
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

Disassembly of section .text.UART_Receive_Character:

0000090a <UART_Receive_Character>:
 90a:	5f 9b       	sbis	0x0b, 7	; 11
 90c:	fe cf       	rjmp	.-4      	; 0x90a <UART_Receive_Character>
 90e:	2c b1       	in	r18, 0x0c	; 12
 910:	fc 01       	movw	r30, r24
 912:	20 83       	st	Z, r18
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	08 95       	ret

Disassembly of section .text.Reassemble_uint16:

000009b4 <Reassemble_uint16>:
	*data=Reassemble_uint16(high_byte,low_byte);
	return s;
}

uint16_t Reassemble_uint16(uint8_t high_byte, uint8_t low_byte){
	return ((uint16_t)high_byte << 8) | low_byte;
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	98 2f       	mov	r25, r24
 9b8:	88 27       	eor	r24, r24
}
 9ba:	86 2b       	or	r24, r22
 9bc:	08 95       	ret

Disassembly of section .text.UART_Receive_Word:

00000774 <UART_Receive_Word>:
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
	s|= UART_Transmit_Character(low_byte);
	return s;

}
 774:	ef 92       	push	r14
 776:	ff 92       	push	r15
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	00 d0       	rcall	.+0      	; 0x780 <UART_Receive_Word+0xc>
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	7c 01       	movw	r14, r24
 786:	19 82       	std	Y+1, r1	; 0x01
 788:	1a 82       	std	Y+2, r1	; 0x02
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	0e 94 85 04 	call	0x90a	; 0x90a <UART_Receive_Character>
 792:	18 2f       	mov	r17, r24
 794:	ce 01       	movw	r24, r28
 796:	02 96       	adiw	r24, 0x02	; 2
 798:	0e 94 85 04 	call	0x90a	; 0x90a <UART_Receive_Character>
 79c:	18 2b       	or	r17, r24
 79e:	6a 81       	ldd	r22, Y+2	; 0x02
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <Reassemble_uint16>
 7a6:	f7 01       	movw	r30, r14
 7a8:	91 83       	std	Z+1, r25	; 0x01
 7aa:	80 83       	st	Z, r24
 7ac:	81 2f       	mov	r24, r17
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	1f 91       	pop	r17
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	08 95       	ret

Disassembly of section .text:

000009be <__cmpsf2>:
 9be:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_cmp>
 9c2:	08 f4       	brcc	.+2      	; 0x9c6 <__cmpsf2+0x8>
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	08 95       	ret

Disassembly of section .text:

000005ea <__floatunsisf>:
 5ea:	e8 94       	clt
 5ec:	09 c0       	rjmp	.+18     	; 0x600 <__floatsisf+0x12>

000005ee <__floatsisf>:
 5ee:	97 fb       	bst	r25, 7
 5f0:	3e f4       	brtc	.+14     	; 0x600 <__floatsisf+0x12>
 5f2:	90 95       	com	r25
 5f4:	80 95       	com	r24
 5f6:	70 95       	com	r23
 5f8:	61 95       	neg	r22
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	8f 4f       	sbci	r24, 0xFF	; 255
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	99 23       	and	r25, r25
 602:	a9 f0       	breq	.+42     	; 0x62e <__floatsisf+0x40>
 604:	f9 2f       	mov	r31, r25
 606:	96 e9       	ldi	r25, 0x96	; 150
 608:	bb 27       	eor	r27, r27
 60a:	93 95       	inc	r25
 60c:	f6 95       	lsr	r31
 60e:	87 95       	ror	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b7 95       	ror	r27
 616:	f1 11       	cpse	r31, r1
 618:	f8 cf       	rjmp	.-16     	; 0x60a <__floatsisf+0x1c>
 61a:	fa f4       	brpl	.+62     	; 0x65a <__floatsisf+0x6c>
 61c:	bb 0f       	add	r27, r27
 61e:	11 f4       	brne	.+4      	; 0x624 <__floatsisf+0x36>
 620:	60 ff       	sbrs	r22, 0
 622:	1b c0       	rjmp	.+54     	; 0x65a <__floatsisf+0x6c>
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	16 c0       	rjmp	.+44     	; 0x65a <__floatsisf+0x6c>
 62e:	88 23       	and	r24, r24
 630:	11 f0       	breq	.+4      	; 0x636 <__floatsisf+0x48>
 632:	96 e9       	ldi	r25, 0x96	; 150
 634:	11 c0       	rjmp	.+34     	; 0x658 <__floatsisf+0x6a>
 636:	77 23       	and	r23, r23
 638:	21 f0       	breq	.+8      	; 0x642 <__floatsisf+0x54>
 63a:	9e e8       	ldi	r25, 0x8E	; 142
 63c:	87 2f       	mov	r24, r23
 63e:	76 2f       	mov	r23, r22
 640:	05 c0       	rjmp	.+10     	; 0x64c <__floatsisf+0x5e>
 642:	66 23       	and	r22, r22
 644:	71 f0       	breq	.+28     	; 0x662 <__floatsisf+0x74>
 646:	96 e8       	ldi	r25, 0x86	; 134
 648:	86 2f       	mov	r24, r22
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	60 e0       	ldi	r22, 0x00	; 0
 64e:	2a f0       	brmi	.+10     	; 0x65a <__floatsisf+0x6c>
 650:	9a 95       	dec	r25
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	88 1f       	adc	r24, r24
 658:	da f7       	brpl	.-10     	; 0x650 <__floatsisf+0x62>
 65a:	88 0f       	add	r24, r24
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	97 f9       	bld	r25, 7
 662:	08 95       	ret

Disassembly of section .text:

000007be <__fp_cmp>:
 7be:	99 0f       	add	r25, r25
 7c0:	00 08       	sbc	r0, r0
 7c2:	55 0f       	add	r21, r21
 7c4:	aa 0b       	sbc	r26, r26
 7c6:	e0 e8       	ldi	r30, 0x80	; 128
 7c8:	fe ef       	ldi	r31, 0xFE	; 254
 7ca:	16 16       	cp	r1, r22
 7cc:	17 06       	cpc	r1, r23
 7ce:	e8 07       	cpc	r30, r24
 7d0:	f9 07       	cpc	r31, r25
 7d2:	c0 f0       	brcs	.+48     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7d4:	12 16       	cp	r1, r18
 7d6:	13 06       	cpc	r1, r19
 7d8:	e4 07       	cpc	r30, r20
 7da:	f5 07       	cpc	r31, r21
 7dc:	98 f0       	brcs	.+38     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7de:	62 1b       	sub	r22, r18
 7e0:	73 0b       	sbc	r23, r19
 7e2:	84 0b       	sbc	r24, r20
 7e4:	95 0b       	sbc	r25, r21
 7e6:	39 f4       	brne	.+14     	; 0x7f6 <__fp_cmp+0x38>
 7e8:	0a 26       	eor	r0, r26
 7ea:	61 f0       	breq	.+24     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7ec:	23 2b       	or	r18, r19
 7ee:	24 2b       	or	r18, r20
 7f0:	25 2b       	or	r18, r21
 7f2:	21 f4       	brne	.+8      	; 0x7fc <__fp_cmp+0x3e>
 7f4:	08 95       	ret
 7f6:	0a 26       	eor	r0, r26
 7f8:	09 f4       	brne	.+2      	; 0x7fc <__fp_cmp+0x3e>
 7fa:	a1 40       	sbci	r26, 0x01	; 1
 7fc:	a6 95       	lsr	r26
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	81 1d       	adc	r24, r1
 802:	81 1d       	adc	r24, r1
 804:	08 95       	ret

Disassembly of section .text:

000009c8 <__gesf2>:
 9c8:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_cmp>
 9cc:	08 f4       	brcc	.+2      	; 0x9d0 <__gesf2+0x8>
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000806 <__udivmodsi4>:
 806:	a1 e2       	ldi	r26, 0x21	; 33
 808:	1a 2e       	mov	r1, r26
 80a:	aa 1b       	sub	r26, r26
 80c:	bb 1b       	sub	r27, r27
 80e:	fd 01       	movw	r30, r26
 810:	0d c0       	rjmp	.+26     	; 0x82c <__udivmodsi4_ep>

00000812 <__udivmodsi4_loop>:
 812:	aa 1f       	adc	r26, r26
 814:	bb 1f       	adc	r27, r27
 816:	ee 1f       	adc	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	a2 17       	cp	r26, r18
 81c:	b3 07       	cpc	r27, r19
 81e:	e4 07       	cpc	r30, r20
 820:	f5 07       	cpc	r31, r21
 822:	20 f0       	brcs	.+8      	; 0x82c <__udivmodsi4_ep>
 824:	a2 1b       	sub	r26, r18
 826:	b3 0b       	sbc	r27, r19
 828:	e4 0b       	sbc	r30, r20
 82a:	f5 0b       	sbc	r31, r21

0000082c <__udivmodsi4_ep>:
 82c:	66 1f       	adc	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	1a 94       	dec	r1
 836:	69 f7       	brne	.-38     	; 0x812 <__udivmodsi4_loop>
 838:	60 95       	com	r22
 83a:	70 95       	com	r23
 83c:	80 95       	com	r24
 83e:	90 95       	com	r25
 840:	9b 01       	movw	r18, r22
 842:	ac 01       	movw	r20, r24
 844:	bd 01       	movw	r22, r26
 846:	cf 01       	movw	r24, r30
 848:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000084a <__divmodsi4>:
 84a:	05 2e       	mov	r0, r21
 84c:	97 fb       	bst	r25, 7
 84e:	1e f4       	brtc	.+6      	; 0x856 <__divmodsi4+0xc>
 850:	00 94       	com	r0
 852:	0e 94 76 04 	call	0x8ec	; 0x8ec <__negsi2>
 856:	57 fd       	sbrc	r21, 7
 858:	07 d0       	rcall	.+14     	; 0x868 <__divmodsi4_neg2>
 85a:	0e 94 03 04 	call	0x806	; 0x806 <__udivmodsi4>
 85e:	07 fc       	sbrc	r0, 7
 860:	03 d0       	rcall	.+6      	; 0x868 <__divmodsi4_neg2>
 862:	4e f4       	brtc	.+18     	; 0x876 <__divmodsi4_exit>
 864:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__negsi2>

00000868 <__divmodsi4_neg2>:
 868:	50 95       	com	r21
 86a:	40 95       	com	r20
 86c:	30 95       	com	r19
 86e:	21 95       	neg	r18
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	4f 4f       	sbci	r20, 0xFF	; 255
 874:	5f 4f       	sbci	r21, 0xFF	; 255

00000876 <__divmodsi4_exit>:
 876:	08 95       	ret

Disassembly of section .text.libgcc.div:

000008ec <__negsi2>:
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	08 95       	ret

Disassembly of section .text.libgcc:

000009a8 <__tablejump2__>:
 9a8:	ee 0f       	add	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	05 90       	lpm	r0, Z+
 9ae:	f4 91       	lpm	r31, Z
 9b0:	e0 2d       	mov	r30, r0
 9b2:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000009da <_fini>:
 9da:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000009dc <__funcs_on_exit>:
 9dc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000009de <__simulator_exit>:
 9de:	08 95       	ret

Disassembly of section .text.exit:

000008d6 <exit>:
 8d6:	ec 01       	movw	r28, r24
 8d8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__funcs_on_exit>
 8dc:	0e 94 ed 04 	call	0x9da	; 0x9da <_fini>
 8e0:	ce 01       	movw	r24, r28
 8e2:	0e 94 ef 04 	call	0x9de	; 0x9de <__simulator_exit>
 8e6:	ce 01       	movw	r24, r28
 8e8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Exit>

Disassembly of section .text._Exit:

000009d6 <_Exit>:
 9d6:	0e 94 5d 00 	call	0xba	; 0xba <_exit>
